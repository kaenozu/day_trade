name: Production Deployment and Quality Assurance

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # 毎日午前2時（JST）に品質チェック実行
    - cron: '0 17 * * *'

env:
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '18'

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety semgrep

    - name: Run Bandit security scanner
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f txt

    - name: Run Safety dependency scanner
      run: |
        safety check --json --output safety-report.json || true
        safety check

    - name: Run Semgrep SAST
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          semgrep-report.json

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pylint flake8 mypy black isort

    - name: Run Black formatter check
      run: |
        black --check --diff .

    - name: Run isort import sorting check
      run: |
        isort --check-only --diff .

    - name: Run Flake8 linting
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run PyLint analysis
      run: |
        pylint src/ --output-format=json > pylint-report.json || true
        pylint src/

    - name: Run MyPy type checking
      run: |
        mypy src/ --ignore-missing-imports || true

    - name: Upload quality reports
      uses: actions/upload-artifact@v3
      with:
        name: quality-reports
        path: |
          pylint-report.json

  test-suite:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, system]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist pytest-mock

    - name: Create test directories
      run: |
        mkdir -p test-reports
        mkdir -p coverage-reports

    - name: Run Unit Tests
      if: matrix.test-type == 'unit'
      run: |
        pytest tests/test_*.py -v \
          --cov=src \
          --cov-report=xml:coverage-reports/unit-coverage.xml \
          --cov-report=html:coverage-reports/unit-coverage-html \
          --junit-xml=test-reports/unit-test-results.xml \
          -x --tb=short

    - name: Run Integration Tests
      if: matrix.test-type == 'integration'
      run: |
        pytest tests/integration/ -v \
          --cov=src \
          --cov-report=xml:coverage-reports/integration-coverage.xml \
          --junit-xml=test-reports/integration-test-results.xml \
          -x --tb=short

    - name: Run System Tests
      if: matrix.test-type == 'system'
      run: |
        pytest tests/test_system_integration_enhanced.py -v \
          --cov=src \
          --cov-report=xml:coverage-reports/system-coverage.xml \
          --junit-xml=test-reports/system-test-results.xml \
          -x --tb=short

    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          test-reports/
          coverage-reports/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: coverage-reports/*-coverage.xml
        flags: ${{ matrix.test-type }}
        name: ${{ matrix.test-type }}-coverage

  performance-test:
    name: Performance and Load Testing
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark memory-profiler line-profiler

    - name: Run performance benchmarks
      run: |
        python -m pytest tests/performance/ -v \
          --benchmark-only \
          --benchmark-json=performance-report.json

    - name: Memory profiling
      run: |
        python -m memory_profiler tests/test_memory_usage.py > memory-profile.txt || true

    - name: Upload performance reports
      uses: actions/upload-artifact@v3
      with:
        name: performance-reports
        path: |
          performance-report.json
          memory-profile.txt

  docker-build:
    name: Docker Image Build and Scan
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test-suite]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t day-trade-system:latest .

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'day-trade-system:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deployment-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # 実際のデプロイメントスクリプトに置き換え

    - name: Run smoke tests
      run: |
        echo "Running smoke tests on staging..."
        # 本番類似環境でのスモークテスト

    - name: Performance validation
      run: |
        echo "Validating performance metrics..."
        # パフォーマンス基準の検証

  security-compliance:
    name: Security Compliance Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'day-trade-system'
        path: '.'
        format: 'ALL'

    - name: Upload OWASP report
      uses: actions/upload-artifact@v3
      with:
        name: owasp-report
        path: reports/

  documentation-check:
    name: Documentation Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check documentation completeness
      run: |
        # ドキュメントの完全性チェック
        find docs/ -name "*.md" | wc -l
        grep -r "TODO\|FIXME\|XXX" docs/ || true

    - name: Validate links in documentation
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/markdown-link-check-config.json'

  release-preparation:
    name: Release Preparation
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, test-suite, performance-test, security-compliance]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate release notes
      run: |
        echo "# Release Notes" > RELEASE_NOTES.md
        echo "## $(date '+%Y-%m-%d')" >> RELEASE_NOTES.md
        git log --oneline --since="1 week ago" >> RELEASE_NOTES.md

    - name: Create version tag
      run: |
        VERSION=$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Generate deployment artifacts
      run: |
        mkdir -p deployment-artifacts
        cp config/environments/production_enhanced.json deployment-artifacts/
        cp OPTIMIZATION_COMPLETION_REPORT.md deployment-artifacts/
        cp SYSTEM_ENHANCEMENT_COMPLETION_REPORT.md deployment-artifacts/

    - name: Upload deployment artifacts
      uses: actions/upload-artifact@v3
      with:
        name: deployment-artifacts-${{ env.VERSION }}
        path: deployment-artifacts/

  notification:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [release-preparation]
    if: always()

    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.release-preparation.result }}" == "success" ]; then
          echo "✅ Day Trade System deployment pipeline completed successfully"
        else
          echo "❌ Day Trade System deployment pipeline failed"
        fi

    - name: Generate pipeline summary
      run: |
        echo "## Pipeline Summary" > pipeline-summary.md
        echo "- Security Scan: ${{ needs.security-scan.result }}" >> pipeline-summary.md
        echo "- Code Quality: ${{ needs.code-quality.result }}" >> pipeline-summary.md
        echo "- Test Suite: ${{ needs.test-suite.result }}" >> pipeline-summary.md
        echo "- Performance Test: ${{ needs.performance-test.result }}" >> pipeline-summary.md
        echo "- Docker Build: ${{ needs.docker-build.result }}" >> pipeline-summary.md
        echo "- Security Compliance: ${{ needs.security-compliance.result }}" >> pipeline-summary.md
        echo "- Release Preparation: ${{ needs.release-preparation.result }}" >> pipeline-summary.md
        cat pipeline-summary.md

    - name: Upload pipeline summary
      uses: actions/upload-artifact@v3
      with:
        name: pipeline-summary
        path: pipeline-summary.md