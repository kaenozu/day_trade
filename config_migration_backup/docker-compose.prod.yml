# Issue #800 Phase 1: Docker Compose本番環境設定
# 本番環境用最適化・セキュリティ強化構成

version: '3.8'

services:
  # Redis - 本番設定
  redis:
    image: redis:7-alpine
    container_name: day-trade-redis-prod
    restart: unless-stopped
    volumes:
      - redis_prod_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - day-trade-prod-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # PostgreSQL - 本番設定
  postgres:
    image: postgres:15-alpine
    container_name: day-trade-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - day-trade-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # MLサービス - 本番設定
  ml-service:
    build:
      context: .
      dockerfile: docker/ml-service/Dockerfile
    container_name: day-trade-ml-service-prod
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - ML_MODEL_PATH=/app/models
      - LOG_LEVEL=WARNING
      - PYTHONUNBUFFERED=1
    volumes:
      - ml_models_prod:/app/models:ro
      - ml_logs_prod:/app/logs
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - day-trade-prod-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
      replicas: 2

  # データサービス - 本番設定
  data-service:
    build:
      context: .
      dockerfile: docker/data-service/Dockerfile
    container_name: day-trade-data-service-prod
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - DATA_CACHE_PATH=/app/data
      - LOG_LEVEL=WARNING
      - MARKET_DATA_API_KEY=${MARKET_DATA_API_KEY}
      - PYTHONUNBUFFERED=1
    volumes:
      - data_cache_prod:/app/data
      - data_logs_prod:/app/logs
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - day-trade-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # スケジューラサービス - 本番設定
  scheduler-service:
    build:
      context: .
      dockerfile: docker/scheduler-service/Dockerfile
    container_name: day-trade-scheduler-service-prod
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - SCHEDULER_CONFIG_PATH=/app/schedules
      - LOG_LEVEL=WARNING
      - MARKET_HOURS_TIMEZONE=Asia/Tokyo
      - PYTHONUNBUFFERED=1
    volumes:
      - scheduler_config_prod:/app/schedules:ro
      - scheduler_logs_prod:/app/logs
    depends_on:
      - redis
      - postgres
      - ml-service
      - data-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - day-trade-prod-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Nginx - リバースプロキシ・ロードバランサ
  nginx:
    image: nginx:alpine
    container_name: day-trade-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - ml-service
      - data-service
      - scheduler-service
    networks:
      - day-trade-prod-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Prometheus - 本番監視
  prometheus:
    image: prom/prometheus:latest
    container_name: day-trade-prometheus-prod
    restart: unless-stopped
    volumes:
      - ./docker/prometheus/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_prod_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - day-trade-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Grafana - 本番ダッシュボード
  grafana:
    image: grafana/grafana:latest
    container_name: day-trade-grafana-prod
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ANALYTICS_REPORTING_ENABLED=false
    volumes:
      - grafana_prod_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - day-trade-prod-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

# 本番ボリューム定義
volumes:
  redis_prod_data:
    driver: local
  postgres_prod_data:
    driver: local
  ml_models_prod:
    driver: local
  ml_logs_prod:
    driver: local
  data_cache_prod:
    driver: local
  data_logs_prod:
    driver: local
  scheduler_config_prod:
    driver: local
  scheduler_logs_prod:
    driver: local
  prometheus_prod_data:
    driver: local
  grafana_prod_data:
    driver: local

# 本番ネットワーク定義
networks:
  day-trade-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16