name: 'Merge Conflict Detector'
description: 'Detects potential merge conflicts and provides resolution guidance'
author: 'Day Trade ML System'

inputs:
  base-branch:
    description: 'Base branch to check conflicts against'
    required: false
    default: 'main'

  current-branch:
    description: 'Current branch to check for conflicts'
    required: false
    default: ${{ github.head_ref || github.ref_name }}

  config-file:
    description: 'Path to conflict detection configuration file'
    required: false
    default: '.github/conflict-detection-config.yml'

  github-token:
    description: 'GitHub token for API access'
    required: false
    default: ${{ github.token }}

  enable-auto-comment:
    description: 'Enable automatic PR commenting'
    required: false
    default: 'true'

outputs:
  conflicts-detected:
    description: 'Whether merge conflicts were detected'
    value: ${{ steps.conflict-check.outputs.conflicts-detected }}

  conflicted-files:
    description: 'List of files with conflicts'
    value: ${{ steps.conflict-check.outputs.conflicted-files }}

  high-risk-changes:
    description: 'Whether high-risk changes were detected'
    value: ${{ steps.risk-analysis.outputs.high-risk-changes }}

  risk-categories:
    description: 'Categories of high-risk changes'
    value: ${{ steps.risk-analysis.outputs.risk-categories }}

runs:
  using: 'composite'
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        echo "🔍 Validating conflict detection inputs..."
        echo "Base branch: ${{ inputs.base-branch }}"
        echo "Current branch: ${{ inputs.current-branch }}"
        echo "Config file: ${{ inputs.config-file }}"
        echo "Auto comment: ${{ inputs.enable-auto-comment }}"

        # Validate branches are different
        if [ "${{ inputs.base-branch }}" = "${{ inputs.current-branch }}" ]; then
          echo "⏭️ Same branch detected - skipping conflict check"
          echo "skip_conflict_check=true" >> $GITHUB_ENV
        else
          echo "skip_conflict_check=false" >> $GITHUB_ENV
        fi

    - name: Load configuration
      shell: bash
      run: |
        if [ -f "${{ inputs.config-file }}" ]; then
          echo "📄 Loading configuration from: ${{ inputs.config-file }}"
          # Parse YAML configuration (basic implementation)
          # In a real implementation, you'd use a proper YAML parser
        else
          echo "⚠️ Configuration file not found, using defaults"
        fi

    - name: Setup Git environment
      shell: bash
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git fetch --all --prune

    - name: Perform conflict detection
      id: conflict-check
      shell: bash
      run: |
        if [ "${{ env.skip_conflict_check }}" = "true" ]; then
          echo "conflicts-detected=false" >> $GITHUB_OUTPUT
          echo "conflicted-files=" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "🔍 Checking for merge conflicts..."

        # Create temporary branch for merge test
        TEMP_BRANCH="temp-conflict-check-$(date +%s)"
        git checkout -b "$TEMP_BRANCH" "origin/${{ inputs.current-branch }}"

        # Attempt merge
        if git merge "origin/${{ inputs.base-branch }}" --no-commit --no-ff 2>&1; then
          echo "✅ No conflicts detected"
          echo "conflicts-detected=false" >> $GITHUB_OUTPUT
          echo "conflicted-files=" >> $GITHUB_OUTPUT
          git merge --abort 2>/dev/null || true
        else
          echo "⚠️ Conflicts detected"
          CONFLICTED_FILES=$(git diff --name-only --diff-filter=U 2>/dev/null | tr '\n' ',' | sed 's/,$//')
          echo "conflicts-detected=true" >> $GITHUB_OUTPUT
          echo "conflicted-files=$CONFLICTED_FILES" >> $GITHUB_OUTPUT
          git merge --abort 2>/dev/null || true
        fi

        # Cleanup
        git checkout "${{ inputs.current-branch }}" 2>/dev/null || git checkout -
        git branch -D "$TEMP_BRANCH" 2>/dev/null || true

    - name: Analyze high-risk changes
      id: risk-analysis
      shell: bash
      run: |
        if [ "${{ env.skip_conflict_check }}" = "true" ]; then
          echo "high-risk-changes=false" >> $GITHUB_OUTPUT
          echo "risk-categories=" >> $GITHUB_OUTPUT
          exit 0
        fi

        echo "📊 Analyzing change patterns for high-risk areas..."

        # Get changed files
        CHANGED_FILES=$(git diff --name-only "origin/${{ inputs.base-branch }}..HEAD" 2>/dev/null || echo "")

        # Check for high-risk patterns
        RISK_CATEGORIES=""

        # Configuration files
        if echo "$CHANGED_FILES" | grep -qE '\.(yml|yaml|json|ini|cfg|conf|toml)$'; then
          RISK_CATEGORIES="$RISK_CATEGORIES,configuration"
        fi

        # Database files
        if echo "$CHANGED_FILES" | grep -qE '(migration|schema|database|\.sql)'; then
          RISK_CATEGORIES="$RISK_CATEGORIES,database"
        fi

        # CI/CD files
        if echo "$CHANGED_FILES" | grep -qE '(\.github|\.gitlab|\.circleci|Dockerfile|docker-compose)'; then
          RISK_CATEGORIES="$RISK_CATEGORIES,cicd"
        fi

        # Core system files
        if echo "$CHANGED_FILES" | grep -qE '(main|core|base|foundation|daytrade|day_trading_engine)\.(py|js|ts)$'; then
          RISK_CATEGORIES="$RISK_CATEGORIES,core-system"
        fi

        # Security files
        if echo "$CHANGED_FILES" | grep -qE '(security|auth|permission|requirements.*\.txt|setup\.py|pyproject\.toml)'; then
          RISK_CATEGORIES="$RISK_CATEGORIES,security"
        fi

        # Remove leading comma
        RISK_CATEGORIES=$(echo "$RISK_CATEGORIES" | sed 's/^,//')

        if [ -n "$RISK_CATEGORIES" ]; then
          echo "high-risk-changes=true" >> $GITHUB_OUTPUT
          echo "risk-categories=$RISK_CATEGORIES" >> $GITHUB_OUTPUT
          echo "🚨 High-risk changes detected: $RISK_CATEGORIES"
        else
          echo "high-risk-changes=false" >> $GITHUB_OUTPUT
          echo "risk-categories=" >> $GITHUB_OUTPUT
          echo "✅ No high-risk changes detected"
        fi

    - name: Generate conflict report
      if: steps.conflict-check.outputs.conflicts-detected == 'true'
      shell: bash
      run: |
        echo "📋 Generating detailed conflict report..."

        CONFLICTED_FILES="${{ steps.conflict-check.outputs.conflicted-files }}"
        echo "Conflicted files: $CONFLICTED_FILES"

        # Save report for potential artifact upload
        cat > conflict-report.md << EOF
        # Merge Conflict Report

        **Branch:** ${{ inputs.current-branch }}
        **Base:** ${{ inputs.base-branch }}
        **Timestamp:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")

        ## Conflicted Files
        \`\`\`
        $(echo "$CONFLICTED_FILES" | tr ',' '\n')
        \`\`\`

        ## Resolution Steps
        1. Checkout your branch: \`git checkout ${{ inputs.current-branch }}\`
        2. Merge base branch: \`git merge origin/${{ inputs.base-branch }}\`
        3. Resolve conflicts in the files listed above
        4. Add resolved files: \`git add <resolved-files>\`
        5. Commit merge: \`git commit -m "Resolve merge conflicts"\`
        6. Push changes: \`git push origin ${{ inputs.current-branch }}\`
        EOF

    - name: Upload conflict report
      if: steps.conflict-check.outputs.conflicts-detected == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: conflict-report-${{ github.run_number }}
        path: conflict-report.md
        retention-days: 7

branding:
  icon: 'git-merge'
  color: 'red'