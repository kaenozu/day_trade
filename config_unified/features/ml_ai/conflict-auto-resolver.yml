# マージコンフリクト自動解決支援システム
# Issue #883拡張: 自動解決可能なコンフリクトの検知と支援
name: Conflict Auto Resolver

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  auto-resolve-support:
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/resolve-conflicts')
    name: "🤖 コンフリクト自動解決支援"

    steps:
      - name: Check comment author permissions
        id: check-permissions
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const username = context.payload.comment.user.login;

            try {
              const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner,
                repo,
                username
              });

              const hasPermission = ['admin', 'write'].includes(permission.permission);
              console.log(`User ${username} has permission: ${permission.permission}`);

              return hasPermission;
            } catch (error) {
              console.log(`Error checking permissions: ${error.message}`);
              return false;
            }

      - name: Get PR details
        if: steps.check-permissions.outputs.result == 'true'
        id: pr-details
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.issue.number;
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            return {
              head_ref: pr.head.ref,
              head_sha: pr.head.sha,
              base_ref: pr.base.ref,
              base_sha: pr.base.sha,
              html_url: pr.html_url
            };

      - name: Checkout repository
        if: steps.check-permissions.outputs.result == 'true'
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        if: steps.check-permissions.outputs.result == 'true'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Analyze conflicts for auto-resolution
        if: steps.check-permissions.outputs.result == 'true'
        id: analyze-conflicts
        run: |
          echo "🔍 コンフリクトの自動解決可能性を分析中..."

          PR_DATA='${{ steps.pr-details.outputs.result }}'
          HEAD_REF=$(echo "$PR_DATA" | jq -r '.head_ref')
          BASE_REF=$(echo "$PR_DATA" | jq -r '.base_ref')

          # ブランチを取得
          git fetch origin $HEAD_REF:$HEAD_REF
          git fetch origin $BASE_REF:$BASE_REF

          # コンフリクトファイルを特定
          git checkout $BASE_REF

          AUTO_RESOLVABLE=false
          CONFLICT_FILES=""
          RESOLUTION_STRATEGY=""

          if ! git merge --no-commit --no-ff $HEAD_REF 2>/dev/null; then
            CONFLICT_FILES=$(git diff --name-only --diff-filter=U)
            echo "コンフリクトファイル: $CONFLICT_FILES"

            # 自動解決可能性の分析
            for file in $CONFLICT_FILES; do
              echo "ファイル分析: $file"

              # 特定のパターンで自動解決可能かチェック
              if [[ "$file" == "requirements.txt" ]] || [[ "$file" == "pyproject.toml" ]]; then
                # 依存関係ファイルの場合
                if grep -E "^<<<<<<< |^=======$|^>>>>>>> " "$file" | wc -l | grep -q "^[0-9][0-9]*$"; then
                  echo "依存関係ファイルでの自動解決を試行"
                  RESOLUTION_STRATEGY="dependencies"
                  AUTO_RESOLVABLE=true
                fi
              elif [[ "$file" == *.py ]]; then
                # Pythonファイルでのインポート重複チェック
                if grep -A5 -B5 "^<<<<<<< " "$file" | grep -q "^import\|^from.*import"; then
                  echo "インポート文のコンフリクトを検出"
                  RESOLUTION_STRATEGY="imports"
                  AUTO_RESOLVABLE=true
                fi
              elif [[ "$file" == *.md ]]; then
                # ドキュメントファイルの場合
                echo "ドキュメントファイルでの自動解決を試行"
                RESOLUTION_STRATEGY="documentation"
                AUTO_RESOLVABLE=true
              fi
            done

            git merge --abort
          else
            echo "コンフリクトが検出されませんでした"
            git reset --hard HEAD
          fi

          echo "auto_resolvable=$AUTO_RESOLVABLE" >> $GITHUB_OUTPUT
          echo "conflict_files=$CONFLICT_FILES" >> $GITHUB_OUTPUT
          echo "resolution_strategy=$RESOLUTION_STRATEGY" >> $GITHUB_OUTPUT

      - name: Attempt automatic conflict resolution
        if: steps.check-permissions.outputs.result == 'true' && steps.analyze-conflicts.outputs.auto_resolvable == 'true'
        id: auto-resolve
        run: |
          echo "🤖 自動コンフリクト解決を試行中..."

          PR_DATA='${{ steps.pr-details.outputs.result }}'
          HEAD_REF=$(echo "$PR_DATA" | jq -r '.head_ref')
          BASE_REF=$(echo "$PR_DATA" | jq -r '.base_ref')
          STRATEGY="${{ steps.analyze-conflicts.outputs.resolution_strategy }}"

          git checkout $HEAD_REF

          RESOLUTION_SUCCESS=false
          RESOLUTION_LOG=""

          # ベースブランチをマージ
          if ! git merge origin/$BASE_REF --no-commit 2>&1 | tee merge_output.log; then
            # コンフリクトが発生した場合の自動解決
            CONFLICT_FILES="${{ steps.analyze-conflicts.outputs.conflict_files }}"

            case "$STRATEGY" in
              "dependencies")
                echo "依存関係ファイルの自動解決を実行中..."
                for file in $CONFLICT_FILES; do
                  if [[ "$file" == "requirements.txt" ]] || [[ "$file" == "pyproject.toml" ]]; then
                    # 両方のバージョンをマージして重複を除去
                    git show :2:"$file" > base_version.tmp 2>/dev/null || touch base_version.tmp
                    git show :3:"$file" > head_version.tmp 2>/dev/null || touch head_version.tmp

                    # 依存関係をマージ（重複除去）
                    cat base_version.tmp head_version.tmp | sort | uniq > "$file"
                    git add "$file"

                    RESOLUTION_LOG="$RESOLUTION_LOG\n- $file: 依存関係をマージしました"
                  fi
                done
                RESOLUTION_SUCCESS=true
                ;;

              "imports")
                echo "インポート文の自動解決を実行中..."
                for file in $CONFLICT_FILES; do
                  if [[ "$file" == *.py ]]; then
                    # インポート文の重複を解決（簡易版）
                    # コンフリクトマーカーを除去し、インポート文を統合
                    grep -v "^<<<<<<<\|^=======$\|^>>>>>>>" "$file" | sort | uniq > "${file}.resolved"
                    mv "${file}.resolved" "$file"
                    git add "$file"
                    RESOLUTION_LOG="$RESOLUTION_LOG\n- $file: インポート文を統合しました"
                  fi
                done
                RESOLUTION_SUCCESS=true
                ;;

              "documentation")
                echo "ドキュメントファイルの自動解決を実行中..."
                for file in $CONFLICT_FILES; do
                  if [[ "$file" == *.md ]]; then
                    # ドキュメントの場合は両方のバージョンを保持
                    git show :2:"$file" > base_doc.tmp 2>/dev/null || touch base_doc.tmp
                    git show :3:"$file" > head_doc.tmp 2>/dev/null || touch head_doc.tmp

                    # 両方の内容をマージ
                    {
                      echo "<!-- ベースブランチからの内容 -->"
                      cat base_doc.tmp
                      echo ""
                      echo "<!-- PRブランチからの内容 -->"
                      cat head_doc.tmp
                    } > "$file"

                    git add "$file"
                    RESOLUTION_LOG="$RESOLUTION_LOG\n- $file: ドキュメントを統合しました（手動確認推奨）"
                  fi
                done
                RESOLUTION_SUCCESS=true
                ;;
            esac

            # 解決できた場合はコミット
            if [ "$RESOLUTION_SUCCESS" = true ]; then
              git commit -m "Auto-resolve merge conflicts

              $RESOLUTION_LOG

              🤖 自動解決 by GitHub Actions"

              # プッシュ
              git push origin $HEAD_REF
            fi
          else
            echo "コンフリクトが存在しませんでした"
            git reset --hard HEAD
          fi

          echo "resolution_success=$RESOLUTION_SUCCESS" >> $GITHUB_OUTPUT
          echo "resolution_log<<EOF" >> $GITHUB_OUTPUT
          echo -e "$RESOLUTION_LOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment resolution result
        if: steps.check-permissions.outputs.result == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const autoResolvable = '${{ steps.analyze-conflicts.outputs.auto_resolvable }}' === 'true';
            const resolutionSuccess = '${{ steps.auto-resolve.outputs.resolution_success }}' === 'true';
            const resolutionLog = `${{ steps.auto-resolve.outputs.resolution_log }}`;
            const conflictFiles = '${{ steps.analyze-conflicts.outputs.conflict_files }}';
            const strategy = '${{ steps.analyze-conflicts.outputs.resolution_strategy }}';

            let body = '';

            if (!autoResolvable) {
              body = `## 🤖 自動解決分析結果

              このPRのコンフリクトは自動解決に適していません。

              **コンフリクトファイル:**
              \`\`\`
              ${conflictFiles}
              \`\`\`

              **推奨対応:**
              - 手動でコンフリクトを解決してください
              - 複雑なロジック変更や設計変更が含まれている可能性があります

              **手動解決手順:**
              1. \`git checkout ${context.payload.issue.title || 'your-branch'}\`
              2. \`git merge origin/main\` (または適切なベースブランチ)
              3. コンフリクトファイルを手動編集
              4. \`git add .\` && \`git commit\` && \`git push\`
              `;
            } else if (resolutionSuccess) {
              body = `## ✅ 自動コンフリクト解決完了

              コンフリクトの自動解決が成功しました！

              **解決戦略:** ${strategy}
              **解決内容:**
              ${resolutionLog}

              **次のステップ:**
              - 自動解決された内容を確認してください
              - 必要に応じて追加の調整を行ってください
              - CIチェックが通過することを確認してください

              🤖 *自動解決機能により処理されました*
              `;
            } else {
              body = `## ⚠️ 自動解決試行結果

              自動解決を試行しましたが、完全には解決できませんでした。

              **検出された解決戦略:** ${strategy}
              **コンフリクトファイル:** ${conflictFiles}

              **推奨対応:**
              - 一部が自動解決された可能性があります
              - 残りのコンフリクトを手動で解決してください
              - 自動解決された部分の内容も確認してください
              `;
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

      - name: Unauthorized access response
        if: steps.check-permissions.outputs.result != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const body = `## 🔒 権限エラー

            申し訳ございませんが、コンフリクト自動解決機能を使用する権限がありません。

            この機能は以下のユーザーのみ使用できます：
            - リポジトリの管理者 (admin)
            - 書き込み権限を持つコラボレーター (write)

            権限が必要な場合は、リポジトリ管理者にお問い合わせください。
            `;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });