# Issue #800 Phase 3: Day Trade ML System Helm Values
# EnsembleSystem (93%精度) + 完全自動化設定

# グローバル設定
global:
  imageRegistry: "ghcr.io"
  imagePullSecrets:
    - name: "ghcr-secret"
  storageClass: "gp2"

# イメージ設定
image:
  registry: ghcr.io
  repository: your-org/day-trade
  tag: "latest"
  pullPolicy: Always

# 環境設定
environment: production

# ネームスペース設定
namespace:
  create: true
  name: day-trade

# MLサービス設定
mlService:
  enabled: true
  name: ml-service

  image:
    repository: ml-service
    tag: "latest"

  replicaCount: 2

  resources:
    requests:
      memory: "2Gi"
      cpu: "1000m"
    limits:
      memory: "4Gi"
      cpu: "2000m"

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 10
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80

  service:
    type: ClusterIP
    port: 8000

  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
    hosts:
      - host: ml.day-trade.company.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: day-trade-tls
        hosts:
          - ml.day-trade.company.com

  config:
    ensembleConfig:
      useXgboost: true
      useCatboost: true
      useRandomForest: true
      useLstmTransformer: false
      useGradientBoosting: false
      useSvr: false
    maxParallelPredictions: 10
    cacheTtlSeconds: 300
    modelUpdateIntervalHours: 24
    enableMonitoring: true

# データサービス設定
dataService:
  enabled: true
  name: data-service

  image:
    repository: data-service
    tag: "latest"

  replicaCount: 1

  resources:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "2Gi"
      cpu: "1000m"

  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 75
    targetMemoryUtilizationPercentage: 80

  service:
    type: ClusterIP
    port: 8001

  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: data.day-trade.company.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: day-trade-tls
        hosts:
          - data.day-trade.company.com

  config:
    marketHoursTimezone: "Asia/Tokyo"
    tradingHoursStart: "09:00"
    tradingHoursEnd: "15:00"
    dataRefreshIntervalMinutes: 5
    maxSymbolsPerRequest: 50
    enableRealTimeData: true
    enableSmartSymbolSelection: true

# スケジューラサービス設定
schedulerService:
  enabled: true
  name: scheduler-service

  image:
    repository: scheduler-service
    tag: "latest"

  replicaCount: 1

  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"

  service:
    type: ClusterIP
    port: 8002

  ingress:
    enabled: true
    className: "nginx"
    hosts:
      - host: scheduler.day-trade.company.com
        paths:
          - path: /
            pathType: Prefix
    tls:
      - secretName: day-trade-tls
        hosts:
          - scheduler.day-trade.company.com

  config:
    autoTradingEnabled: false
    taskRetryAttempts: 3
    taskRetryDelaySeconds: 30

  schedules:
    marketPrep:
      cron: "0 30 8 * * MON-FRI"
      timezone: "Asia/Tokyo"
    realTimePrediction:
      cron: "0 */15 9-15 * * MON-FRI"
      timezone: "Asia/Tokyo"
    dataRefresh:
      cron: "0 */5 9-15 * * MON-FRI"
      timezone: "Asia/Tokyo"
    dailyReport:
      cron: "0 0 16 * * MON-FRI"
      timezone: "Asia/Tokyo"
    weeklyRetrain:
      cron: "0 0 2 * * SUN"
      timezone: "Asia/Tokyo"

# PostgreSQL設定 (依存関係)
postgresql:
  enabled: true
  auth:
    postgresPassword: "postgres-password"
    username: "day_trade_user"
    password: "day-trade-password"
    database: "day_trade"
  architecture: standalone
  primary:
    persistence:
      enabled: true
      size: 100Gi
      storageClass: "gp2"
    resources:
      requests:
        memory: "1Gi"
        cpu: "500m"
      limits:
        memory: "2Gi"
        cpu: "1000m"

# Redis設定 (依存関係)
redis:
  enabled: true
  auth:
    enabled: true
    password: "redis-password"
  architecture: standalone
  master:
    persistence:
      enabled: true
      size: 10Gi
      storageClass: "gp2"
    resources:
      requests:
        memory: "512Mi"
        cpu: "250m"
      limits:
        memory: "1Gi"
        cpu: "500m"

# ストレージ設定
persistence:
  mlModels:
    enabled: true
    size: 50Gi
    storageClass: "gp2"
    accessMode: ReadWriteOnce

  dataCache:
    enabled: true
    size: 20Gi
    storageClass: "gp2"
    accessMode: ReadWriteOnce

  logs:
    enabled: true
    size: 10Gi
    storageClass: "gp2"
    accessMode: ReadWriteOnce

# 監視設定
monitoring:
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: "30s"
      scrapeTimeout: "10s"

  grafana:
    enabled: true
    adminPassword: "grafana-admin-password"
    dashboards:
      enabled: true

  alerts:
    enabled: true
    slackWebhookUrl: ""
    emailRecipients: []

# セキュリティ設定
security:
  podSecurityPolicy:
    enabled: false
  networkPolicy:
    enabled: true
  serviceAccount:
    create: true
    annotations: {}

# シークレット設定
secrets:
  databaseUrl: "postgresql://day_trade_user:day-trade-password@postgresql:5432/day_trade"
  redisUrl: "redis://:redis-password@redis-master:6379"
  marketDataApiKey: ""
  slackWebhookUrl: ""
  jwtSecretKey: ""
  apiEncryptionKey: ""

# コンフィグマップ設定
configMaps:
  logLevel: "WARNING"
  enableMonitoring: "true"
  pythonUnbuffered: "1"

# ネットワーク設定
networkPolicy:
  enabled: true
  ingress:
    enabled: true
  egress:
    enabled: true

# ロードバランサー設定
loadBalancer:
  enabled: true
  type: "Application"
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"

# バックアップ設定
backup:
  enabled: true
  schedule: "0 2 * * *"
  retention: "7d"

# ログ設定
logging:
  level: "WARNING"
  format: "json"
  enableStructuredLogging: true

# メトリクス設定
metrics:
  enabled: true
  serviceMonitor:
    enabled: true
  prometheusRule:
    enabled: true

# 通知設定
notifications:
  slack:
    enabled: false
    webhookUrl: ""
    channel: "#day-trade-alerts"
  email:
    enabled: false
    smtpServer: "smtp.gmail.com"
    smtpPort: 587
    username: ""
    password: ""

# 開発設定
development:
  debug: false
  enableTestEndpoints: false
  mockDataGeneration: false