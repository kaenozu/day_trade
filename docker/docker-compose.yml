# Issue #800 Phase 1: Docker Compose設定
# 開発・テスト環境用マルチサービス構成

version: '3.8'

services:
  # Redis - キャッシュ・メッセージング
  redis:
    image: redis:7-alpine
    container_name: day-trade-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - day-trade-network

  # PostgreSQL - メインデータベース
  postgres:
    image: postgres:15-alpine
    container_name: day-trade-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: day_trade
      POSTGRES_USER: day_trade_user
      POSTGRES_PASSWORD: day_trade_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U day_trade_user -d day_trade"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - day-trade-network

  # MLサービス - EnsembleSystem (93%精度)
  ml-service:
    build:
      context: .
      dockerfile: docker/ml-service/Dockerfile
    container_name: day-trade-ml-service
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://day_trade_user:day_trade_password@postgres:5432/day_trade
      - REDIS_URL=redis://redis:6379
      - ML_MODEL_PATH=/app/models
      - LOG_LEVEL=INFO
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - day-trade-network

  # データサービス - DataFetcher + SmartSymbolSelector
  data-service:
    build:
      context: .
      dockerfile: docker/data-service/Dockerfile
    container_name: day-trade-data-service
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://day_trade_user:day_trade_password@postgres:5432/day_trade
      - REDIS_URL=redis://redis:6379
      - DATA_CACHE_PATH=/app/data
      - LOG_LEVEL=INFO
      - MARKET_DATA_API_KEY=${MARKET_DATA_API_KEY:-}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - day-trade-network

  # スケジューラサービス - ExecutionScheduler
  scheduler-service:
    build:
      context: .
      dockerfile: docker/scheduler-service/Dockerfile
    container_name: day-trade-scheduler-service
    ports:
      - "8002:8002"
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://day_trade_user:day_trade_password@postgres:5432/day_trade
      - REDIS_URL=redis://redis:6379
      - SCHEDULER_CONFIG_PATH=/app/schedules
      - LOG_LEVEL=INFO
      - MARKET_HOURS_TIMEZONE=Asia/Tokyo
    volumes:
      - ./schedules:/app/schedules
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
      - ml-service
      - data-service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - day-trade-network

  # Prometheus - メトリクス監視
  prometheus:
    image: prom/prometheus:latest
    container_name: day-trade-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - day-trade-network

  # Grafana - 可視化ダッシュボード
  grafana:
    image: grafana/grafana:latest
    container_name: day-trade-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - day-trade-network

# ボリューム定義
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ネットワーク定義
networks:
  day-trade-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16