#!/usr/bin/env python3
"""
Next-Gen AI Trading Engine - Ëá™Âãï„Ç¢„É©„Éº„Éà„Ç∑„Çπ„ÉÜ„É†
„Ç§„É≥„ÉÜ„É™„Ç∏„Çß„É≥„ÉàÈÄöÁü•„Éª„Ç¢„É©„Éº„ÉàÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†

AI‰∫àÊ∏¨„Éª„É™„Çπ„ÇØ„ÉªÂ∏ÇÂ†¥Áï∞Â∏∏„ÅÆÁµ±Âêà„Ç¢„É©„Éº„Éà„Ç∑„Çπ„ÉÜ„É†
"""

import asyncio
import time
import json
import warnings
from dataclasses import dataclass, field
from typing import Dict, List, Tuple, Optional, Any, Callable, Union
from datetime import datetime, timedelta
from enum import Enum
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÂÜÖ„Ç§„É≥„Éù„Éº„Éà
from ..utils.logging_config import get_context_logger
from .live_prediction_engine import LivePrediction
from .websocket_stream import MarketTick

logger = get_context_logger(__name__)
warnings.filterwarnings("ignore", category=FutureWarning)

class AlertLevel(Enum):
    """„Ç¢„É©„Éº„Éà„É¨„Éô„É´"""
    INFO = "info"
    WARNING = "warning"
    CRITICAL = "critical"
    EMERGENCY = "emergency"

class AlertType(Enum):
    """„Ç¢„É©„Éº„Éà„Çø„Ç§„Éó"""
    TRADING_SIGNAL = "trading_signal"
    RISK_ALERT = "risk_alert"
    SYSTEM_ERROR = "system_error"
    MARKET_ANOMALY = "market_anomaly"
    PERFORMANCE_ALERT = "performance_alert"
    DATA_QUALITY = "data_quality"

@dataclass
class AlertConfig:
    """„Ç¢„É©„Éº„ÉàË®≠ÂÆö"""
    # ÈÄöÁü•Ë®≠ÂÆö
    enable_email: bool = True
    enable_console: bool = True
    enable_webhook: bool = False
    enable_sms: bool = False

    # EmailË®≠ÂÆö
    smtp_server: str = "smtp.gmail.com"
    smtp_port: int = 587
    email_username: Optional[str] = None
    email_password: Optional[str] = None
    email_recipients: List[str] = field(default_factory=list)

    # WebhookË®≠ÂÆö
    webhook_url: Optional[str] = None
    webhook_timeout: float = 5.0

    # „Ç¢„É©„Éº„ÉàÊù°‰ª∂
    trading_signal_threshold: float = 0.7  # ÂèñÂºï„Ç∑„Ç∞„Éä„É´‰ø°È†ºÂ∫¶ÈñæÂÄ§
    risk_alert_threshold: float = 0.8  # „É™„Çπ„ÇØ„Ç¢„É©„Éº„ÉàÈñæÂÄ§
    market_anomaly_threshold: float = 2.0  # Â∏ÇÂ†¥Áï∞Â∏∏Ê§úÁü•ÈñæÂÄ§ÔºàÊ®ôÊ∫ñÂÅèÂ∑ÆÔºâ

    # „É¨„Éº„ÉàÂà∂Èôê
    max_alerts_per_hour: int = 100
    duplicate_suppression_minutes: int = 15

    # ÂÑ™ÂÖàÂ∫¶Ë®≠ÂÆö
    critical_symbols: List[str] = field(default_factory=list)
    vip_alert_threshold: float = 0.9

@dataclass
class Alert:
    """„Ç¢„É©„Éº„Éà"""
    id: str
    timestamp: datetime
    level: AlertLevel
    alert_type: AlertType

    # ÂÜÖÂÆπ
    title: str
    message: str
    symbol: Optional[str] = None

    # „É°„Çø„Éá„Éº„Çø
    confidence: float = 1.0
    data: Dict[str, Any] = field(default_factory=dict)

    # Âá¶ÁêÜÁä∂Ê≥Å
    sent: bool = False
    acknowledged: bool = False
    resolved: bool = False

    # ÈÄöÁü•ÂÖà
    channels: List[str] = field(default_factory=lambda: ["console"])

    def to_dict(self) -> Dict:
        """ËæûÊõ∏ÂΩ¢ÂºèÂ§âÊèõ"""
        return {
            'id': self.id,
            'timestamp': self.timestamp.isoformat(),
            'level': self.level.value,
            'type': self.alert_type.value,
            'title': self.title,
            'message': self.message,
            'symbol': self.symbol,
            'confidence': self.confidence,
            'data': self.data,
            'sent': self.sent,
            'acknowledged': self.acknowledged,
            'resolved': self.resolved,
            'channels': self.channels
        }

class EmailNotifier:
    """EmailÈÄöÁü•„Ç∑„Çπ„ÉÜ„É†"""

    def __init__(self, config: AlertConfig):
        self.config = config
        self.enabled = (
            config.enable_email and
            config.email_username and
            config.email_password and
            config.email_recipients
        )

        if not self.enabled:
            logger.warning("Email notifications disabled - missing configuration")

    async def send_alert(self, alert: Alert) -> bool:
        """„Ç¢„É©„Éº„ÉàÈÄÅ‰ø°"""

        if not self.enabled:
            return False

        try:
            # HTML „É°„ÉÉ„Çª„Éº„Ç∏‰ΩúÊàê
            html_message = self._create_html_message(alert)

            # EmailÈÄÅ‰ø°
            success = await self._send_email(
                subject=f"[{alert.level.value.upper()}] {alert.title}",
                html_content=html_message,
                recipients=self.config.email_recipients
            )

            if success:
                logger.info(f"Email alert sent: {alert.id}")
            else:
                logger.error(f"Failed to send email alert: {alert.id}")

            return success

        except Exception as e:
            logger.error(f"Email notification error: {e}")
            return False

    def _create_html_message(self, alert: Alert) -> str:
        """HTML„É°„ÉÉ„Çª„Éº„Ç∏‰ΩúÊàê"""

        # „É¨„Éô„É´Âà•Ëâ≤Ë®≠ÂÆö
        level_colors = {
            AlertLevel.INFO: "#2196F3",
            AlertLevel.WARNING: "#FF9800",
            AlertLevel.CRITICAL: "#F44336",
            AlertLevel.EMERGENCY: "#9C27B0"
        }

        color = level_colors.get(alert.level, "#666666")

        html = f"""
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; }}
                .alert-header {{
                    background-color: {color};
                    color: white;
                    padding: 15px;
                    border-radius: 5px 5px 0 0;
                }}
                .alert-body {{
                    border: 2px solid {color};
                    padding: 15px;
                    border-radius: 0 0 5px 5px;
                }}
                .alert-meta {{
                    background-color: #f5f5f5;
                    padding: 10px;
                    margin-top: 15px;
                    border-radius: 3px;
                }}
                .data-table {{
                    width: 100%;
                    border-collapse: collapse;
                    margin-top: 10px;
                }}
                .data-table th, .data-table td {{
                    border: 1px solid #ddd;
                    padding: 8px;
                    text-align: left;
                }}
                .data-table th {{ background-color: #f2f2f2; }}
            </style>
        </head>
        <body>
            <div class="alert-header">
                <h2>üö® {alert.title}</h2>
                <p><strong>{alert.level.value.upper()}</strong> | {alert.alert_type.value}</p>
            </div>

            <div class="alert-body">
                <p><strong>Message:</strong> {alert.message}</p>

                {f'<p><strong>Symbol:</strong> {alert.symbol}</p>' if alert.symbol else ''}

                <div class="alert-meta">
                    <p><strong>Timestamp:</strong> {alert.timestamp.strftime('%Y-%m-%d %H:%M:%S')}</p>
                    <p><strong>Confidence:</strong> {alert.confidence:.2%}</p>
                    <p><strong>Alert ID:</strong> {alert.id}</p>
                </div>

                {self._create_data_table(alert.data) if alert.data else ''}
            </div>

            <p style="margin-top: 20px; font-size: 12px; color: #666;">
                This alert was generated by Next-Gen AI Trading Engine
            </p>
        </body>
        </html>
        """

        return html

    def _create_data_table(self, data: Dict[str, Any]) -> str:
        """„Éá„Éº„Çø„ÉÜ„Éº„Éñ„É´‰ΩúÊàê"""

        if not data:
            return ""

        rows = ""
        for key, value in data.items():
            # ÂÄ§„ÅÆÂûã„Å´Âøú„Åò„Å¶„Éï„Ç©„Éº„Éû„ÉÉ„Éà
            if isinstance(value, float):
                formatted_value = f"{value:.4f}"
            elif isinstance(value, dict):
                formatted_value = json.dumps(value, indent=2)
            else:
                formatted_value = str(value)

            rows += f"<tr><td><strong>{key}</strong></td><td>{formatted_value}</td></tr>"

        return f"""
        <table class="data-table">
            <thead>
                <tr><th>Field</th><th>Value</th></tr>
            </thead>
            <tbody>
                {rows}
            </tbody>
        </table>
        """

    async def _send_email(self, subject: str, html_content: str, recipients: List[str]) -> bool:
        """EmailÈÄÅ‰ø°ÂÆüË°å"""

        try:
            # MIME„É°„ÉÉ„Çª„Éº„Ç∏‰ΩúÊàê
            msg = MIMEMultipart('alternative')
            msg['Subject'] = subject
            msg['From'] = self.config.email_username
            msg['To'] = ', '.join(recipients)

            # HTMLÈÉ®ÂàÜÊ∑ª‰ªò
            html_part = MIMEText(html_content, 'html')
            msg.attach(html_part)

            # SMTPÈÄÅ‰ø°
            loop = asyncio.get_event_loop()
            success = await loop.run_in_executor(
                None,
                self._smtp_send,
                msg,
                recipients
            )

            return success

        except Exception as e:
            logger.error(f"Email sending error: {e}")
            return False

    def _smtp_send(self, msg: MIMEMultipart, recipients: List[str]) -> bool:
        """SMTPÈÄÅ‰ø°ÔºàÂêåÊúüÔºâ"""

        try:
            with smtplib.SMTP(self.config.smtp_server, self.config.smtp_port) as server:
                server.starttls()
                server.login(self.config.email_username, self.config.email_password)

                text = msg.as_string()
                server.sendmail(self.config.email_username, recipients, text)

            return True

        except Exception as e:
            logger.error(f"SMTP send error: {e}")
            return False

class WebhookNotifier:
    """WebhookÈÄöÁü•„Ç∑„Çπ„ÉÜ„É†"""

    def __init__(self, config: AlertConfig):
        self.config = config
        self.enabled = config.enable_webhook and config.webhook_url

        if not self.enabled:
            logger.info("Webhook notifications disabled")

    async def send_alert(self, alert: Alert) -> bool:
        """Webhook „Ç¢„É©„Éº„ÉàÈÄÅ‰ø°"""

        if not self.enabled:
            return False

        try:
            import aiohttp

            # Webhook „Éö„Ç§„É≠„Éº„Éâ‰ΩúÊàê
            payload = {
                'alert': alert.to_dict(),
                'timestamp': datetime.now().isoformat(),
                'source': 'NextGenAI_TradingEngine'
            }

            # HTTP POSTÈÄÅ‰ø°
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=self.config.webhook_timeout)) as session:
                async with session.post(
                    self.config.webhook_url,
                    json=payload,
                    headers={'Content-Type': 'application/json'}
                ) as response:

                    if response.status == 200:
                        logger.info(f"Webhook alert sent successfully: {alert.id}")
                        return True
                    else:
                        logger.error(f"Webhook failed with status {response.status}: {alert.id}")
                        return False

        except Exception as e:
            logger.error(f"Webhook notification error: {e}")
            return False

class ConsoleNotifier:
    """„Ç≥„É≥„ÇΩ„Éº„É´ÈÄöÁü•„Ç∑„Çπ„ÉÜ„É†"""

    def __init__(self, config: AlertConfig):
        self.config = config
        self.enabled = config.enable_console

    async def send_alert(self, alert: Alert) -> bool:
        """„Ç≥„É≥„ÇΩ„Éº„É´ „Ç¢„É©„Éº„ÉàË°®Á§∫"""

        if not self.enabled:
            return False

        try:
            # „É¨„Éô„É´Âà•„Ç¢„Ç§„Ç≥„É≥
            level_icons = {
                AlertLevel.INFO: "‚ÑπÔ∏è",
                AlertLevel.WARNING: "‚ö†Ô∏è",
                AlertLevel.CRITICAL: "üö®",
                AlertLevel.EMERGENCY: "üî¥"
            }

            icon = level_icons.get(alert.level, "üì¢")

            # „Ç≥„É≥„ÇΩ„Éº„É´Ë°®Á§∫
            print(f"\n{icon} ALERT [{alert.level.value.upper()}] {icon}")
            print(f"Time: {alert.timestamp.strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"Type: {alert.alert_type.value}")
            if alert.symbol:
                print(f"Symbol: {alert.symbol}")
            print(f"Title: {alert.title}")
            print(f"Message: {alert.message}")
            if alert.confidence < 1.0:
                print(f"Confidence: {alert.confidence:.2%}")

            # ËøΩÂä†„Éá„Éº„ÇøË°®Á§∫
            if alert.data:
                print("Data:")
                for key, value in alert.data.items():
                    if isinstance(value, float):
                        print(f"  {key}: {value:.4f}")
                    else:
                        print(f"  {key}: {value}")

            print(f"Alert ID: {alert.id}")
            print("-" * 60)

            return True

        except Exception as e:
            logger.error(f"Console notification error: {e}")
            return False

class AlertManager:
    """„Ç¢„É©„Éº„ÉàÁÆ°ÁêÜ„Ç∑„Çπ„ÉÜ„É†"""

    def __init__(self, config: AlertConfig):
        self.config = config

        # ÈÄöÁü•„Ç∑„Çπ„ÉÜ„É†
        self.email_notifier = EmailNotifier(config)
        self.webhook_notifier = WebhookNotifier(config)
        self.console_notifier = ConsoleNotifier(config)

        # „Ç¢„É©„Éº„ÉàÁÆ°ÁêÜ
        self.active_alerts: Dict[str, Alert] = {}
        self.alert_history: List[Alert] = []

        # „É¨„Éº„ÉàÂà∂Èôê
        self.alert_timestamps: List[datetime] = []
        self.duplicate_cache: Dict[str, datetime] = {}

        # Áµ±Ë®à
        self.stats = {
            'total_alerts': 0,
            'sent_alerts': 0,
            'failed_alerts': 0,
            'suppressed_alerts': 0
        }

        logger.info("Alert Manager initialized")

    async def send_alert(self, alert: Alert) -> bool:
        """„Ç¢„É©„Éº„ÉàÈÄÅ‰ø°"""

        # „É¨„Éº„ÉàÂà∂Èôê„ÉÅ„Çß„ÉÉ„ÇØ
        if not self._check_rate_limit():
            logger.warning(f"Alert rate limit exceeded, skipping: {alert.id}")
            self.stats['suppressed_alerts'] += 1
            return False

        # ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ
        if self._is_duplicate_alert(alert):
            logger.debug(f"Duplicate alert suppressed: {alert.id}")
            self.stats['suppressed_alerts'] += 1
            return False

        try:
            self.stats['total_alerts'] += 1

            # ÈÄöÁü•„ÉÅ„É£„É≥„Éç„É´Ê±∫ÂÆö
            channels = self._determine_channels(alert)
            alert.channels = channels

            # ÂêÑ„ÉÅ„É£„É≥„Éç„É´„Å´ÈÄÅ‰ø°
            success_count = 0
            total_channels = len(channels)

            if "console" in channels:
                if await self.console_notifier.send_alert(alert):
                    success_count += 1

            if "email" in channels:
                if await self.email_notifier.send_alert(alert):
                    success_count += 1
                else:
                    total_channels -= 1  # ÁÑ°Âäπ„Å™„ÉÅ„É£„É≥„Éç„É´„ÅØÈô§Â§ñ

            if "webhook" in channels:
                if await self.webhook_notifier.send_alert(alert):
                    success_count += 1
                else:
                    total_channels -= 1  # ÁÑ°Âäπ„Å™„ÉÅ„É£„É≥„Éç„É´„ÅØÈô§Â§ñ

            # ÊàêÂäüÂà§ÂÆö
            success = success_count > 0 and success_count >= (total_channels * 0.5)

            if success:
                alert.sent = True
                self.stats['sent_alerts'] += 1
                logger.info(f"Alert sent successfully: {alert.id} ({success_count}/{total_channels} channels)")
            else:
                self.stats['failed_alerts'] += 1
                logger.error(f"Alert sending failed: {alert.id}")

            # „Ç¢„É©„Éº„ÉàË®òÈå≤
            self.active_alerts[alert.id] = alert
            self.alert_history.append(alert)

            # Â±•Ê≠¥„Çµ„Ç§„Ç∫Âà∂Èôê
            if len(self.alert_history) > 1000:
                self.alert_history = self.alert_history[-500:]

            return success

        except Exception as e:
            logger.error(f"Alert sending error: {e}")
            self.stats['failed_alerts'] += 1
            return False

    def _check_rate_limit(self) -> bool:
        """„É¨„Éº„ÉàÂà∂Èôê„ÉÅ„Çß„ÉÉ„ÇØ"""

        now = datetime.now()
        cutoff_time = now - timedelta(hours=1)

        # 1ÊôÇÈñì‰ª•ÂÜÖ„ÅÆ„Ç¢„É©„Éº„Éà„Çí„Ç´„Ç¶„É≥„Éà
        self.alert_timestamps = [ts for ts in self.alert_timestamps if ts > cutoff_time]

        if len(self.alert_timestamps) >= self.config.max_alerts_per_hour:
            return False

        self.alert_timestamps.append(now)
        return True

    def _is_duplicate_alert(self, alert: Alert) -> bool:
        """ÈáçË§á„Ç¢„É©„Éº„Éà„ÉÅ„Çß„ÉÉ„ÇØ"""

        # ÈáçË§á„Ç≠„Éº‰ΩúÊàê
        duplicate_key = f"{alert.alert_type.value}_{alert.symbol}_{alert.title}"

        now = datetime.now()
        cutoff_time = now - timedelta(minutes=self.config.duplicate_suppression_minutes)

        # Êó¢Â≠ò„ÅÆÈáçË§áË®òÈå≤„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
        self.duplicate_cache = {
            key: timestamp for key, timestamp in self.duplicate_cache.items()
            if timestamp > cutoff_time
        }

        # ÈáçË§á„ÉÅ„Çß„ÉÉ„ÇØ
        if duplicate_key in self.duplicate_cache:
            return True

        # Êñ∞„Åó„ÅÑ„Ç¢„É©„Éº„Éà„ÇíË®òÈå≤
        self.duplicate_cache[duplicate_key] = now
        return False

    def _determine_channels(self, alert: Alert) -> List[str]:
        """ÈÄöÁü•„ÉÅ„É£„É≥„Éç„É´Ê±∫ÂÆö"""

        channels = ["console"]  # „Éá„Éï„Ç©„É´„Éà„Åß„Ç≥„É≥„ÇΩ„Éº„É´

        # „É¨„Éô„É´„Éª„Çø„Ç§„ÉóÂà•„ÉÅ„É£„É≥„Éç„É´Ê±∫ÂÆö
        if alert.level in [AlertLevel.CRITICAL, AlertLevel.EMERGENCY]:
            # ÈáçË¶Å„Ç¢„É©„Éº„Éà„ÅØÂÖ®„ÉÅ„É£„É≥„Éç„É´
            if self.email_notifier.enabled:
                channels.append("email")
            if self.webhook_notifier.enabled:
                channels.append("webhook")

        elif alert.level == AlertLevel.WARNING:
            # Ë≠¶Âëä„É¨„Éô„É´„ÅØE„É°„Éº„É´
            if self.email_notifier.enabled:
                channels.append("email")

        # VIP„Ç∑„É≥„Éú„É´„ÅØÂÑ™ÂÖàÈÄöÁü•
        if alert.symbol in self.config.critical_symbols:
            if self.email_notifier.enabled and "email" not in channels:
                channels.append("email")

        # È´ò‰ø°È†ºÂ∫¶„Ç¢„É©„Éº„Éà„ÅØÂÑ™ÂÖàÈÄöÁü•
        if alert.confidence >= self.config.vip_alert_threshold:
            if self.webhook_notifier.enabled and "webhook" not in channels:
                channels.append("webhook")

        return channels

    def acknowledge_alert(self, alert_id: str) -> bool:
        """„Ç¢„É©„Éº„ÉàÁ¢∫Ë™ç"""

        if alert_id in self.active_alerts:
            self.active_alerts[alert_id].acknowledged = True
            logger.info(f"Alert acknowledged: {alert_id}")
            return True

        return False

    def resolve_alert(self, alert_id: str) -> bool:
        """„Ç¢„É©„Éº„ÉàËß£Ê±∫"""

        if alert_id in self.active_alerts:
            alert = self.active_alerts[alert_id]
            alert.resolved = True
            alert.acknowledged = True

            # „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„É™„Çπ„Éà„Åã„ÇâÂâäÈô§
            del self.active_alerts[alert_id]

            logger.info(f"Alert resolved: {alert_id}")
            return True

        return False

    def get_active_alerts(self) -> List[Alert]:
        """„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Ç¢„É©„Éº„ÉàÂèñÂæó"""
        return list(self.active_alerts.values())

    def get_alert_history(self, hours: int = 24) -> List[Alert]:
        """„Ç¢„É©„Éº„ÉàÂ±•Ê≠¥ÂèñÂæó"""

        cutoff_time = datetime.now() - timedelta(hours=hours)

        return [
            alert for alert in self.alert_history
            if alert.timestamp > cutoff_time
        ]

    def get_statistics(self) -> Dict:
        """Áµ±Ë®àÊÉÖÂ†±ÂèñÂæó"""

        active_count = len(self.active_alerts)
        unacknowledged_count = len([
            alert for alert in self.active_alerts.values()
            if not alert.acknowledged
        ])

        return {
            **self.stats,
            'active_alerts': active_count,
            'unacknowledged_alerts': unacknowledged_count,
            'alert_history_size': len(self.alert_history)
        }

class TradingAlertGenerator:
    """ÂèñÂºï„Ç¢„É©„Éº„ÉàÁîüÊàêÂô®"""

    def __init__(self, alert_manager: AlertManager, config: AlertConfig):
        self.alert_manager = alert_manager
        self.config = config

    async def generate_trading_signal_alert(self, prediction: LivePrediction) -> Optional[Alert]:
        """ÂèñÂºï„Ç∑„Ç∞„Éä„É´„Ç¢„É©„Éº„ÉàÁîüÊàê"""

        if prediction.action_confidence < self.config.trading_signal_threshold:
            return None

        # „Ç¢„É©„Éº„Éà„É¨„Éô„É´Ê±∫ÂÆö
        if prediction.action_confidence >= 0.9:
            level = AlertLevel.CRITICAL
        elif prediction.action_confidence >= 0.8:
            level = AlertLevel.WARNING
        else:
            level = AlertLevel.INFO

        # „Ç¢„É©„Éº„Éà‰ΩúÊàê
        alert = Alert(
            id=f"trade_{prediction.symbol}_{int(prediction.timestamp.timestamp())}",
            timestamp=prediction.timestamp,
            level=level,
            alert_type=AlertType.TRADING_SIGNAL,
            title=f"Trading Signal: {prediction.final_action} {prediction.symbol}",
            message=f"AI recommends {prediction.final_action} for {prediction.symbol} "
                   f"with {prediction.action_confidence:.1%} confidence. "
                   f"Target: ${prediction.predicted_price:.2f} "
                   f"(Position size: {prediction.position_size_recommendation:.1%})",
            symbol=prediction.symbol,
            confidence=prediction.action_confidence,
            data={
                'action': prediction.final_action,
                'predicted_price': prediction.predicted_price,
                'predicted_return': prediction.predicted_return,
                'position_size': prediction.position_size_recommendation,
                'ml_confidence': prediction.ml_prediction.get('confidence', 0) if prediction.ml_prediction else 0,
                'rl_confidence': prediction.rl_decision.get('confidence', 0) if prediction.rl_decision else 0,
                'sentiment_score': prediction.sentiment_analysis.get('sentiment_score', 0) if prediction.sentiment_analysis else 0
            }
        )

        return alert

    async def generate_risk_alert(self, symbol: str, risk_level: float, risk_type: str, details: Dict) -> Alert:
        """„É™„Çπ„ÇØ„Ç¢„É©„Éº„ÉàÁîüÊàê"""

        # „É™„Çπ„ÇØ„É¨„Éô„É´Âà•„Ç¢„É©„Éº„Éà„É¨„Éô„É´
        if risk_level >= 0.9:
            level = AlertLevel.EMERGENCY
        elif risk_level >= 0.8:
            level = AlertLevel.CRITICAL
        elif risk_level >= 0.6:
            level = AlertLevel.WARNING
        else:
            level = AlertLevel.INFO

        alert = Alert(
            id=f"risk_{symbol}_{risk_type}_{int(time.time())}",
            timestamp=datetime.now(),
            level=level,
            alert_type=AlertType.RISK_ALERT,
            title=f"Risk Alert: {risk_type} - {symbol}",
            message=f"High risk detected for {symbol}: {risk_type} "
                   f"(Risk Level: {risk_level:.1%})",
            symbol=symbol,
            confidence=risk_level,
            data=details
        )

        return alert

    async def generate_market_anomaly_alert(self, symbol: str, anomaly_score: float, details: Dict) -> Alert:
        """Â∏ÇÂ†¥Áï∞Â∏∏„Ç¢„É©„Éº„ÉàÁîüÊàê"""

        level = AlertLevel.WARNING if anomaly_score >= self.config.market_anomaly_threshold else AlertLevel.INFO

        alert = Alert(
            id=f"anomaly_{symbol}_{int(time.time())}",
            timestamp=datetime.now(),
            level=level,
            alert_type=AlertType.MARKET_ANOMALY,
            title=f"Market Anomaly: {symbol}",
            message=f"Unusual market behavior detected for {symbol} "
                   f"(Anomaly Score: {anomaly_score:.2f}œÉ)",
            symbol=symbol,
            confidence=min(anomaly_score / 3.0, 1.0),  # 3œÉ„ÇíÊúÄÂ§ß„Å®„Åó„Å¶Ê≠£Ë¶èÂåñ
            data=details
        )

        return alert

    async def generate_system_alert(self, component: str, error_message: str, severity: str = "warning") -> Alert:
        """„Ç∑„Çπ„ÉÜ„É†„Ç¢„É©„Éº„ÉàÁîüÊàê"""

        level_map = {
            "info": AlertLevel.INFO,
            "warning": AlertLevel.WARNING,
            "critical": AlertLevel.CRITICAL,
            "emergency": AlertLevel.EMERGENCY
        }

        level = level_map.get(severity.lower(), AlertLevel.WARNING)

        alert = Alert(
            id=f"system_{component}_{int(time.time())}",
            timestamp=datetime.now(),
            level=level,
            alert_type=AlertType.SYSTEM_ERROR,
            title=f"System Alert: {component}",
            message=f"System issue detected in {component}: {error_message}",
            confidence=1.0,
            data={
                'component': component,
                'error_message': error_message,
                'severity': severity
            }
        )

        return alert

# ‰æøÂà©Èñ¢Êï∞
def create_alert_system(email_config: Optional[Dict] = None) -> Tuple[AlertManager, TradingAlertGenerator]:
    """„Ç¢„É©„Éº„Éà„Ç∑„Çπ„ÉÜ„É†‰ΩúÊàê"""

    # Ë®≠ÂÆö‰ΩúÊàê
    config = AlertConfig()

    if email_config:
        config.email_username = email_config.get('username')
        config.email_password = email_config.get('password')
        config.email_recipients = email_config.get('recipients', [])
        config.enable_email = bool(config.email_username and config.email_password)

    # „Ç¢„É©„Éº„Éà„Éû„Éç„Éº„Ç∏„É£„Éº‰ΩúÊàê
    alert_manager = AlertManager(config)

    # ÂèñÂºï„Ç¢„É©„Éº„ÉàÁîüÊàêÂô®‰ΩúÊàê
    trading_alert_generator = TradingAlertGenerator(alert_manager, config)

    return alert_manager, trading_alert_generator

if __name__ == "__main__":
    # „Ç¢„É©„Éº„Éà„Ç∑„Çπ„ÉÜ„É†„ÉÜ„Çπ„Éà
    async def test_alert_system():
        print("=== Alert System Test ===")

        try:
            # „Ç¢„É©„Éº„Éà„Ç∑„Çπ„ÉÜ„É†‰ΩúÊàê
            alert_manager, trading_alert_generator = create_alert_system()

            # „ÉÜ„Çπ„Éà„Ç¢„É©„Éº„Éà‰ΩúÊàê
            test_alert = Alert(
                id="test_001",
                timestamp=datetime.now(),
                level=AlertLevel.WARNING,
                alert_type=AlertType.TRADING_SIGNAL,
                title="Test Alert",
                message="This is a test alert for the Next-Gen AI Trading Engine",
                symbol="AAPL",
                confidence=0.85,
                data={
                    'test_value': 123.45,
                    'test_string': "Hello World",
                    'test_dict': {'nested': 'value'}
                }
            )

            # „Ç¢„É©„Éº„ÉàÈÄÅ‰ø°
            success = await alert_manager.send_alert(test_alert)
            print(f"Alert sent: {success}")

            # Áµ±Ë®àÂèñÂæó
            stats = alert_manager.get_statistics()
            print(f"Alert statistics: {stats}")

            # „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Ç¢„É©„Éº„ÉàÁ¢∫Ë™ç
            active_alerts = alert_manager.get_active_alerts()
            print(f"Active alerts: {len(active_alerts)}")

            # „Ç¢„É©„Éº„ÉàÁ¢∫Ë™ç„ÉªËß£Ê±∫„ÉÜ„Çπ„Éà
            if active_alerts:
                alert_id = active_alerts[0].id
                alert_manager.acknowledge_alert(alert_id)
                alert_manager.resolve_alert(alert_id)
                print(f"Alert {alert_id} acknowledged and resolved")

            print("Alert system test completed successfully")

        except Exception as e:
            print(f"Test error: {e}")
            import traceback
            traceback.print_exc()

    # „ÉÜ„Çπ„ÉàÂÆüË°å
    asyncio.run(test_alert_system())
