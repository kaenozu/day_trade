#!/usr/bin/env python3
"""
包括的脆弱性スキャナー
Issue #419対応 - 脆弱性管理プロセス強化
"""

import asyncio
import json
import logging
import subprocess
from dataclasses import asdict, dataclass
from datetime import datetime, timezone
from enum import Enum
from pathlib import Path
from typing import Dict, List, Optional

logger = logging.getLogger(__name__)


class SeverityLevel(Enum):
    """脆弱性重要度レベル"""

    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    UNKNOWN = "unknown"


@dataclass
class Vulnerability:
    """脆弱性情報"""

    id: str
    package: str
    version: str
    severity: SeverityLevel
    description: str
    cve_id: Optional[str] = None
    fixed_version: Optional[str] = None
    source: str = "unknown"
    detection_time: datetime = None

    def __post_init__(self):
        if self.detection_time is None:
            self.detection_time = datetime.now(timezone.utc)


@dataclass
class SecurityScanResult:
    """セキュリティスキャン結果"""

    scan_time: datetime
    scan_type: str
    vulnerabilities: List[Vulnerability]
    total_issues: int
    critical_count: int
    high_count: int
    medium_count: int
    low_count: int
    scan_duration: float
    status: str


class VulnerabilityScanner:
    """包括的脆弱性スキャナー"""

    def __init__(
        self,
        project_root: Path = Path("."),
        output_dir: Path = Path("security_reports"),
    ):
        self.project_root = project_root
        self.output_dir = output_dir
        self.output_dir.mkdir(exist_ok=True)

        # ログ設定
        self._setup_logging()

    def _setup_logging(self) -> None:
        """ログ設定"""
        log_file = self.output_dir / "vulnerability_scan.log"
        logging.basicConfig(
            level=logging.INFO,
            format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            handlers=[
                logging.FileHandler(log_file, encoding="utf-8"),
                logging.StreamHandler(),
            ],
        )

    async def run_pip_audit_scan(self) -> SecurityScanResult:
        """pip-auditによる依存関係脆弱性スキャン"""
        logger.info("pip-audit脆弱性スキャン開始")
        start_time = datetime.now(timezone.utc)

        try:
            # pip-audit実行
            result = subprocess.run(
                ["pip-audit", "--format=json", "--desc"],
                capture_output=True,
                text=True,
                timeout=300,  # 5分タイムアウト
                cwd=self.project_root,
            )

            vulnerabilities = []
            if result.returncode != 0 and result.stdout:
                # JSON出力を解析
                try:
                    audit_data = json.loads(result.stdout)
                    for vuln_data in audit_data.get("vulnerabilities", []):
                        vulnerability = Vulnerability(
                            id=vuln_data.get("id", "unknown"),
                            package=vuln_data.get("package", "unknown"),
                            version=vuln_data.get("installed_version", "unknown"),
                            severity=SeverityLevel(
                                vuln_data.get("severity", "unknown").lower()
                            ),
                            description=vuln_data.get("description", "No description"),
                            cve_id=vuln_data.get("cve_id"),
                            fixed_version=vuln_data.get("fixed_version"),
                            source="pip-audit",
                        )
                        vulnerabilities.append(vulnerability)
                except json.JSONDecodeError as e:
                    logger.error(f"pip-audit結果解析エラー: {e}")

            end_time = datetime.now(timezone.utc)
            duration = (end_time - start_time).total_seconds()

            # 統計計算
            severity_counts = {level: 0 for level in SeverityLevel}
            for vuln in vulnerabilities:
                severity_counts[vuln.severity] += 1

            scan_result = SecurityScanResult(
                scan_time=start_time,
                scan_type="pip-audit",
                vulnerabilities=vulnerabilities,
                total_issues=len(vulnerabilities),
                critical_count=severity_counts[SeverityLevel.CRITICAL],
                high_count=severity_counts[SeverityLevel.HIGH],
                medium_count=severity_counts[SeverityLevel.MEDIUM],
                low_count=severity_counts[SeverityLevel.LOW],
                scan_duration=duration,
                status=(
                    "completed" if result.returncode == 0 else "found_vulnerabilities"
                ),
            )

            logger.info(f"pip-audit完了: {len(vulnerabilities)}件の脆弱性検出")
            return scan_result

        except subprocess.TimeoutExpired:
            logger.error("pip-auditタイムアウト")
            return self._create_error_result(start_time, "pip-audit", "timeout")
        except Exception as e:
            logger.error(f"pip-audit実行エラー: {e}")
            return self._create_error_result(start_time, "pip-audit", f"error: {e}")

    async def run_bandit_scan(self) -> SecurityScanResult:
        """Banditによるコードセキュリティスキャン"""
        logger.info("Banditコードセキュリティスキャン開始")
        start_time = datetime.now(timezone.utc)

        try:
            # Bandit実行
            result = subprocess.run(
                ["bandit", "-r", "src/", "-f", "json", "--severity-level", "medium"],
                capture_output=True,
                text=True,
                timeout=600,  # 10分タイムアウト
                cwd=self.project_root,
            )

            vulnerabilities = []
            if result.stdout:
                try:
                    bandit_data = json.loads(result.stdout)
                    for issue in bandit_data.get("results", []):
                        severity_map = {
                            "HIGH": SeverityLevel.HIGH,
                            "MEDIUM": SeverityLevel.MEDIUM,
                            "LOW": SeverityLevel.LOW,
                        }

                        vulnerability = Vulnerability(
                            id=issue.get("test_id", "unknown"),
                            package=issue.get("filename", "unknown"),
                            version="N/A",
                            severity=severity_map.get(
                                issue.get("issue_severity"), SeverityLevel.UNKNOWN
                            ),
                            description=f"{issue.get('test_name', 'Unknown')}: {issue.get('issue_text', 'No description')}",
                            source="bandit",
                        )
                        vulnerabilities.append(vulnerability)

                except json.JSONDecodeError as e:
                    logger.error(f"Bandit結果解析エラー: {e}")

            end_time = datetime.now(timezone.utc)
            duration = (end_time - start_time).total_seconds()

            # 統計計算
            severity_counts = {level: 0 for level in SeverityLevel}
            for vuln in vulnerabilities:
                severity_counts[vuln.severity] += 1

            scan_result = SecurityScanResult(
                scan_time=start_time,
                scan_type="bandit",
                vulnerabilities=vulnerabilities,
                total_issues=len(vulnerabilities),
                critical_count=severity_counts[SeverityLevel.CRITICAL],
                high_count=severity_counts[SeverityLevel.HIGH],
                medium_count=severity_counts[SeverityLevel.MEDIUM],
                low_count=severity_counts[SeverityLevel.LOW],
                scan_duration=duration,
                status="completed",
            )

            logger.info(f"Banditスキャン完了: {len(vulnerabilities)}件の問題検出")
            return scan_result

        except subprocess.TimeoutExpired:
            logger.error("Banditタイムアウト")
            return self._create_error_result(start_time, "bandit", "timeout")
        except Exception as e:
            logger.error(f"Bandit実行エラー: {e}")
            return self._create_error_result(start_time, "bandit", f"error: {e}")

    async def run_comprehensive_scan(self) -> Dict[str, SecurityScanResult]:
        """包括的セキュリティスキャン実行"""
        logger.info("包括的セキュリティスキャン開始")

        # 並列でスキャン実行
        tasks = [self.run_pip_audit_scan(), self.run_bandit_scan()]

        results = await asyncio.gather(*tasks, return_exceptions=True)

        scan_results = {}
        for i, result in enumerate(results):
            scan_type = ["pip-audit", "bandit"][i]
            if isinstance(result, Exception):
                logger.error(f"{scan_type}スキャンエラー: {result}")
                scan_results[scan_type] = self._create_error_result(
                    datetime.now(timezone.utc), scan_type, str(result)
                )
            else:
                scan_results[scan_type] = result

        # 結果をファイルに保存
        await self.save_scan_results(scan_results)

        logger.info("包括的セキュリティスキャン完了")
        return scan_results

    async def save_scan_results(self, results: Dict[str, SecurityScanResult]) -> None:
        """スキャン結果保存"""
        timestamp = datetime.now(timezone.utc).strftime("%Y%m%d_%H%M%S")

        for scan_type, result in results.items():
            # JSON形式で保存
            output_file = self.output_dir / f"{scan_type}_scan_{timestamp}.json"

            # DataClassをJSON可能な形式に変換
            result_dict = asdict(result)
            result_dict["scan_time"] = result.scan_time.isoformat()

            # 脆弱性リストも変換
            result_dict["vulnerabilities"] = [
                {
                    **asdict(vuln),
                    "severity": vuln.severity.value,
                    "detection_time": vuln.detection_time.isoformat(),
                }
                for vuln in result.vulnerabilities
            ]

            with open(output_file, "w", encoding="utf-8") as f:
                json.dump(result_dict, f, indent=2, ensure_ascii=False)

            logger.info(f"スキャン結果保存: {output_file}")

    def _create_error_result(
        self, start_time: datetime, scan_type: str, error_msg: str
    ) -> SecurityScanResult:
        """エラー結果作成"""
        return SecurityScanResult(
            scan_time=start_time,
            scan_type=scan_type,
            vulnerabilities=[],
            total_issues=0,
            critical_count=0,
            high_count=0,
            medium_count=0,
            low_count=0,
            scan_duration=0.0,
            status=f"error: {error_msg}",
        )

    def generate_summary_report(self, results: Dict[str, SecurityScanResult]) -> str:
        """サマリーレポート生成"""
        report = ["=" * 60]
        report.append("セキュリティスキャンサマリーレポート")
        report.append("=" * 60)
        report.append(
            f"スキャン実行時刻: {datetime.now(timezone.utc).strftime('%Y-%m-%d %H:%M:%S UTC')}"
        )
        report.append("")

        total_vulnerabilities = 0
        total_critical = 0
        total_high = 0
        total_medium = 0
        total_low = 0

        for scan_type, result in results.items():
            report.append(f"【{scan_type.upper()}スキャン結果】")
            report.append(f"  ステータス: {result.status}")
            report.append(f"  実行時間: {result.scan_duration:.2f}秒")
            report.append(f"  総検出数: {result.total_issues}件")

            if result.total_issues > 0:
                report.append(f"    - 致命的: {result.critical_count}件")
                report.append(f"    - 高: {result.high_count}件")
                report.append(f"    - 中: {result.medium_count}件")
                report.append(f"    - 低: {result.low_count}件")

                # 上位脆弱性表示
                high_priority = [
                    v
                    for v in result.vulnerabilities
                    if v.severity in [SeverityLevel.CRITICAL, SeverityLevel.HIGH]
                ]
                if high_priority:
                    report.append("  高優先度脆弱性:")
                    for vuln in high_priority[:5]:  # 上位5件
                        report.append(
                            f"    - {vuln.package}: {vuln.description[:80]}..."
                        )

            report.append("")

            total_vulnerabilities += result.total_issues
            total_critical += result.critical_count
            total_high += result.high_count
            total_medium += result.medium_count
            total_low += result.low_count

        # 総合評価
        report.append("【総合評価】")
        report.append(f"総脆弱性数: {total_vulnerabilities}件")
        report.append(f"  - 致命的: {total_critical}件")
        report.append(f"  - 高: {total_high}件")
        report.append(f"  - 中: {total_medium}件")
        report.append(f"  - 低: {total_low}件")

        # リスク評価
        if total_critical > 0:
            risk_level = "致命的"
        elif total_high > 5:
            risk_level = "高"
        elif total_high > 0 or total_medium > 10:
            risk_level = "中"
        else:
            risk_level = "低"

        report.append(f"リスクレベル: {risk_level}")
        report.append("")

        # 推奨アクション
        report.append("【推奨アクション】")
        if total_critical > 0:
            report.append("- 致命的脆弱性の即座の修正が必要")
        if total_high > 0:
            report.append("- 高重要度脆弱性の優先的修正")
        if total_medium > 0:
            report.append("- 中重要度脆弱性の計画的修正")
        if total_vulnerabilities == 0:
            report.append("- 現時点で重大な脆弱性は検出されていません")

        report.append("=" * 60)

        return "\n".join(report)


async def main():
    """メイン実行関数"""
    scanner = VulnerabilityScanner()

    # 包括的スキャン実行
    results = await scanner.run_comprehensive_scan()

    # サマリーレポート生成・表示
    summary = scanner.generate_summary_report(results)
    print(summary)

    # レポートファイル保存
    timestamp = datetime.now(timezone.utc).strftime("%Y%m%d_%H%M%S")
    report_file = scanner.output_dir / f"security_summary_{timestamp}.txt"
    with open(report_file, "w", encoding="utf-8") as f:
        f.write(summary)

    print(f"\n詳細レポート: {report_file}")


if __name__ == "__main__":
    asyncio.run(main())
