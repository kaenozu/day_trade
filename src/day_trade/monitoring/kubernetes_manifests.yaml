# Kubernetes Manifests for Production Monitoring System
# Issue #436: 本番運用監視システム完成

---
apiVersion: v1
kind: Namespace
metadata:
  name: day-trade-monitoring
  labels:
    name: day-trade-monitoring
    purpose: production-monitoring

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: monitoring-config
  namespace: day-trade-monitoring
data:
  monitoring_production.json: |
    {
      "environment": "production",
      "debug": false,
      "database": {
        "host": "postgres-service",
        "port": 5432,
        "database": "day_trade_monitoring",
        "username": "monitoring_user",
        "pool_size": 10
      },
      "redis": {
        "host": "redis-service",
        "port": 6379,
        "database": 0
      },
      "metrics": {
        "collection_interval_seconds": 30,
        "retention_days": 90,
        "prometheus_enabled": true,
        "prometheus_port": 9090
      },
      "tracing": {
        "enabled": true,
        "sample_rate": 1.0,
        "jaeger_enabled": true,
        "jaeger_agent_host": "jaeger-agent",
        "jaeger_agent_port": 6831
      },
      "logging": {
        "level": "WARNING",
        "structured_logging_enabled": true,
        "elasticsearch_enabled": true,
        "elasticsearch_host": "elasticsearch-service",
        "elasticsearch_port": 9200
      },
      "alerts": {
        "enabled": true,
        "email_enabled": true,
        "slack_enabled": true,
        "max_alerts_per_hour": 50
      },
      "slo": {
        "enabled": true,
        "check_interval_minutes": 5
      },
      "security": {
        "enable_authentication": true,
        "api_key_required": true,
        "tls_enabled": true,
        "rate_limit_enabled": true
      },
      "performance": {
        "monitoring_threads": 4,
        "max_memory_usage_mb": 4096,
        "anomaly_detection_enabled": true
      }
    }

---
apiVersion: v1
kind: Secret
metadata:
  name: monitoring-secrets
  namespace: day-trade-monitoring
type: Opaque
data:
  # Base64 encoded secrets (replace with actual values)
  db-password: bW9uaXRvcmluZ19wYXNzd29yZA==  # monitoring_password
  jwt-secret: eW91ci1qd3Qtc2VjcmV0LWtleQ==     # your-jwt-secret-key
  email-password: ZW1haWwtcGFzc3dvcmQ=          # email-password
  slack-webhook-url: aHR0cHM6Ly9ob29rcy5zbGFjay5jb20v # https://hooks.slack.com/...

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: production-monitoring-system
  namespace: day-trade-monitoring
  labels:
    app: production-monitoring
    component: monitoring-system
spec:
  replicas: 2
  selector:
    matchLabels:
      app: production-monitoring
  template:
    metadata:
      labels:
        app: production-monitoring
        component: monitoring-system
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: monitoring-system
        image: day-trade/production-monitoring:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: DB_HOST
          value: "postgres-service"
        - name: DB_USER
          value: "monitoring_user"
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: monitoring-secrets
              key: db-password
        - name: REDIS_HOST
          value: "redis-service"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: monitoring-secrets
              key: jwt-secret
        - name: ALERT_EMAIL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: monitoring-secrets
              key: email-password
        - name: SLACK_WEBHOOK_URL
          valueFrom:
            secretKeyRef:
              name: monitoring-secrets
              key: slack-webhook-url
        - name: PROMETHEUS_PORT
          value: "9090"
        - name: MONITORING_THREADS
          value: "4"
        - name: MAX_MEMORY_USAGE_MB
          value: "4096"
        volumeMounts:
        - name: config-volume
          mountPath: /app/config
          readOnly: true
        - name: logs-volume
          mountPath: /app/logs
        resources:
          requests:
            memory: "2Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
      volumes:
      - name: config-volume
        configMap:
          name: monitoring-config
      - name: logs-volume
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: production-monitoring-service
  namespace: day-trade-monitoring
  labels:
    app: production-monitoring
    component: monitoring-system
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
    prometheus.io/path: "/metrics"
spec:
  selector:
    app: production-monitoring
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  type: ClusterIP

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: monitoring-ingress
  namespace: day-trade-monitoring
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - monitoring.daytrade.local
    secretName: monitoring-tls
  rules:
  - host: monitoring.daytrade.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: production-monitoring-service
            port:
              number: 80

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: monitoring-service-account
  namespace: day-trade-monitoring

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: monitoring-cluster-role
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/metrics", "services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: monitoring-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: monitoring-cluster-role
subjects:
- kind: ServiceAccount
  name: monitoring-service-account
  namespace: day-trade-monitoring

---
# HorizontalPodAutoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: production-monitoring-hpa
  namespace: day-trade-monitoring
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: production-monitoring-system
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: monitoring-network-policy
  namespace: day-trade-monitoring
spec:
  podSelector:
    matchLabels:
      app: production-monitoring
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: prometheus-system
    - namespaceSelector:
        matchLabels:
          name: grafana-system
    - namespaceSelector:
        matchLabels:
          name: day-trade-app
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: postgres-system
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - namespaceSelector:
        matchLabels:
          name: redis-system
    ports:
    - protocol: TCP
      port: 6379
  - to:
    - namespaceSelector:
        matchLabels:
          name: elasticsearch-system
    ports:
    - protocol: TCP
      port: 9200
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS outbound (for Slack webhooks, etc.)
    - protocol: TCP
      port: 80   # HTTP outbound

---
# PodDisruptionBudget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: monitoring-pdb
  namespace: day-trade-monitoring
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: production-monitoring