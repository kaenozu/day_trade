# Issue #800 Phase 4: Logstash設定
# Day Trade ML System ログ処理パイプライン

input {
  # Filebeat からのログ受信
  beats {
    port => 5044
    type => "log"
  }

  # Docker ログドライバー
  gelf {
    port => 12201
    type => "docker"
  }

  # Syslog
  syslog {
    port => 5140
    type => "syslog"
  }

  # HTTP API経由
  http {
    port => 8080
    type => "api"
  }
}

filter {
  # 共通フィールド追加
  mutate {
    add_field => {
      "project" => "day-trade"
      "environment" => "${ENVIRONMENT:production}"
    }
  }

  # MLサービスログ処理
  if [service] == "ml-service" {
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{DATA:logger} - %{GREEDYDATA:log_message}"
      }
    }

    # 93%精度関連ログ
    if "accuracy" in [log_message] {
      grok {
        match => {
          "log_message" => "accuracy: %{NUMBER:accuracy_value:float}"
        }
      }
      mutate {
        add_tag => [ "accuracy-monitoring" ]
        add_field => { "metric_type" => "accuracy" }
      }
    }

    # 予測実行ログ
    if "prediction" in [log_message] {
      grok {
        match => {
          "log_message" => "prediction_time: %{NUMBER:prediction_time:float}"
        }
      }
      mutate {
        add_tag => [ "prediction-performance" ]
        add_field => { "metric_type" => "prediction_time" }
      }
    }

    # エラーログ
    if [log_level] == "ERROR" {
      mutate {
        add_tag => [ "error", "alert-required" ]
        add_field => { "alert_severity" => "high" }
      }
    }
  }

  # データサービスログ処理
  if [service] == "data-service" {
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{DATA:logger} - %{GREEDYDATA:log_message}"
      }
    }

    # データ取得ログ
    if "data_fetch" in [log_message] {
      grok {
        match => {
          "log_message" => "symbols: %{NUMBER:symbols_count:int}, fetch_time: %{NUMBER:fetch_time:float}"
        }
      }
      mutate {
        add_tag => [ "data-fetching" ]
        add_field => { "metric_type" => "data_fetch" }
      }
    }

    # SmartSymbolSelector ログ
    if "symbol_selection" in [log_message] {
      grok {
        match => {
          "log_message" => "selected_symbols: %{NUMBER:selected_symbols:int}, criteria_score: %{NUMBER:criteria_score:float}"
        }
      }
      mutate {
        add_tag => [ "symbol-selection" ]
        add_field => { "metric_type" => "symbol_selection" }
      }
    }

    # 市場データ品質
    if "data_quality" in [log_message] {
      grok {
        match => {
          "log_message" => "quality_score: %{NUMBER:quality_score:float}"
        }
      }
      mutate {
        add_tag => [ "data-quality" ]
        add_field => { "metric_type" => "data_quality" }
      }
    }
  }

  # スケジューラサービスログ処理
  if [service] == "scheduler-service" {
    grok {
      match => {
        "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} %{DATA:logger} - %{GREEDYDATA:log_message}"
      }
    }

    # タスク実行ログ
    if "task_execution" in [log_message] {
      grok {
        match => {
          "log_message" => "task: %{DATA:task_name}, status: %{WORD:task_status}, duration: %{NUMBER:task_duration:float}"
        }
      }
      mutate {
        add_tag => [ "task-execution" ]
        add_field => { "metric_type" => "task_execution" }
      }
    }

    # ワークフロー状態
    if "workflow" in [log_message] {
      grok {
        match => {
          "log_message" => "workflow: %{DATA:workflow_name}, active_count: %{NUMBER:active_workflows:int}"
        }
      }
      mutate {
        add_tag => [ "workflow-monitoring" ]
        add_field => { "metric_type" => "workflow_status" }
      }
    }

    # スケジュール失敗
    if "schedule_failure" in [log_message] {
      mutate {
        add_tag => [ "schedule-failure", "alert-required" ]
        add_field => { "alert_severity" => "medium" }
      }
    }
  }

  # Kubernetesログ処理
  if [kubernetes] {
    # Pod情報抽出
    mutate {
      add_field => {
        "k8s_namespace" => "%{[kubernetes][namespace]}"
        "k8s_pod" => "%{[kubernetes][pod]}"
        "k8s_container" => "%{[kubernetes][container]}"
      }
    }

    # ラベル抽出
    if [kubernetes][labels] {
      ruby {
        code => "
          labels = event.get('[kubernetes][labels]')
          if labels
            labels.each do |key, value|
              event.set(\"k8s_label_#{key}\", value)
            end
          end
        "
      }
    }
  }

  # Docker ログ処理
  if [docker] {
    mutate {
      add_field => {
        "container_id" => "%{[docker][container_id]}"
        "container_name" => "%{[docker][container_name]}"
        "image_name" => "%{[docker][image_name]}"
      }
    }
  }

  # 日時パース
  date {
    match => [ "timestamp", "ISO8601" ]
    timezone => "Asia/Tokyo"
  }

  # 不要フィールド削除
  mutate {
    remove_field => [ "beat", "offset", "prospector", "input", "source" ]
  }

  # メトリクス抽出用タグ付け
  if [metric_type] {
    mutate {
      add_tag => [ "metrics-extraction" ]
    }
  }

  # セキュリティ関連ログ
  if "authentication" in [log_message] or "authorization" in [log_message] or "security" in [log_message] {
    mutate {
      add_tag => [ "security", "audit" ]
      add_field => { "log_category" => "security" }
    }
  }

  # パフォーマンス関連ログ
  if "performance" in [log_message] or "latency" in [log_message] or "response_time" in [log_message] {
    mutate {
      add_tag => [ "performance" ]
      add_field => { "log_category" => "performance" }
    }
  }
}

output {
  # Elasticsearch - メインストレージ
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "day-trade-logs-%{[service]}-%{+YYYY.MM.dd}"
    template => "/usr/share/logstash/templates/day-trade-template.json"
    template_name => "day-trade"
    template_overwrite => true
    manage_template => true
  }

  # 93%精度監視専用インデックス
  if "accuracy-monitoring" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "day-trade-accuracy-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }

  # アラート必要ログ
  if "alert-required" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "day-trade-alerts-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }

    # Webhook通知
    http {
      url => "${ALERT_WEBHOOK_URL}"
      http_method => "post"
      format => "json"
      content_type => "application/json"
      mapping => {
        "service" => "%{service}"
        "level" => "%{log_level}"
        "message" => "%{log_message}"
        "timestamp" => "%{@timestamp}"
        "severity" => "%{alert_severity}"
      }
    }
  }

  # セキュリティログ専用出力
  if "security" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "day-trade-security-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }

  # パフォーマンスメトリクス抽出
  if "metrics-extraction" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "day-trade-metrics-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }

  # デバッグ用標準出力（開発環境のみ）
  if "${ENVIRONMENT}" == "development" {
    stdout {
      codec => rubydebug
    }
  }
}