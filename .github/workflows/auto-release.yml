name: Automated Release Management

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, minor, major)'
        required: false
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.changes.outputs.should-release }}
      release-type: ${{ steps.changes.outputs.release-type }}
      changelog: ${{ steps.changes.outputs.changelog }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze commit messages for release type
        id: changes
        run: |
          # ÊúÄÊñ∞„ÅÆ„É™„É™„Éº„Çπ„Çø„Ç∞„ÇíÂèñÂæó
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            echo "No previous tags found, creating initial release"
            COMMITS="$(git log --pretty=format:'%s' --reverse)"
          else
            echo "Last tag: $LAST_TAG"
            COMMITS="$(git log ${LAST_TAG}..HEAD --pretty=format:'%s')"
          fi

          echo "Commits since last release:"
          echo "$COMMITS"

          # „Ç≥„Éü„ÉÉ„Éà„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂàÜÊûê„Åó„Å¶„É™„É™„Éº„Çπ„Çø„Ç§„Éó„ÇíÊ±∫ÂÆö
          MAJOR_CHANGES=0
          MINOR_CHANGES=0
          PATCH_CHANGES=0

          while IFS= read -r commit; do
            if [[ -z "$commit" ]]; then
              continue
            fi

            echo "Analyzing: $commit"

            # Major changes (BREAKING CHANGE)
            if echo "$commit" | grep -iE "(BREAKING CHANGE|breaking:|major:)" >/dev/null; then
              MAJOR_CHANGES=1
              echo "  -> MAJOR change detected"
            # Minor changes (features)
            elif echo "$commit" | grep -iE "(feat:|feature:|minor:|add:|implement:)" >/dev/null; then
              MINOR_CHANGES=1
              echo "  -> MINOR change detected"
            # Patch changes (fixes, improvements)
            elif echo "$commit" | grep -iE "(fix:|patch:|hotfix:|bug:|improve:|refactor:|perf:|security:)" >/dev/null; then
              PATCH_CHANGES=1
              echo "  -> PATCH change detected"
            fi
          done <<< "$COMMITS"

          # ÊâãÂãïÊåáÂÆö„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØ„Åù„Çå„ÇíÂÑ™ÂÖà
          if [ "${{ github.event.inputs.release_type }}" != "" ]; then
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
            SHOULD_RELEASE="true"
          # Â§âÊõ¥„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØËá™ÂãïÂà§ÂÆö
          elif [ "$MAJOR_CHANGES" = "1" ]; then
            RELEASE_TYPE="major"
            SHOULD_RELEASE="true"
          elif [ "$MINOR_CHANGES" = "1" ]; then
            RELEASE_TYPE="minor"
            SHOULD_RELEASE="true"
          elif [ "$PATCH_CHANGES" = "1" ]; then
            RELEASE_TYPE="patch"
            SHOULD_RELEASE="true"
          else
            RELEASE_TYPE="none"
            SHOULD_RELEASE="false"
          fi

          echo "Release decision: $SHOULD_RELEASE ($RELEASE_TYPE)"
          echo "should-release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "release-type=$RELEASE_TYPE" >> $GITHUB_OUTPUT

          # „ÉÅ„Çß„É≥„Ç∏„É≠„Ç∞ÁîüÊàê
          CHANGELOG=""
          if [ "$SHOULD_RELEASE" = "true" ]; then
            echo "## üìã Â§âÊõ¥Â±•Ê≠¥" > changelog.md
            echo "" >> changelog.md

            # „Ç´„ÉÜ„Ç¥„É™Âà•„Å´Êï¥ÁêÜ
            echo "### üöÄ Êñ∞Ê©üËÉΩ" >> changelog.md
            echo "$COMMITS" | grep -iE "(feat:|feature:|add:|implement:)" | sed 's/^/- /' >> changelog.md || echo "- „Å™„Åó" >> changelog.md
            echo "" >> changelog.md

            echo "### üêõ „Éê„Ç∞‰øÆÊ≠£" >> changelog.md
            echo "$COMMITS" | grep -iE "(fix:|hotfix:|bug:)" | sed 's/^/- /' >> changelog.md || echo "- „Å™„Åó" >> changelog.md
            echo "" >> changelog.md

            echo "### ‚ö° „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊîπÂñÑ" >> changelog.md
            echo "$COMMITS" | grep -iE "(perf:|performance:|optimize:|speed:)" | sed 's/^/- /' >> changelog.md || echo "- „Å™„Åó" >> changelog.md
            echo "" >> changelog.md

            echo "### üîê „Çª„Ç≠„É•„É™„ÉÜ„Ç£" >> changelog.md
            echo "$COMMITS" | grep -iE "(security:|sec:|vulnerability:)" | sed 's/^/- /' >> changelog.md || echo "- „Å™„Åó" >> changelog.md
            echo "" >> changelog.md

            echo "### üîß „Åù„ÅÆ‰ªñ„ÅÆÂ§âÊõ¥" >> changelog.md
            echo "$COMMITS" | grep -vE "(feat:|feature:|add:|implement:|fix:|hotfix:|bug:|perf:|performance:|optimize:|speed:|security:|sec:|vulnerability:)" | sed 's/^/- /' >> changelog.md || echo "- „Å™„Åó" >> changelog.md

            CHANGELOG=$(cat changelog.md)
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  create-release:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.should-release == 'true'
    outputs:
      new-version: ${{ steps.version.outputs.new-version }}
      release-url: ${{ steps.release.outputs.html_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Calculate new version
        id: version
        run: |
          # ÁèæÂú®„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÇíÂèñÂæó
          CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null | sed 's/^v//' || echo "0.0.0")
          echo "Current version: $CURRENT_VERSION"

          # „Éê„Éº„Ç∏„Éß„É≥Áï™Âè∑„ÇíÂàÜÂâ≤
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          # Êñ∞„Åó„ÅÑ„Éê„Éº„Ç∏„Éß„É≥„ÇíË®àÁÆó
          case "${{ needs.detect-changes.outputs.release-type }}" in
            major)
              NEW_MAJOR=$((MAJOR + 1))
              NEW_MINOR=0
              NEW_PATCH=0
              ;;
            minor)
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$((MINOR + 1))
              NEW_PATCH=0
              ;;
            patch)
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$MINOR
              NEW_PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
          echo "New version: $NEW_VERSION"
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Update version in files
        run: |
          NEW_VERSION="${{ steps.version.outputs.new-version }}"

          # pyproject.toml„ÅÆ„Éê„Éº„Ç∏„Éß„É≥Êõ¥Êñ∞
          if [ -f "pyproject.toml" ]; then
            sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml
            echo "Updated version in pyproject.toml"
          fi

          # __init__.py„ÅÆ„Éê„Éº„Ç∏„Éß„É≥Êõ¥Êñ∞
          if [ -f "src/day_trade/__init__.py" ]; then
            sed -i "s/__version__ = .*/__version__ = \"$NEW_VERSION\"/" src/day_trade/__init__.py
            echo "Updated version in __init__.py"
          fi

          # setup.py„ÅÆ„Éê„Éº„Ç∏„Éß„É≥Êõ¥Êñ∞
          if [ -f "setup.py" ]; then
            sed -i "s/version='.*'/version='$NEW_VERSION'/" setup.py
            echo "Updated version in setup.py"
          fi

      - name: Run performance benchmark for release
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-benchmark psutil memory_profiler

          # „É™„É™„Éº„ÇπÁî®„ÅÆ„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÉÜ„Çπ„Éà
          python -c "
          import json
          import time
          import psutil
          import sys
          sys.path.insert(0, 'src')

          results = {}
          process = psutil.Process()

          # ÁâπÂæ¥ÈáèÁîüÊàê„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ
          start_time = time.time()
          start_memory = process.memory_info().rss / 1024 / 1024

          try:
              from day_trade.ml.feature_pipeline import FeaturePipeline
              pipeline = FeaturePipeline()
              import pandas as pd
              test_data = pd.DataFrame({
                  'timestamp': pd.date_range('2024-01-01', periods=2000, freq='1min'),
                  'price': [100 + i * 0.1 for i in range(2000)],
                  'volume': [1000 + i * 10 for i in range(2000)]
              })
              features = pipeline.batch_generate_features(test_data, batch_size=200)
              feature_gen_time = time.time() - start_time
              results['feature_generation_time'] = feature_gen_time
              results['throughput_features_per_second'] = len(features) / feature_gen_time if features and feature_gen_time > 0 else 0
          except Exception as e:
              results['feature_generation_error'] = str(e)
              results['feature_generation_time'] = 0
              results['throughput_features_per_second'] = 0

          end_memory = process.memory_info().rss / 1024 / 1024
          results['memory_usage_mb'] = end_memory - start_memory
          results['peak_memory_mb'] = end_memory

          with open('release_benchmark.json', 'w') as f:
              json.dump(results, f, indent=2)

          print('Performance benchmark completed:')
          print(json.dumps(results, indent=2))
          "

      - name: Create Git tag
        run: |
          NEW_VERSION="${{ steps.version.outputs.new-version }}"

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add -A
          git commit -m "chore: bump version to v$NEW_VERSION

          Auto-generated version bump by release workflow
          Release type: ${{ needs.detect-changes.outputs.release-type }}

          ü§ñ Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>" || echo "No changes to commit"

          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION

          ${{ needs.detect-changes.outputs.changelog }}"

          git push origin main
          git push origin "v$NEW_VERSION"

      - name: Create GitHub Release
        id: release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            // „Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„Éô„É≥„ÉÅ„Éû„Éº„ÇØÁµêÊûú„ÇíË™≠„ÅøËæº„Åø
            let benchmarkData = {};
            try {
              benchmarkData = JSON.parse(fs.readFileSync('release_benchmark.json', 'utf8'));
            } catch (e) {
              console.log('No benchmark data available');
            }

            // „É™„É™„Éº„Çπ„Éé„Éº„Éà„Å´„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊÉÖÂ†±„ÇíËøΩÂä†
            let performanceSection = '';
            if (benchmarkData.feature_generation_time) {
              performanceSection = `

            ## üìä „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊåáÊ®ô

            - **ÁâπÂæ¥ÈáèÁîüÊàêÊôÇÈñì**: ${benchmarkData.feature_generation_time.toFixed(4)}Áßí
            - **Âá¶ÁêÜ„Çπ„É´„Éº„Éó„ÉÉ„Éà**: ${Math.round(benchmarkData.throughput_features_per_second)}‰ª∂/Áßí
            - **„É°„É¢„É™‰ΩøÁî®Èáè**: ${benchmarkData.memory_usage_mb.toFixed(2)}MB
            - **„Éî„Éº„ÇØ„É°„É¢„É™**: ${benchmarkData.peak_memory_mb.toFixed(2)}MB`;
            }

            const releaseBody = `${{ needs.detect-changes.outputs.changelog }}${performanceSection}

            ## üîó Èñ¢ÈÄ£ÊÉÖÂ†±

            - **„É™„É™„Éº„Çπ„Çø„Ç§„Éó**: ${{ needs.detect-changes.outputs.release-type }}
            - **„Éì„É´„ÉâÊó•ÊôÇ**: ${new Date().toISOString()}
            - **„Ç≥„Éü„ÉÉ„Éà**: ${context.sha.substring(0, 7)}

            ---
            *„Åì„ÅÆ„É™„É™„Éº„Çπ„ÅØËá™ÂãïÁîüÊàê„Åï„Çå„Åæ„Åó„Åü ü§ñ*`;

            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'v${{ steps.version.outputs.new-version }}',
              name: 'Release v${{ steps.version.outputs.new-version }}',
              body: releaseBody,
              draft: false,
              prerelease: false
            });

            return release.data;

  notify-release:
    runs-on: ubuntu-latest
    needs: [detect-changes, create-release]
    if: needs.detect-changes.outputs.should-release == 'true'
    steps:
      - name: Create release notification issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üöÄ Release v${{ needs.create-release.outputs.new-version }} Published`,
              body: `## üéâ Êñ∞„Åó„ÅÑ„É™„É™„Éº„Çπ„ÅåÂÖ¨Èñã„Åï„Çå„Åæ„Åó„ÅüÔºÅ

            **„Éê„Éº„Ç∏„Éß„É≥**: v${{ needs.create-release.outputs.new-version }}
            **„É™„É™„Éº„Çπ„Çø„Ç§„Éó**: ${{ needs.detect-changes.outputs.release-type }}
            **„É™„É™„Éº„ÇπURL**: ${{ needs.create-release.outputs.release-url }}

            ### üìã Â§âÊõ¥ÂÜÖÂÆπ
            ${{ needs.detect-changes.outputs.changelog }}

            ### ‚úÖ Ê¨°„ÅÆ„Çπ„ÉÜ„ÉÉ„Éó
            - [ ] „Éá„Éó„É≠„Ç§„É°„É≥„ÉàÁí∞Â¢É„Å∏„ÅÆÈÅ©Áî®„ÇíÁ¢∫Ë™ç
            - [ ] „É¢„Éã„Çø„É™„É≥„Ç∞„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ„Åß„ÅÆÂãï‰ΩúÁ¢∫Ë™ç
            - [ ] „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊåáÊ®ô„ÅÆÁ∂ôÁ∂öÁõ£Ë¶ñ
            - [ ] „É¶„Éº„Ç∂„Éº„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„ÅÆÂèéÈõÜ

            ---
            *Ëá™ÂãïÁîüÊàê„Åï„Çå„Åü„É™„É™„Éº„ÇπÈÄöÁü• - ${new Date().toISOString()}*`,
              labels: ['release', 'automated', 'high-priority'],
              assignees: ['kaenozu']
            });

  build-artifacts:
    runs-on: ubuntu-latest
    needs: create-release
    if: needs.detect-changes.outputs.should-release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: v${{ needs.create-release.outputs.new-version }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel setuptools

      - name: Build package
        run: |
          python -m build

      - name: Upload artifacts to release
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            // dist„Éá„Ç£„É¨„ÇØ„Éà„É™ÂÜÖ„ÅÆ„Éï„Ç°„Ç§„É´„ÇíÂèñÂæó
            const distDir = 'dist';
            const files = fs.readdirSync(distDir);

            for (const file of files) {
              const filePath = path.join(distDir, file);
              const fileContent = fs.readFileSync(filePath);

              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: '${{ needs.create-release.outputs.release-id }}',
                name: file,
                data: fileContent
              });

              console.log(`Uploaded ${file} to release`);
            }
