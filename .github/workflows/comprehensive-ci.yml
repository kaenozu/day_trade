name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write
  actions: read

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Phase 1: Basic validation
  validation:
    runs-on: ubuntu-latest
    name: Basic Validation
    outputs:
      has-python-changes: ${{ steps.changes.outputs.python }}
      has-config-changes: ${{ steps.changes.outputs.config }}
      has-ci-changes: ${{ steps.changes.outputs.ci }}
      should-run-tests: ${{ steps.changes.outputs.tests }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            python:
              - '**/*.py'
              - 'requirements*.txt'
              - 'pyproject.toml'
              - 'setup.py'
            config:
              - '**/*.yml'
              - '**/*.yaml'
              - '**/*.json'
              - '**/*.toml'
              - '**/*.ini'
            ci:
              - '.github/**'
              - '.pre-commit-config.yaml'
              - 'pytest.ini'
            tests:
              - 'tests/**'
              - 'test_*.py'
              - '*_test.py'

      - name: Validate basic structure
        run: |
          echo "üîç Validating repository structure..."

          # Check for required files
          REQUIRED_FILES=("requirements.txt" "pyproject.toml" ".pre-commit-config.yaml")

          for file in "${REQUIRED_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ Found: $file"
            else
              echo "‚ö†Ô∏è Missing recommended file: $file"
            fi
          done

          # Check Python syntax
          if [ "${{ steps.changes.outputs.python }}" = "true" ]; then
            echo "üêç Checking Python syntax..."
            python -m py_compile $(find . -name "*.py" -not -path "./.*" | head -20) || echo "‚ö†Ô∏è Syntax issues detected"
          fi

  # Phase 2: Conflict detection
  conflict-detection:
    runs-on: ubuntu-latest
    name: Merge Conflict Detection
    needs: validation
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run conflict detection
        uses: ./.github/actions/conflict-detector
        with:
          base-branch: ${{ github.base_ref }}
          current-branch: ${{ github.head_ref }}
          enable-auto-comment: 'true'

  # Phase 3: Code quality checks
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Checks
    needs: validation
    if: needs.validation.outputs.has-python-changes == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pre-commit
          key: ${{ runner.os }}-deps-${{ hashFiles('**/requirements*.txt', '.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-deps-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          fi

      - name: Run pre-commit hooks
        run: |
          echo "üîç Running pre-commit hooks..."
          pre-commit run --all-files --show-diff-on-failure

      - name: Security scan
        run: |
          echo "üîê Running security scan..."
          pip install bandit safety

          # Bandit security scan
          bandit -r . -f json -o bandit-report.json || true

          # Safety dependency scan
          safety check --json --output safety-report.json || true

          echo "Security scans completed"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports-${{ github.run_number }}
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  # Phase 4: Testing
  testing:
    runs-on: ubuntu-latest
    name: Testing Suite
    needs: [validation, code-quality]
    if: needs.validation.outputs.should-run-tests == 'true' || needs.validation.outputs.has-python-changes == 'true'

    strategy:
      matrix:
        test-type: [unit, integration]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi
          if [ -f requirements-dev.txt ]; then
            pip install -r requirements-dev.txt
          fi
          pip install pytest pytest-cov pytest-xdist

      - name: Run tests
        run: |
          echo "üß™ Running ${{ matrix.test-type }} tests..."

          if [ "${{ matrix.test-type }}" = "unit" ]; then
            pytest tests/ -v --cov=. --cov-report=xml --cov-report=html -x -k "not integration" || true
          elif [ "${{ matrix.test-type }}" = "integration" ]; then
            pytest tests/ -v -k "integration" || true
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.test-type }}-${{ github.run_number }}
          path: |
            htmlcov/
            coverage.xml
            pytest.xml
          retention-days: 14

  # Phase 5: Configuration validation
  config-validation:
    runs-on: ubuntu-latest
    name: Configuration Validation
    needs: validation
    if: needs.validation.outputs.has-config-changes == 'true'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate YAML files
        run: |
          echo "üìÑ Validating YAML files..."
          pip install pyyaml

          find . -name "*.yml" -o -name "*.yaml" | while read file; do
            echo "Checking: $file"
            python -c "import yaml; yaml.safe_load(open('$file'))" || echo "‚ùå Invalid YAML: $file"
          done

      - name: Validate JSON files
        run: |
          echo "üìÑ Validating JSON files..."

          find . -name "*.json" | while read file; do
            echo "Checking: $file"
            python -c "import json; json.load(open('$file'))" || echo "‚ùå Invalid JSON: $file"
          done

      - name: Check configuration consistency
        run: |
          echo "üîç Checking configuration consistency..."

          # Example checks - customize based on your specific configs
          if [ -f "config/settings.json" ] && [ -f "config/production.yaml" ]; then
            echo "‚úÖ Configuration files found"
          fi

  # Phase 6: Build and deployment readiness
  build-check:
    runs-on: ubuntu-latest
    name: Build Readiness Check
    needs: [validation, code-quality, testing, config-validation]
    if: always() && (needs.code-quality.result == 'success' || needs.code-quality.result == 'skipped')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel

      - name: Test package build
        run: |
          echo "üì¶ Testing package build..."
          if [ -f "pyproject.toml" ]; then
            python -m build --wheel --sdist . || echo "‚ö†Ô∏è Build test failed"
          else
            echo "‚ÑπÔ∏è No pyproject.toml found, skipping build test"
          fi

      - name: Check import paths
        run: |
          echo "üîç Checking import paths..."
          python -c "
          import sys
          import importlib.util

          # Test core imports
          core_modules = ['src.day_trade', 'daytrade', 'day_trading_engine']

          for module in core_modules:
              try:
                  spec = importlib.util.find_spec(module)
                  if spec:
                      print(f'‚úÖ Can import: {module}')
                  else:
                      print(f'‚ö†Ô∏è Cannot find: {module}')
              except Exception as e:
                  print(f'‚ùå Import error for {module}: {e}')
          " || true

  # Phase 7: Final status report
  status-report:
    runs-on: ubuntu-latest
    name: CI Status Report
    needs: [validation, conflict-detection, code-quality, testing, config-validation, build-check]
    if: always()

    steps:
      - name: Generate status report
        run: |
          echo "üìä CI/CD Pipeline Status Report"
          echo "================================"
          echo ""
          echo "Phase Results:"
          echo "- Validation: ${{ needs.validation.result }}"
          echo "- Conflict Detection: ${{ needs.conflict-detection.result }}"
          echo "- Code Quality: ${{ needs.code-quality.result }}"
          echo "- Testing: ${{ needs.testing.result }}"
          echo "- Config Validation: ${{ needs.config-validation.result }}"
          echo "- Build Check: ${{ needs.build-check.result }}"
          echo ""

          # Determine overall status
          if [[ "${{ needs.validation.result }}" == "failure" ]]; then
            echo "‚ùå Pipeline failed at validation stage"
            exit 1
          elif [[ "${{ needs.conflict-detection.result }}" == "failure" ]]; then
            echo "‚ö†Ô∏è Merge conflicts detected - resolution required"
            exit 1
          elif [[ "${{ needs.code-quality.result }}" == "failure" ]]; then
            echo "‚ùå Code quality checks failed"
            exit 1
          elif [[ "${{ needs.testing.result }}" == "failure" ]]; then
            echo "‚ùå Tests failed"
            exit 1
          else
            echo "‚úÖ All checks passed successfully!"
          fi

      - name: Comment PR with status
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              validation: '${{ needs.validation.result }}',
              conflicts: '${{ needs.conflict-detection.result }}',
              quality: '${{ needs.code-quality.result }}',
              testing: '${{ needs.testing.result }}',
              config: '${{ needs.config-validation.result }}',
              build: '${{ needs.build-check.result }}'
            };

            const getStatusIcon = (status) => {
              switch(status) {
                case 'success': return '‚úÖ';
                case 'failure': return '‚ùå';
                case 'skipped': return '‚è≠Ô∏è';
                default: return '‚ö™';
              }
            };

            const body = `## üîç CI/CD Pipeline Status Report

            | Phase | Status | Result |
            |-------|--------|--------|
            | Validation | ${getStatusIcon(results.validation)} | ${results.validation} |
            | Conflict Detection | ${getStatusIcon(results.conflicts)} | ${results.conflicts} |
            | Code Quality | ${getStatusIcon(results.quality)} | ${results.quality} |
            | Testing | ${getStatusIcon(results.testing)} | ${results.testing} |
            | Config Validation | ${getStatusIcon(results.config)} | ${results.config} |
            | Build Check | ${getStatusIcon(results.build)} | ${results.build} |

            ---
            ü§ñ **Ëá™ÂãïÁîüÊàê„É¨„Éù„Éº„Éà** - Comprehensive CI/CD Pipeline
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });