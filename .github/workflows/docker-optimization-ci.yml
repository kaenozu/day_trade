#==============================================================================
# Docker Optimization CI/CD Pipeline - Issue #441
# Comprehensive container build, test, and deployment automation
#==============================================================================

name: Docker Container Optimization

on:
  push:
    branches: [main, 'feature/docker-*', 'release/*']
    paths:
      - 'Dockerfile*'
      - 'src/**'
      - 'pyproject.toml'
      - 'requirements.txt'
      - 'k8s/**'
      - '.github/workflows/docker-optimization-ci.yml'
  pull_request:
    branches: [main]
    paths:
      - 'Dockerfile*'
      - 'src/**'
      - 'pyproject.toml'
      - 'requirements.txt'
      - 'k8s/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  #------------------------------------------------------------------------------
  # Docker Image Size Analysis
  #------------------------------------------------------------------------------
  analyze-dockerfile:
    name: 🔍 Dockerfile Analysis
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.changes.outputs.docker }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for Docker-related changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            docker:
              - 'Dockerfile*'
              - 'src/**'
              - 'pyproject.toml'
              - 'requirements.txt'
              - 'k8s/**'

      - name: Dockerfile linting
        if: steps.changes.outputs.docker == 'true'
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning
          ignore: DL3008,DL3009,DL3015

      - name: Docker security scan
        if: steps.changes.outputs.docker == 'true'
        run: |
          echo "🔒 Docker security analysis"
          # Check for security best practices
          grep -q "USER.*root" Dockerfile && exit 1 || echo "✓ Non-root user configured"
          grep -q "HEALTHCHECK" Dockerfile && echo "✓ Health check configured" || exit 1

  #------------------------------------------------------------------------------
  # Multi-Stage Build & Size Optimization
  #------------------------------------------------------------------------------
  build-optimized-images:
    name: 🏗️ Build Optimized Container Images
    runs-on: ubuntu-latest
    needs: analyze-dockerfile
    if: needs.analyze-dockerfile.outputs.should_build == 'true'
    strategy:
      matrix:
        target: [production, development, hft-optimized, monitoring]
    outputs:
      image-size-production: ${{ steps.build-production.outputs.image-size }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
          buildkitd-flags: --allow-insecure-entitlement=network.host

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ matrix.target }}-latest,enable={{is_default_branch}}
          flavor: |
            suffix=-${{ matrix.target }}

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          target: ${{ matrix.target }}
          push: false
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            GIT_COMMIT=${{ github.sha }}
          cache-from: |
            type=gha,scope=${{ matrix.target }}
          cache-to: |
            type=gha,scope=${{ matrix.target }},mode=max

      - name: Analyze image size
        id: analyze
        run: |
          IMAGE_TAG="${{ steps.meta.outputs.tags }}" | head -n1
          IMAGE_SIZE=$(docker images --format "table {{.Size}}" "$IMAGE_TAG" | tail -n +2)
          LAYER_COUNT=$(docker history "$IMAGE_TAG" --format "{{.Size}}" | grep -v "0B" | wc -l)

          echo "📊 Image Analysis for ${{ matrix.target }}:"
          echo "Size: $IMAGE_SIZE"
          echo "Layers: $LAYER_COUNT"
          echo "image-size=$IMAGE_SIZE" >> $GITHUB_OUTPUT

          # Security scan
          echo "🔒 Security vulnerability scan..."
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image --exit-code 1 --severity HIGH,CRITICAL "$IMAGE_TAG" || true

      - name: Production image size tracking
        if: matrix.target == 'production'
        id: build-production
        run: |
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          IMAGE_SIZE=$(docker inspect "$IMAGE_TAG" --format='{{.Size}}')
          IMAGE_SIZE_MB=$((IMAGE_SIZE / 1024 / 1024))

          echo "Production image size: ${IMAGE_SIZE_MB}MB"
          echo "image-size=${IMAGE_SIZE_MB}" >> $GITHUB_OUTPUT

          # Check if size target is met (<150MB = 70% reduction from ~500MB)
          if [ "$IMAGE_SIZE_MB" -gt 150 ]; then
            echo "⚠️ Warning: Image size ${IMAGE_SIZE_MB}MB exceeds target of 150MB"
          else
            echo "✅ Image size optimization target achieved: ${IMAGE_SIZE_MB}MB ≤ 150MB"
          fi

      - name: Push to registry
        if: github.event_name == 'push'
        uses: docker/build-push-action@v5
        with:
          context: .
          target: ${{ matrix.target }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
            GIT_COMMIT=${{ github.sha }}
          cache-from: |
            type=gha,scope=${{ matrix.target }}

  #------------------------------------------------------------------------------
  # Container Integration Tests
  #------------------------------------------------------------------------------
  test-containers:
    name: 🧪 Container Integration Tests
    runs-on: ubuntu-latest
    needs: build-optimized-images
    strategy:
      matrix:
        target: [production, hft-optimized]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        run: |
          docker buildx build --target ${{ matrix.target }} -t test-image:${{ matrix.target }} --load .

      - name: Test container startup
        run: |
          echo "🚀 Testing ${{ matrix.target }} container startup..."

          # Test basic container functionality
          docker run --rm --name test-${{ matrix.target }} \
            -d test-image:${{ matrix.target }}

          # Wait for startup
          sleep 10

          # Check if container is healthy
          if [ "${{ matrix.target }}" = "hft-optimized" ]; then
            # HFT-specific tests
            docker exec test-${{ matrix.target }} python -c "
            from day_trade.performance import verify_system_capabilities
            caps = verify_system_capabilities()
            assert caps.get('ultra_low_latency', False), 'Ultra low latency not available'
            print('✅ HFT ultra-low latency system verified')
            "
          else
            # Standard production tests
            docker exec test-${{ matrix.target }} python -c "
            import day_trade
            print('✅ Application imports successfully')
            "
          fi

          # Cleanup
          docker stop test-${{ matrix.target }}

      - name: Performance benchmark
        if: matrix.target == 'hft-optimized'
        run: |
          echo "⚡ Running HFT performance benchmark..."
          docker run --rm test-image:hft-optimized python -c "
          import time
          start_time = time.time()
          from day_trade.performance.ultra_low_latency_core import benchmark_ultra_low_latency
          result = benchmark_ultra_low_latency(100)
          elapsed = time.time() - start_time

          print(f'Benchmark completed in {elapsed:.2f}s')
          print(f'Average latency: {result[\"latency_stats\"][\"avg_us\"]}μs')
          print(f'Target achievement: {result[\"performance\"][\"target_achievement_rate\"]}%')

          # Verify performance targets
          assert result['latency_stats']['avg_us'] < 50.0, 'Latency target not met'
          print('✅ HFT performance targets achieved')
          "

  #------------------------------------------------------------------------------
  # Kubernetes Deployment Validation
  #------------------------------------------------------------------------------
  validate-k8s-manifests:
    name: ☸️ Kubernetes Manifest Validation
    runs-on: ubuntu-latest
    needs: analyze-dockerfile
    if: needs.analyze-dockerfile.outputs.should_build == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Validate Kubernetes manifests
        run: |
          echo "☸️ Validating Kubernetes manifests..."

          # Check if k8s directory exists
          if [ ! -d "k8s" ]; then
            echo "❌ k8s directory not found"
            exit 1
          fi

          # Validate YAML syntax
          find k8s/ -name "*.yaml" -o -name "*.yml" | while read -r file; do
            echo "Validating $file..."
            kubectl --dry-run=client apply -f "$file" || exit 1
          done

          echo "✅ All Kubernetes manifests are valid"

      - name: Kustomize build test
        run: |
          if [ -f "k8s/kustomization.yaml" ] || [ -f "k8s/kustomization.yml" ]; then
            echo "🔧 Testing kustomize build..."
            kubectl kustomize k8s/
          else
            echo "ℹ️ No kustomization file found, skipping kustomize test"
          fi

  #------------------------------------------------------------------------------
  # Security & Compliance Scan
  #------------------------------------------------------------------------------
  security-compliance-scan:
    name: 🔐 Security & Compliance Scan
    runs-on: ubuntu-latest
    needs: build-optimized-images
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'daytrade:production-latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Container structure test
        run: |
          # Install container structure test
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test

          # Create test configuration
          cat > container-test-config.yaml << EOF
          schemaVersion: 2.0.0
          fileExistenceTests:
            - name: 'Application directory'
              path: '/app'
              shouldExist: true
            - name: 'Source code'
              path: '/app/src'
              shouldExist: true
          fileContentTests:
            - name: 'Non-root user'
              path: '/etc/passwd'
              expectedContents: ['appuser:x:1000:1000::/home/appuser:/bin/false']
          commandTests:
            - name: 'Python version'
              command: 'python'
              args: ['--version']
              expectedOutput: ['Python 3.11.*']
          metadataTests:
            - name: 'User is not root'
              user: 'appuser'
            - name: 'Working directory'
              workdir: '/app'
          EOF

          # Run structure test
          container-structure-test test --image daytrade:production-latest --config container-test-config.yaml

  #------------------------------------------------------------------------------
  # Size Reduction Report
  #------------------------------------------------------------------------------
  size-reduction-report:
    name: 📊 Container Size Optimization Report
    runs-on: ubuntu-latest
    needs: build-optimized-images
    if: always()
    steps:
      - name: Generate size report
        run: |
          echo "# 🐳 Docker Container Size Optimization Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          PROD_SIZE="${{ needs.build-optimized-images.outputs.image-size-production }}"

          if [ -n "$PROD_SIZE" ]; then
            echo "## 📈 Production Image Analysis" >> $GITHUB_STEP_SUMMARY
            echo "- **Current Size**: ${PROD_SIZE}MB" >> $GITHUB_STEP_SUMMARY
            echo "- **Target Size**: ≤150MB (70% reduction from ~500MB baseline)" >> $GITHUB_STEP_SUMMARY

            # Calculate reduction percentage
            if [ "$PROD_SIZE" -le 150 ]; then
              REDUCTION=$(echo "scale=1; (1 - $PROD_SIZE/500) * 100" | bc -l 2>/dev/null || echo "70")
              echo "- **✅ Optimization Target**: ACHIEVED (~${REDUCTION}% reduction)" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **⚠️ Optimization Target**: NOT YET ACHIEVED" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Status**: Size data not available" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🏗️ Multi-Stage Build Stages" >> $GITHUB_STEP_SUMMARY
          echo "1. **deps-builder**: Dependency compilation" >> $GITHUB_STEP_SUMMARY
          echo "2. **app-builder**: Application preparation" >> $GITHUB_STEP_SUMMARY
          echo "3. **production**: Ultra-lightweight runtime (Target)" >> $GITHUB_STEP_SUMMARY
          echo "4. **development**: Development tools included" >> $GITHUB_STEP_SUMMARY
          echo "5. **hft-optimized**: HFT system optimizations" >> $GITHUB_STEP_SUMMARY
          echo "6. **monitoring**: Metrics and monitoring" >> $GITHUB_STEP_SUMMARY

  #------------------------------------------------------------------------------
  # Deployment Readiness Check
  #------------------------------------------------------------------------------
  deployment-readiness:
    name: 🚀 Deployment Readiness Check
    runs-on: ubuntu-latest
    needs: [build-optimized-images, test-containers, validate-k8s-manifests, security-compliance-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Deployment readiness summary
        run: |
          echo "# 🚀 Deployment Readiness Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Container Images**: Built and tested successfully" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Integration Tests**: All tests passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Kubernetes Manifests**: Validated successfully" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Security Scan**: Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎯 **Ready for Production Deployment**" >> $GITHUB_STEP_SUMMARY

          # Deployment commands
          echo "## 📋 Deployment Commands" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Production deployment" >> $GITHUB_STEP_SUMMARY
          echo "docker build --target production -t daytrade:prod ." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# HFT optimized deployment" >> $GITHUB_STEP_SUMMARY
          echo "docker build --target hft-optimized -t daytrade:hft ." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Kubernetes deployment" >> $GITHUB_STEP_SUMMARY
          echo "kubectl apply -f k8s/deployment.yaml" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY