name: Project Board Management
on:
  issues:
    types: [opened, closed, reopened, labeled, assigned]
  pull_request:
    types: [opened, closed, merged, ready_for_review]
  workflow_dispatch:

permissions:
  issues: write
  pull-requests: write
  contents: read

jobs:
  manage-project-board:
    runs-on: ubuntu-latest
    steps:
      - name: Add to Project Board
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const item = context.payload.issue || context.payload.pull_request;
            if (!item) return;

            const labels = item.labels?.map(l => l.name) || [];

            // プロジェクトボードのカラム管理
            const boardColumns = {
              'Backlog': [],
              'To Do': ['needs-info', 'ready-for-review'],
              'In Progress': ['in-progress'],
              'Review': ['ready-for-review'],
              'Done': []
            };

            // 優先度に基づくカラム決定
            let targetColumn = 'Backlog';

            if (item.state === 'closed') {
              targetColumn = 'Done';
            } else if (labels.includes('in-progress')) {
              targetColumn = 'In Progress';
            } else if (labels.includes('ready-for-review')) {
              targetColumn = 'Review';
            } else if (labels.includes('critical') || labels.includes('high-priority')) {
              targetColumn = 'To Do';
            }

            console.log(`Item #${item.number} should be in column: ${targetColumn}`);

  milestone-management:
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'labeled'
    steps:
      - name: Auto-assign milestone
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const labels = issue.labels.map(l => l.name);

            // マイルストーンマッピング
            const milestoneMapping = {
              'security': 'Security & Compliance',
              'critical': 'Critical Fixes',
              'performance': 'Performance Optimization',
              'machine-learning': 'ML & AI Features',
              'hft': 'HFT System',
              'phase-a': 'Phase A: Foundation',
              'phase-b': 'Phase B: Data Processing',
              'phase-c': 'Phase C: ML Features',
              'phase-d': 'Phase D: Optimization',
              'phase-e': 'Phase E: Advanced Features',
              'phase-f': 'Phase F: Next-Gen Features'
            };

            let targetMilestone = null;

            // 優先度順でマイルストーンを決定
            const priorityOrder = [
              'security', 'critical', 'hft',
              'phase-f', 'phase-e', 'phase-d', 'phase-c', 'phase-b', 'phase-a',
              'performance', 'machine-learning'
            ];

            for (const label of priorityOrder) {
              if (labels.includes(label)) {
                targetMilestone = milestoneMapping[label];
                break;
              }
            }

            if (targetMilestone && !issue.milestone) {
              // 既存マイルストーンを取得
              const { data: milestones } = await github.rest.issues.listMilestones({
                owner: context.repo.owner,
                repo: context.repo.repo
              });

              const milestone = milestones.find(m => m.title === targetMilestone);

              if (milestone) {
                await github.rest.issues.update({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  milestone: milestone.number
                });

                console.log(`Assigned milestone "${targetMilestone}" to issue #${issue.number}`);
              } else {
                console.log(`Milestone "${targetMilestone}" not found`);
              }
            }

  weekly-triage-report:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: Generate weekly triage report
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const oneWeekAgo = new Date();
            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);

            // 今週のイシューを取得
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              since: oneWeekAgo.toISOString(),
              per_page: 100
            });

            const stats = {
              opened: 0,
              closed: 0,
              critical: 0,
              security: 0,
              performance: 0,
              ml: 0,
              byLabel: {},
              byMilestone: {},
              openByPriority: { critical: 0, high: 0, medium: 0, low: 0, unlabeled: 0 }
            };

            for (const issue of issues) {
              const createdAt = new Date(issue.created_at);
              const labels = issue.labels.map(l => l.name);

              if (createdAt >= oneWeekAgo) {
                stats.opened++;
              }

              if (issue.state === 'closed') {
                const closedAt = new Date(issue.closed_at);
                if (closedAt >= oneWeekAgo) {
                  stats.closed++;
                }
              }

              // ラベル統計
              for (const label of labels) {
                stats.byLabel[label] = (stats.byLabel[label] || 0) + 1;

                if (label === 'critical') stats.critical++;
                if (label === 'security') stats.security++;
                if (label === 'performance') stats.performance++;
                if (label === 'machine-learning') stats.ml++;
              }

              // マイルストーン統計
              if (issue.milestone) {
                const milestone = issue.milestone.title;
                stats.byMilestone[milestone] = (stats.byMilestone[milestone] || 0) + 1;
              }

              // オープンイシューの優先度統計
              if (issue.state === 'open') {
                if (labels.includes('critical')) {
                  stats.openByPriority.critical++;
                } else if (labels.includes('high-priority') || labels.includes('security')) {
                  stats.openByPriority.high++;
                } else if (labels.includes('medium-priority')) {
                  stats.openByPriority.medium++;
                } else if (labels.includes('low-priority')) {
                  stats.openByPriority.low++;
                } else {
                  stats.openByPriority.unlabeled++;
                }
              }
            }

            // レポート生成
            let report = '# 📊 Weekly Triage Report\n\n';
            report += `**Period**: ${oneWeekAgo.toISOString().split('T')[0]} - ${new Date().toISOString().split('T')[0]}\n\n`;

            report += '## 📈 Weekly Activity\n';
            report += `- Issues Opened: **${stats.opened}**\n`;
            report += `- Issues Closed: **${stats.closed}**\n`;
            report += `- Net Change: **${stats.opened - stats.closed > 0 ? '+' : ''}${stats.opened - stats.closed}**\n\n`;

            report += '## 🚨 Critical Items\n';
            report += `- Critical Issues: **${stats.critical}**\n`;
            report += `- Security Issues: **${stats.security}**\n`;
            report += `- Performance Issues: **${stats.performance}**\n`;
            report += `- ML Issues: **${stats.ml}**\n\n`;

            report += '## 📊 Open Issues by Priority\n';
            report += `- 🚨 Critical: **${stats.openByPriority.critical}**\n`;
            report += `- ⚠️ High: **${stats.openByPriority.high}**\n`;
            report += `- 📋 Medium: **${stats.openByPriority.medium}**\n`;
            report += `- 📝 Low: **${stats.openByPriority.low}**\n`;
            report += `- 🏷️ Unlabeled: **${stats.openByPriority.unlabeled}**\n\n`;

            report += '## 🏷️ Top Labels\n';
            const sortedLabels = Object.entries(stats.byLabel)
              .sort(([,a], [,b]) => b - a)
              .slice(0, 10);

            for (const [label, count] of sortedLabels) {
              report += `- ${label}: ${count}\n`;
            }

            report += '\n## 🎯 Milestones\n';
            const sortedMilestones = Object.entries(stats.byMilestone)
              .sort(([,a], [,b]) => b - a);

            for (const [milestone, count] of sortedMilestones) {
              report += `- ${milestone}: ${count}\n`;
            }

            report += '\n## 🎯 Action Items\n';

            if (stats.openByPriority.critical > 0) {
              report += `- ⚡ **${stats.openByPriority.critical} critical issues** need immediate attention\n`;
            }

            if (stats.openByPriority.unlabeled > 0) {
              report += `- 🏷️ **${stats.openByPriority.unlabeled} issues** need proper labeling\n`;
            }

            if (stats.security > 0) {
              report += `- 🔒 **${stats.security} security issues** require security review\n`;
            }

            const velocityText = stats.closed > stats.opened ? '🚀 Great velocity!' :
                               stats.closed === stats.opened ? '⚖️ Balanced' :
                               '⚠️ Issues accumulating';

            report += `\n## 📈 Velocity: ${velocityText}\n`;

            console.log(report);

            // GitHubのDiscussionまたはIssueとしてレポートを投稿することも可能
            // 今回はコンソール出力のみ
