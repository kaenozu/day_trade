name: 📦 Dependency Updates

on:
  schedule:
    # 毎週月曜日 09:00 UTC に実行
    - cron: '0 9 * * 1'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'  # Default Python version for dependency management
  DEPENDENCY_BRANCH_PREFIX: 'dependency-updates'  # Branch prefix for dependency PRs

permissions:
  contents: write
  pull-requests: write

jobs:
  update-pre-commit:
    runs-on: ubuntu-latest
    name: Update pre-commit hooks

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          # Install pre-commit and project dependencies efficiently
          if [ -f pyproject.toml ]; then
            pip install -e .[dev] || pip install -e .
            pip install pre-commit
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
            pip install pre-commit
          else
            pip install pre-commit
          fi

      - name: Update pre-commit hooks
        run: |
          echo "📝 Current pre-commit configuration:"
          cat .pre-commit-config.yaml | head -20

          echo "🔄 Updating pre-commit hooks..."
          pre-commit autoupdate

          echo "📝 Updated pre-commit configuration:"
          cat .pre-commit-config.yaml | head -20

          # Test the updated hooks on a sample file
          echo "🧪 Testing updated pre-commit hooks..."
          if [ -f "src/day_trade/__init__.py" ]; then
            pre-commit run --files src/day_trade/__init__.py || echo "Some hooks failed, but continuing..."
          fi

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'ci: update pre-commit hooks'
          title: '🔄 Weekly pre-commit hooks update'
          body: |
            ## 📦 Automated Pre-commit Hooks Update

            This PR updates pre-commit hooks to their latest versions.

            ### Changes
            - Updated pre-commit hook versions in `.pre-commit-config.yaml`

            ### Testing
            - [ ] Pre-commit hooks run successfully
            - [ ] All existing tests pass

            🤖 This PR was created automatically by GitHub Actions.
          branch: ${{ env.DEPENDENCY_BRANCH_PREFIX }}/pre-commit-hooks
          delete-branch: true
          labels: |
            dependencies
            automated
            pre-commit

  update-actions:
    runs-on: ubuntu-latest
    name: Update GitHub Actions

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update GitHub Actions
        uses: fjogeleit/yaml-update-action@v0.14.0  # Fixed version for stability
        with:
          valueFile: '.github/workflows/*.yml'
          commitChange: false
          updateFile: true
          message: 'ci: update GitHub Actions to latest versions'
          createPR: false  # We'll handle PR creation manually

      - name: Create Pull Request for Actions
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'ci: update GitHub Actions versions'
          title: '🔄 Weekly GitHub Actions update'
          body: |
            ## 🔄 Automated GitHub Actions Update

            This PR updates GitHub Actions to their latest versions for:
            - Security improvements
            - Performance enhancements
            - New features

            ### Changes
            - Updated action versions in workflow files

            🤖 This PR was created automatically by GitHub Actions.
          branch: ${{ env.DEPENDENCY_BRANCH_PREFIX }}/github-actions
          delete-branch: true
          labels: |
            dependencies
            automated
            github-actions

  update-python-dependencies:
    runs-on: ubuntu-latest
    name: Update Python Dependencies

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependency management tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools pipx

      - name: Update Python dependencies
        run: |
          echo "🔄 Updating Python dependencies..."

          # Handle pyproject.toml based projects
          if [ -f "pyproject.toml" ]; then
            echo "📦 Found pyproject.toml - updating dependencies"

            # Install current dependencies first
            pip install -e .[dev,test] || pip install -e .

            # Generate updated requirements if pip-tools is configured
            if [ -f "requirements.in" ]; then
              echo "📋 Updating requirements.txt from requirements.in"
              pip-compile requirements.in
            fi

            if [ -f "requirements-dev.in" ]; then
              echo "📋 Updating requirements-dev.txt from requirements-dev.in"
              pip-compile requirements-dev.in
            fi

          # Handle traditional requirements.txt
          elif [ -f "requirements.txt" ]; then
            echo "📦 Found requirements.txt - checking for updates"

            # Create a backup
            cp requirements.txt requirements.txt.backup

            # Update to latest compatible versions
            pip install --upgrade -r requirements.txt
            pip freeze > requirements.txt.new

            # Only keep packages that were in the original requirements
            python -c "
            import re

            # Read original requirements
            with open('requirements.txt.backup') as f:
                original = f.read()

            # Extract package names (handle various formats)
            original_packages = set()
            for line in original.strip().split('\n'):
                if line and not line.startswith('#'):
                    # Extract package name from various formats: pkg==1.0, pkg>=1.0, pkg
                    match = re.match(r'^([a-zA-Z0-9_-]+)', line.strip())
                    if match:
                        original_packages.add(match.group(1).lower())

            # Read new requirements
            with open('requirements.txt.new') as f:
                new_reqs = f.read()

            # Filter to only include originally specified packages
            filtered_reqs = []
            for line in new_reqs.strip().split('\n'):
                if line and not line.startswith('#'):
                    match = re.match(r'^([a-zA-Z0-9_-]+)', line.strip())
                    if match and match.group(1).lower() in original_packages:
                        filtered_reqs.append(line)

            # Write filtered requirements
            with open('requirements.txt', 'w') as f:
                f.write('\n'.join(filtered_reqs) + '\n')
            "

            # Clean up
            rm requirements.txt.backup requirements.txt.new

          else
            echo "⚠️ No Python dependency files found to update"
          fi

      - name: Check for dependency security vulnerabilities
        run: |
          echo "🔒 Checking for security vulnerabilities..."
          pip install safety

          # Run safety check and capture results
          safety check --json --output safety-report.json || true

          if [ -f "safety-report.json" ] && [ -s "safety-report.json" ]; then
            echo "⚠️ Security vulnerabilities found:"
            cat safety-report.json | jq '.[] | "\(.package_name): \(.vulnerability)"' || cat safety-report.json
          else
            echo "✅ No security vulnerabilities found"
          fi

      - name: Test dependency compatibility
        run: |
          echo "🧪 Testing dependency compatibility..."

          # Install updated dependencies
          if [ -f "pyproject.toml" ]; then
            pip install -e .[test] || pip install -e .
          elif [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi

          # Run basic import tests
          python -c "
          import sys
          sys.path.insert(0, 'src')
          try:
              import day_trade
              print('✅ Main package imports successfully')
          except ImportError as e:
              print(f'❌ Import failed: {e}')
              sys.exit(1)
          except Exception as e:
              print(f'⚠️ Import warning: {e}')
          "

      - name: Create Pull Request for Python Dependencies
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'deps: update Python dependencies'
          title: '📦 Weekly Python dependencies update'
          body: |
            ## 📦 Automated Python Dependencies Update

            This PR updates Python dependencies to their latest compatible versions.

            ### Changes
            - Updated Python package versions
            - Security vulnerability check performed
            - Basic compatibility testing completed

            ### Security Check
            - 🔒 Dependencies scanned for known vulnerabilities
            - 🧪 Basic import and compatibility tests passed

            ### Testing Checklist
            - [ ] All tests pass with updated dependencies
            - [ ] No breaking changes in updated packages
            - [ ] Security scan shows no critical vulnerabilities

            ### Manual Review Required
            - [ ] Review major version updates for breaking changes
            - [ ] Check release notes for significant changes
            - [ ] Verify compatibility with existing codebase

            🤖 This PR was created automatically by GitHub Actions.

            <details>
            <summary>📋 Dependency Update Details</summary>

            - Update Type: Automated weekly dependency update
            - Python Version: ${{ env.PYTHON_VERSION }}
            - Update Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
            - Branch: ${{ env.DEPENDENCY_BRANCH_PREFIX }}/python-dependencies

            </details>
          branch: ${{ env.DEPENDENCY_BRANCH_PREFIX }}/python-dependencies
          delete-branch: true
          labels: |
            dependencies
            automated
            python

  update-summary:
    runs-on: ubuntu-latest
    name: Update Summary
    needs: [update-pre-commit, update-actions, update-python-dependencies]
    if: always()

    steps:
      - name: Generate update summary
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = [
              { name: 'pre-commit hooks', status: '${{ needs.update-pre-commit.result }}' },
              { name: 'GitHub Actions', status: '${{ needs.update-actions.result }}' },
              { name: 'Python dependencies', status: '${{ needs.update-python-dependencies.result }}' }
            ];

            const successfulJobs = jobs.filter(job => job.status === 'success');
            const failedJobs = jobs.filter(job => job.status === 'failure');

            console.log('📊 Dependency Update Summary:');
            console.log('============================');
            console.log(`✅ Successful updates: ${successfulJobs.length}`);
            console.log(`❌ Failed updates: ${failedJobs.length}`);

            if (successfulJobs.length > 0) {
              console.log('\n✅ Successful updates:');
              successfulJobs.forEach(job => console.log(`  - ${job.name}`));
            }

            if (failedJobs.length > 0) {
              console.log('\n❌ Failed updates:');
              failedJobs.forEach(job => console.log(`  - ${job.name}`));

              // Create an issue for failed updates
              const title = `🚨 Dependency Update Failures - ${new Date().toISOString().split('T')[0]}`;
              const body = `## Dependency Update Failures

              The automated dependency update process encountered failures:

              **Failed Updates:**
              ${failedJobs.map(job => `- ${job.name}`).join('\n')}

              **Workflow Run:** [${context.runId}](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})

              Please investigate and resolve these issues manually.

              This issue was automatically created by the dependency update workflow.
              `;

              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['dependencies', 'automated', 'bug']
              });

              console.log('🚨 Created issue for failed dependency updates');
            }
