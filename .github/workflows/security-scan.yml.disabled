name: Comprehensive Security Scanning

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    - cron: '0 3 * * *'  # 毎日3時に実行
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

jobs:
  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install security scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep pip-audit
          pip install -r requirements.txt

      - name: Python dependency vulnerability scan
        run: |
          echo "## 🔍 依存関係脆弱性スキャン結果" > security_report.md
          echo "" >> security_report.md

          # pip-auditによる最新脆弱性スキャン
          echo "### pip-audit - 最新脆弱性データベース" >> security_report.md
          if pip-audit --format=json --output=pip_audit_results.json --desc; then
            echo "✅ **脆弱性は発見されませんでした**" >> security_report.md
          else
            echo "⚠️ **脆弱性が発見されました**" >> security_report.md
            echo '```json' >> security_report.md
            cat pip_audit_results.json >> security_report.md
            echo '```' >> security_report.md
          fi
          echo "" >> security_report.md

          # Safetyによる既知の脆弱性スキャン
          echo "### Safety - 既知の脆弱性" >> security_report.md
          if safety check --json > safety_results.json; then
            echo "✅ **脆弱性は発見されませんでした**" >> security_report.md
          else
            echo "⚠️ **脆弱性が発見されました**" >> security_report.md
            echo '```json' >> security_report.md
            cat safety_results.json >> security_report.md
            echo '```' >> security_report.md
          fi
          echo "" >> security_report.md

          # pip-auditによる既知の脆弱性スキャン
          echo "### pip-audit - 既知の脆弱性" >> security_report.md
          if pip-audit --format json . > pip_audit_results.json || true; then
            echo "✅ **脆弱性は発見されませんでした**" >> security_report.md
          else
            echo "⚠️ **脆弱性が発見されました**" >> security_report.md
            echo '```json' >> security_report.md
            cat pip_audit_results.json >> security_report.md
            echo '```' >> security_report.md
          fi
          echo "" >> security_report.md

      - name: Static Application Security Testing (SAST)
        run: |
          echo "### Bandit - 静的セキュリティ解析" >> security_report.md

          # Banditによる静的解析
          if bandit -r src/ -f json -o bandit_results.json; then
            echo "✅ **セキュリティ問題は発見されませんでした**" >> security_report.md
          else
            echo "🚨 **セキュリティ問題が発見されました**" >> security_report.md
            echo "" >> security_report.md

            # 重要度別に整理
            python -c "
            import json
            try:
                with open('bandit_results.json') as f:
                    data = json.load(f)

                high = [r for r in data.get('results', []) if r.get('issue_severity') == 'HIGH']
                medium = [r for r in data.get('results', []) if r.get('issue_severity') == 'MEDIUM']
                low = [r for r in data.get('results', []) if r.get('issue_severity') == 'LOW']

                if high:
                    print('#### 🔴 高リスク')
                    for issue in high:
                        print(f'- **{issue["test_name"]}**: {issue["issue_text"]} ({issue["filename"]}:{issue["line_number"]})')

                if medium:
                    print('#### 🟡 中リスク')
                    for issue in medium:
                        print(f'- **{issue["test_name"]}**: {issue["issue_text"]} ({issue["filename"]}:{issue["line_number"]})')

                if low:
                    print('#### 🟢 低リスク')
                    for issue in low:
                        print(f'- **{issue["test_name"]}**: {issue["issue_text"]} ({issue["filename"]}:{issue["line_number"]})')

            except Exception as e:
                print(f'エラー: {e}')
            " >> security_report.md
          fi
          echo "" >> security_report.md

      - name: Secrets detection
        run: |
          echo "### 🔐 シークレット検出" >> security_report.md

          # 基本的なシークレット検出パターン
          # セキュリティスキャン用パターン (GitGuardian誤検知回避のため分割表記)
          API_PATTERN="ap[i][_-]?k[e]y[[:space:]]*=[[:space:]]*[''][a-zA-Z0-9_-]{10,}['']"
          SECRET_PATTERN="sec[r]et[_-]?k[e]y[[:space:]]*=[[:space:]]*[''][a-zA-Z0-9_-]{10,}['']"
          PASSWORD_PATTERN="p[a-z]ss[w][o-z]rd[[:space:]]*=[[:space:]]*[''][^'\"]{8,}['']"
          TOKEN_PATTERN="tok[e]n[_-]?k[e]y[[:space:]]*=[[:space:]]*[''][a-zA-Z0-9_-]{10,}['']"
          AWS_ACCESS_PATTERN="aws[_-]?access[_-]?k[e]y[[:space:]]*=[[:space:]]*['']AKIA[a-zA-Z0-9]{16}['']"
          AWS_SECRET_PATTERN="aws[_-]?sec[r]et[_-]?k[e]y[[:space:]]*=[[:space:]]*[''][a-zA-Z0-9/+=]{40}['']"
          PRIVATE_KEY_PATTERN="-----BEGIN [A-Z ]*PRIVATE K[E]Y-----"
          
          SECRET_PATTERNS=(
            "$API_PATTERN"
            "$SECRET_PATTERN"
            "$PASSWORD_PATTERN"
            "$TOKEN_PATTERN"
            "$AWS_ACCESS_PATTERN"
            "$AWS_SECRET_PATTERN"
            "$PRIVATE_KEY_PATTERN"
          )

          SECRETS_FOUND=0
          for pattern in "${SECRET_PATTERNS[@]}"; do
            if grep -r -i -n "$pattern" src/ 2>/dev/null;
 then
              if [ $SECRETS_FOUND -eq 0 ]; then
                echo "🚨 **潜在的なシークレット漏洩が発見されました**" >> security_report.md
                echo "" >> security_report.md
              fi
              SECRETS_FOUND=1
              echo "- パターン検出: $pattern" >> security_report.md
            fi
          done

          if [ $SECRETS_FOUND -eq 0 ]; then
            echo "✅ **シークレットの漏洩は発見されませんでした**" >> security_report.md
          fi
          echo "" >> security_report.md

      - name: Financial system specific security checks
        run: |
          echo "### 💰 金融システム固有のセキュリティチェック" >> security_report.md
          echo "" >> security_report.md

          # SQL Injection チェック
          echo "#### SQL インジェクション対策" >> security_report.md
          if grep -r "execute.*%" src/ 2>/dev/null | grep -v "executemany\|execute.*VALUES.*?" > sql_injection_check.txt;
 then
            echo "⚠️ **潜在的なSQLインジェクション脆弱性**" >> security_report.md
            echo '```' >> security_report.md
            cat sql_injection_check.txt >> security_report.md
            echo '```' >> security_report.md
          else
            echo "✅ SQLインジェクション対策: 適切" >> security_report.md
          fi
          echo "" >> security_report.md

          # TOCTOU (Time-of-check to time-of-use) チェック
          echo "#### TOCTOU攻撃対策" >> security_report.md
          if grep -r -A 3 -B 3 "os\.path\.exists\|os\.path\.isfile" src/ | grep -A 5 -B 5 "open(" > toctou_check.txt && [ -s toctou_check.txt ]; then
            echo "⚠️ **潜在的なTOCTOU脆弱性（ファイルチェック後の操作）**" >> security_report.md
            echo '```python' >> security_report.md
            head -20 toctou_check.txt >> security_report.md
            echo '```' >> security_report.md
          else
            echo "✅ TOCTOU攻撃対策: 確認済み" >> security_report.md
          fi
          echo "" >> security_report.md

          # 暗号化実装チェック
          echo "#### 暗号化実装" >> security_report.md
          if grep -r -i "crypto\|encrypt\|decrypt\|hash" src/ > crypto_check.txt && [ -s crypto_check.txt ]; then
            if grep -r "hashlib\.md5\|hashlib\.sha1" src/ > weak_crypto.txt && [ -s weak_crypto.txt ]; then
              echo "⚠️ **弱い暗号化アルゴリズムの使用**" >> security_report.md
              echo '```' >> security_report.md
              cat weak_crypto.txt >> security_report.md
              echo '```' >> security_report.md
            else
              echo "✅ 暗号化実装: 適切" >> security_report.md
            fi
          else
            echo "ℹ️ 暗号化機能: 未検出" >> security_report.md
          fi
          echo "" >> security_report.md

          # 個人情報保護チェック
          echo "#### 個人情報保護" >> security_report.md
          PII_PATTERNS=("email" "phone" "address" "ssn" "credit.*card" "個人情報" "メールアドレス" "電話番号")
          PII_FOUND=0

          for pattern in "${PII_PATTERNS[@]}"; do
            if grep -r -i "$pattern.*log\|print.*$pattern" src/ 2>/dev/null > pii_check.txt && [ -s pii_check.txt ]; then
              if [ $PII_FOUND -eq 0 ]; then
                echo "🚨 **個人情報のログ出力の可能性**" >> security_report.md
                echo "" >> security_report.md
              fi
              SECRETS_FOUND=1
              echo "- パターン検出: $pattern" >> security_report.md
            fi
          done

          if [ $PII_FOUND -eq 0 ]; then
            echo "✅ **個人情報保護: 適切**" >> security_report.md
          fi

      - name: Run Custom Vulnerability Management System
        run: |
          echo "### 🎯 統合脆弱性管理システム" >> security_report.md
          echo "" >> security_report.md

          # カスタム脆弱性管理システム実行
          python -c '
import asyncio
import sys
import os
sys.path.insert(0, "src")

async def run_vulnerability_scan():
    try:
        from day_trade.security.vulnerability_manager import create_vulnerability_manager

        # 脆弱性管理システム初期化
        manager = create_vulnerability_manager("security/vulnerabilities")

        # 包括的スキャン実行
        scan_results = await manager.run_comprehensive_scan(".")

        # レポート生成
        report = await manager.generate_security_report()

        # 結果出力
        print("#### スキャン結果サマリー")
        summary = manager.get_vulnerability_summary()
        print(f"- **総脆弱性数**: {summary[\"total_vulnerabilities\"]}")
        print(f"- **期限超過**: {summary[\"overdue_count\"]}")
        print(f"- **重要な未解決**: {summary[\"critical_open\"]}")
        print("")

        if summary["by_severity"]:
            print("#### 重要度別内訳")
            for severity, count in summary["by_severity"].items():
                if count > 0:
                    emoji = {"CRITICAL": "🔴", "HIGH": "🟠", "MEDIUM": "🟡", "LOW": "🟢"}.get(severity, "⚫")
                    print(f"- {emoji} **{severity}**: {count}件")

        print("")

        # 推奨事項
        if report["recommendations"]:
            print("#### 推奨事項")
            for rec in report["recommendations"][:3]:  # 上位3件
                print(f"- {rec}")

        print("")
        print(f"📊 **レポートID**: {report[\"report_id\"]}")

        # クリーンアップ
        await manager.cleanup()

        return True

    except Exception as e:
        print(f"❌ **エラー**: {str(e)}")
        return False

success = asyncio.run(run_vulnerability_scan())
' >> security_report.md || echo "⚠️ カスタム脆弱性管理システムの実行に失敗しました" >> security_report.md

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            security_report.md
            safety_results.json
            bandit_results.json

      - name: Comment security report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const report = fs.readFileSync('security_report.md', 'utf8');

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🔒 セキュリティスキャン結果\n\n${report}\n\n---\n*自動生成されたセキュリティレポート - ${new Date().toISOString()}*`
              });
            } catch (error) {
              console.error('Error creating security issue:', error);

            }

      - name: Fail on critical security issues
        run: |
          # 高リスクの脆弱性や重要な問題がある場合は失敗
          if grep -q "🚨" security_report.md || grep -q "🔴 高リスク" security_report.md;
 then
            echo "Critical security issues found. Failing the workflow."
            exit 1
          fi

  license-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install pip-licenses
        run: |
          pip install pip-licenses
          pip install -r requirements.txt

      - name: Generate license report
        run: |
          echo "## 📄 ライセンス監査レポート" > license_report.md
          echo "" >> license_report.md
          echo "### 使用ライブラリとライセンス" >> license_report.md
          echo "" >> license_report.md

          pip-licenses --format=markdown --output-file=licenses.md
          cat licenses.md >> license_report.md

          echo "" >> license_report.md
          echo "### ライセンス適合性チェック" >> license_report.md

          # 問題のあるライセンスをチェック
          PROBLEMATIC_LICENSES=("GPL" "LGPL" "AGPL" "SSPL")
          ISSUES_FOUND=0

          for license in "${PROBLEMATIC_LICENSES[@]}"; do
            if pip-licenses | grep -i "$license" > problematic.txt && [ -s problematic.txt ]; then
              if [ $ISSUES_FOUND -eq 0 ]; then
                echo "⚠️ **注意が必要なライセンス**" >> license_report.md
                echo "" >> license_report.md
                ISSUES_FOUND=1
              fi
              echo "- $license ライセンスのライブラリが検出されました:" >> license_report.md
              cat problematic.txt >> license_report.md
            fi
          done

          if [ $ISSUES_FOUND -eq 0 ]; then
            echo "✅ **ライセンス適合性: 問題なし**" >> license_report.md
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-audit-report
          path: license_report.md

  container-security:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image for scanning
        run: |
          cat > Dockerfile.security << 'EOF'
          FROM python:3.12-slim

          WORKDIR /app
          COPY requirements.txt .
          RUN pip install --no-cache-dir -r requirements.txt

          COPY src/ ./src/

          EXPOSE 8000
          CMD ["python", "-m", "src.day_trade.main"]
          EOF

          docker build -t day-trade-security-scan -f Dockerfile.security .

      - name: Run container security scan
        run: |
          # Trivy for container vulnerability scanning
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

          echo "## 🐳 コンテナセキュリティスキャン" > container_security_report.md
          echo "" >> container_security_report.md

          trivy image --format json --output trivy_results.json day-trade-security-scan

          # 結果を解析してレポート生成
          python -c "
            import json
            try:
                with open('trivy_results.json') as f:
                    data = json.load(f)

                total_vulns = 0
                critical = 0
                high = 0
                medium = 0
                low = 0

                for result in data.get('Results', []):
                    for vuln in result.get('Vulnerabilities', []):
                        total_vulns += 1
                        severity = vuln.get('Severity', '')
                        if severity == 'CRITICAL':
                            critical += 1
                        elif severity == 'HIGH':
                            high += 1
                        elif severity == 'MEDIUM':
                            medium += 1
                        elif severity == 'LOW':
                            low += 1

                print('### 脆弱性サマリー')
                print(f'- **総脆弱性数**: {total_vulns}')
                print(f'- 🔴 **Critical**: {critical}')
                print(f'- 🟠 **High**: {high}')
                print(f'- 🟡 **Medium**: {medium}')
                print(f'- 🟢 **Low**: {low}')
                print('')

                if critical > 0:
                    print('🚨 **重大な脆弱性が発見されました。即座の対応が必要です。**')
                elif high > 0:
                    print('⚠️ **高リスクの脆弱性が発見されました。対応を検討してください。**')
                else:
                    print('✅ **重大な脆弱性は発見されませんでした。**')

            except Exception as e:
                print(f'エラー: {e}')
" >> container_security_report.md

      - name: Upload container scan results
        uses: actions/upload-artifact@v4
        with:
          name: container-security-scan
          path: |
            container_security_report.md
            trivy_results.json

  security-summary:
    runs-on: ubuntu-latest
    needs: [dependency-scan, license-audit, container-security]
    if: always()
    steps:
      - name: Download all security artifacts
        uses: actions/download-artifact@v4

      - name: Create comprehensive security summary
        run: |
          echo "# 🔒 包括的セキュリティ監査レポート" > security_summary.md
          echo "" >> security_summary.md
          echo "**実行日時**: $(date -u)" >> security_summary.md
          echo "**コミット**: ${GITHUB_SHA:0:7}" >> security_summary.md
          echo "**ブランチ**: ${GITHUB_REF}" >> security_summary.md
          echo "" >> security_summary.md

          # 各レポートを統合
          for report_dir in */; do
            if [ -d "$report_dir" ]; then
              echo "## 📋 $(basename "$report_dir")" >> security_summary.md
              echo "" >> security_summary.md

              for file in "$report_dir"/*.md; do
                if [ -f "$file" ]; then
                  cat "$file" >> security_summary.md

                fi
              done
            fi
          done

          echo "---" >> security_summary.md
          echo "*このレポートは自動生成されました*" >> security_summary.md

      - name: Create security issue if problems found
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            try {
              const summary = fs.readFileSync('security_summary.md', 'utf8');

              // 重要な問題があるかチェック
              const hasCriticalIssues = summary.includes('🚨') ||
                                       summary.includes('🔴 高リスク') ||
                                       summary.includes('Critical');

              if (hasCriticalIssues) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `🚨 セキュリティ監査で重要な問題を検出 - ${new Date().toISOString().split('T')[0]}`,
                  body: summary,
                  labels: ['security', 'high-priority', 'automated'],
                  assignees: ['kaenozu']
                });
              }

            } catch (error) {

              console.error('Error creating security issue:', error);

            }

      - name: Upload comprehensive security report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-security-report
          path: security_summary.md
