name: Optimized CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  statuses: write
  checks: write

env:
  PYTHON_VERSION: '3.11'
  CACHE_VERSION: v3

jobs:
  # 変更検出ジョブ - 変更されたファイルに基づいてジョブをスキップ
  changes:
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.changes.outputs.python }}
      docs: ${{ steps.changes.outputs.docs }}
      config: ${{ steps.changes.outputs.config }}
      tests: ${{ steps.changes.outputs.tests }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            python:
              - 'src/**/*.py'
              - 'tests/**/*.py'
              - '*.py'
              - 'pyproject.toml'
              - 'requirements*.txt'
            docs:
              - '**/*.md'
              - 'docs/**'
            config:
              - '.github/**'
              - '.pre-commit-config.yaml'
              - '*.toml'
              - '*.yml'
              - '*.yaml'
            tests:
              - 'tests/**'

  # 高速コード品質チェック
  code-quality:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true' || needs.changes.outputs.config == 'true'
    name: 🔍 Code Quality (Fast)

    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python (cached)
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ env.CACHE_VERSION }}-${{ hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            pre-commit-${{ env.CACHE_VERSION }}-

      - name: Install dependencies (minimal)
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit

      - name: Run pre-commit (changed files only)
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "🔍 Running pre-commit on changed files only..."
            # Fetch base branch for comparison
            git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
            pre-commit run --from-ref ${{ github.base_ref }} --to-ref HEAD
          else
            echo "🔍 Running pre-commit on all files..."
            pre-commit run --all-files
          fi

  # 並列テスト実行 (マトリックス最適化)
  test:
    runs-on: ubuntu-latest
    needs: [changes, code-quality]
    if: needs.changes.outputs.python == 'true' || needs.changes.outputs.tests == 'true'
    name: 🧪 Tests
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11']  # 効率化：メインバージョンのみ
        test-group: ['unit', 'integration']  # テストを分割実行

    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies (cached)
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]

      - name: Run tests (${{ matrix.test-group }})
        run: |
          if [ "${{ matrix.test-group }}" = "unit" ]; then
            echo "🧪 Running unit tests..."
            pytest tests/ -v --tb=short --disable-warnings \
                   --ignore=tests/integration/ \
                   --cov=src/day_trade \
                   --cov-report=xml \
                   --cov-report=html \
                   --cov-report=term-missing \
                   --cov-report=json \
                   --cov-fail-under=20
          else
            echo "🔗 Running integration tests..."
            pytest tests/integration/ -v --tb=short -x --disable-warnings || echo "Integration tests not yet implemented"
          fi

      - name: Upload coverage to Codecov
        if: matrix.test-group == 'unit'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: py${{ matrix.python-version }}
        continue-on-error: true

      - name: Upload coverage reports as artifacts
        if: matrix.test-group == 'unit'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-py${{ matrix.python-version }}
          path: |
            coverage.xml
            coverage.json
            htmlcov/
          retention-days: 30
        continue-on-error: true

  # 高速セキュリティチェック
  security:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true'
    name: 🔒 Security Scan

    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit[toml]

      - name: Run security checks (parallel)
        run: |
          echo "🔒 Running security scans..."
          # 並列実行でセキュリティチェック
          safety check --json > safety-report.json &
          bandit -r src/ -f json -o bandit-report.json &
          wait

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: "*-report.json"
          retention-days: 30

  # 条件付きビルドジョブ
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped') && (needs.security.result == 'success' || needs.security.result == 'skipped')
    name: 📦 Build

    steps:
      - name: Checkout (shallow)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          echo "📦 Building package..."
          python -m build

      - name: Check package
        run: |
          echo "✅ Checking package..."
          python -m twine check dist/*

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
          retention-days: 90

  # 統合チェック (PRのみ)
  integration:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    name: 🔗 Integration Check

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/

      - name: Test installation
        run: |
          echo "🔗 Testing package installation..."
          pip install dist/*.whl
          python -c "import day_trade; print('Package installed successfully')"

  # まとめジョブ (効率化)
  ci-success:
    runs-on: ubuntu-latest
    needs: [changes, code-quality, test, security, build]
    if: always()
    name: ✅ CI Status

    steps:
      - name: Check results
        run: |
          echo "📊 CI Results Summary:"
          echo "Changes detected: python=${{ needs.changes.outputs.python }}, tests=${{ needs.changes.outputs.tests }}"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Build: ${{ needs.build.result }}"

          # 成功条件の判定
          if [[
            ("${{ needs.code-quality.result }}" == "success" || "${{ needs.code-quality.result }}" == "skipped") &&
            ("${{ needs.test.result }}" == "success" || "${{ needs.test.result }}" == "skipped") &&
            ("${{ needs.security.result }}" == "success" || "${{ needs.security.result }}" == "skipped") &&
            ("${{ needs.build.result }}" == "success" || "${{ needs.build.result }}" == "skipped")
          ]]; then
            echo "✅ All CI checks passed!"
            exit 0
          else
            echo "❌ Some CI checks failed"
            exit 1
          fi

  # 自動デプロイ (mainブランチのみ)
  deploy:
    runs-on: ubuntu-latest
    needs: [ci-success, integration]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    name: 🚀 Deploy

    steps:
      - name: Deploy placeholder
        run: |
          echo "🚀 Deployment ready"
          echo "TODO: Implement actual deployment logic"
