name: Documentation Automation

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'docs/**'
      - 'README.md'
      - 'pyproject.toml'
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'docs/**'
      - 'README.md'
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  generate-api-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install sphinx sphinx-rtd-theme sphinx-autodoc-typehints
          pip install pdoc3 pydoc-markdown

      - name: Generate API documentation
        run: |
          mkdir -p docs/api

          # Sphinxによる自動ドキュメント生成
          sphinx-quickstart -q --sep \
            --project="Day Trade System" \
            --author="kaenozu" \
            --release="$(git describe --tags --always)" \
            --language="ja" \
            --extensions="sphinx.ext.autodoc,sphinx.ext.viewcode,sphinx.ext.napoleon,sphinx_autodoc_typehints" \
            docs/sphinx

          # conf.pyの設定
          cat >> docs/sphinx/source/conf.py << 'EOF'

          import os
          import sys
          sys.path.insert(0, os.path.abspath('../../../src'))

          html_theme = 'sphinx_rtd_theme'
          html_theme_options = {
              'canonical_url': '',
              'analytics_id': '',
              'logo_only': False,
              'display_version': True,
              'prev_next_buttons_location': 'bottom',
              'style_external_links': False,
              'vcs_pageview_mode': '',
              'style_nav_header_background': 'white',
              'collapse_navigation': True,
              'sticky_navigation': True,
              'navigation_depth': 4,
              'includehidden': True,
              'titles_only': False
          }

          autodoc_default_options = {
              'members': True,
              'member-order': 'bysource',
              'special-members': '__init__',
              'undoc-members': True,
              'exclude-members': '__weakref__'
          }
          EOF

          # モジュール構造を分析してrstファイルを生成
          python -c "
          import os
          import pkgutil
          import importlib
          import sys
          sys.path.insert(0, 'src')

          def generate_module_rst(module_name, output_dir):
              try:
                  module = importlib.import_module(module_name)

                  rst_content = f'''
          {module_name}
          {'=' * len(module_name)}

          .. automodule:: {module_name}
             :members:
             :undoc-members:
             :show-inheritance:
          '''

                  # サブモジュールも含める
                  if hasattr(module, '__path__'):
                      for importer, modname, ispkg in pkgutil.iter_modules(module.__path__, module.__name__ + '.'):
                          rst_content += f'''

          {modname}
          {'-' * len(modname)}

          .. automodule:: {modname}
             :members:
             :undoc-members:
             :show-inheritance:
          '''

                  os.makedirs(output_dir, exist_ok=True)
                  with open(f'{output_dir}/{module_name.replace(\".\", \"_\")}.rst', 'w') as f:
                      f.write(rst_content.strip())

                  return True
              except Exception as e:
                  print(f'Failed to generate docs for {module_name}: {e}')
                  return False

          # 主要なモジュールのドキュメント生成
          modules = [
              'day_trade.ml',
              'day_trade.core',
              'day_trade.api',
              'day_trade.data',
              'day_trade.models',
              'day_trade.utils',
              'day_trade.analysis'
          ]

          for module in modules:
              generate_module_rst(module, 'docs/sphinx/source')

          # index.rstの更新
          index_content = '''
          Day Trade System Documentation
          =============================

          Welcome to the Day Trade System documentation!

          .. toctree::
             :maxdepth: 2
             :caption: Contents:

             day_trade_ml
             day_trade_core
             day_trade_api
             day_trade_data
             day_trade_models
             day_trade_utils
             day_trade_analysis

          Indices and tables
          ==================

          * :ref:\`genindex\`
          * :ref:\`modindex\`
          * :ref:\`search\`
          '''

          with open('docs/sphinx/source/index.rst', 'w') as f:
              f.write(index_content.strip())
          "

          # Sphinx build
          cd docs/sphinx && make html

      - name: Generate README updates
        run: |
          # プロジェクト統計の更新
          python -c "
          import os
          import subprocess
          from datetime import datetime

          # プロジェクト統計の収集
          try:
              # ファイル数
              py_files = subprocess.check_output(['find', 'src/', '-name', '*.py']).decode().strip().count('\n') + 1
              test_files = subprocess.check_output(['find', 'tests/', '-name', '*.py'], stderr=subprocess.DEVNULL).decode().strip().count('\n') if os.path.exists('tests') else 0

              # コード行数
              lines_output = subprocess.check_output(['find', 'src/', '-name', '*.py', '-exec', 'wc', '-l', '{}', '+'], stderr=subprocess.DEVNULL).decode()
              total_lines = sum(int(line.strip().split()[0]) for line in lines_output.split('\n')[:-2] if line.strip())

              # Git統計
              commits = subprocess.check_output(['git', 'rev-list', '--count', 'HEAD']).decode().strip()

              # 最新リリース
              latest_tag = subprocess.check_output(['git', 'describe', '--tags', '--abbrev=0'], stderr=subprocess.DEVNULL).decode().strip()

              stats = f'''
          ## 📊 プロジェクト統計

          - **Pythonファイル数**: {py_files}
          - **テストファイル数**: {test_files}
          - **総コード行数**: {total_lines:,}
          - **総コミット数**: {commits}
          - **最新バージョン**: {latest_tag}
          - **最終更新**: {datetime.now().strftime('%Y-%m-%d')}
          '''

              # READMEの統計セクションを更新
              with open('README.md', 'r', encoding='utf-8') as f:
                  content = f.read()

              # 既存の統計セクションを置換
              import re
              pattern = r'## 📊 プロジェクト統計.*?(?=\n## |\n#[^#]|\Z)'

              if re.search(pattern, content, re.DOTALL):
                  content = re.sub(pattern, stats.strip(), content, flags=re.DOTALL)
              else:
                  content += '\n' + stats

              with open('README.md', 'w', encoding='utf-8') as f:
                  f.write(content)

              print('README.md updated with latest statistics')

          except Exception as e:
              print(f'Error updating README statistics: {e}')
          "

      - name: Generate machine learning model documentation
        run: |
          mkdir -p docs/ml

          python -c "
          import sys
          import json
          import inspect
          from datetime import datetime
          sys.path.insert(0, 'src')

          # 機械学習モデルの文書化
          try:
              from day_trade.ml.feature_pipeline import FeaturePipeline
              from day_trade.ml.feature_store import FeatureStore

              # 特徴量パイプラインドキュメント
              pipeline_doc = f'''
          # 🤖 機械学習モデルドキュメント

          **生成日時**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

          ## 特徴量パイプライン

          ### FeaturePipeline クラス

          {inspect.getdoc(FeaturePipeline) or 'ドキュメントなし'}

          #### 主要メソッド
          '''

              # クラスのメソッドを文書化
              for name, method in inspect.getmembers(FeaturePipeline, predicate=inspect.isfunction):
                  if not name.startswith('_'):
                      doc = inspect.getdoc(method) or 'ドキュメントなし'
                      signature = inspect.signature(method)
                      pipeline_doc += f'''

          ##### {name}{signature}

          {doc}
          '''

              # 特徴量ストアドキュメント
              pipeline_doc += f'''

          ## 特徴量ストア

          ### FeatureStore クラス

          {inspect.getdoc(FeatureStore) or 'ドキュメントなし'}

          #### 主要メソッド
          '''

              for name, method in inspect.getmembers(FeatureStore, predicate=inspect.isfunction):
                  if not name.startswith('_'):
                      doc = inspect.getdoc(method) or 'ドキュメントなし'
                      signature = inspect.signature(method)
                      pipeline_doc += f'''

          ##### {name}{signature}

          {doc}
          '''

              with open('docs/ml/models.md', 'w', encoding='utf-8') as f:
                  f.write(pipeline_doc)

              print('Machine learning documentation generated')

          except Exception as e:
              print(f'Error generating ML docs: {e}')
          "

      - name: Generate database schema documentation
        run: |
          mkdir -p docs/database

          python -c "
          import sys
          import sqlite3
          import tempfile
          from datetime import datetime
          sys.path.insert(0, 'src')

          # データベーススキーマの文書化
          try:
              # テスト用のデータベースを作成してスキーマを抽出
              with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as tmp:
                  conn = sqlite3.connect(tmp.name)
                  cursor = conn.cursor()

                  # 既存のマイグレーションがあれば実行
                  try:
                      from day_trade.models.database import init_database
                      init_database(tmp.name)
                  except:
                      pass

                  # テーブル一覧を取得
                  cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table'\")
                  tables = cursor.fetchall()

                  schema_doc = f'''
          # 🗄️ データベーススキーマ

          **生成日時**: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
          **データベース**: SQLite

          ## テーブル一覧
          '''

                  for table in tables:
                      table_name = table[0]
                      if table_name == 'sqlite_sequence':
                          continue

                      schema_doc += f'''

          ### {table_name}

          '''

                      # テーブル構造を取得
                      cursor.execute(f'PRAGMA table_info({table_name})')
                      columns = cursor.fetchall()

                      if columns:
                          schema_doc += '''| カラム名 | 型 | NULL許可 | デフォルト値 | 主キー |
          |----------|----|---------|--------------|---------|
          '''
                          for col in columns:
                              cid, name, type_, notnull, default, pk = col
                              null_ok = '❌' if notnull else '✅'
                              is_pk = '🔑' if pk else ''
                              default_val = default if default is not None else ''
                              schema_doc += f'| {name} | {type_} | {null_ok} | {default_val} | {is_pk} |\n'

                      # インデックス情報
                      cursor.execute(f\"SELECT name FROM sqlite_master WHERE type='index' AND tbl_name='{table_name}'\")
                      indexes = cursor.fetchall()
                      if indexes:
                          schema_doc += f'''

          **インデックス**: {', '.join([idx[0] for idx in indexes if not idx[0].startswith('sqlite_')])}
          '''

                  conn.close()

                  with open('docs/database/schema.md', 'w', encoding='utf-8') as f:
                      f.write(schema_doc)

                  print('Database schema documentation generated')

          except Exception as e:
              print(f'Error generating database docs: {e}')
          "

      - name: Generate troubleshooting guide
        run: |
          mkdir -p docs/troubleshooting

          # よくある問題とトラブルシューティングガイドを生成
          cat > docs/troubleshooting/common-issues.md << 'EOF'
          # 🔧 トラブルシューティングガイド

          ## よくある問題と解決方法

          ### インストール関連

          #### 問題: 依存関係のインストールに失敗する

          **症状**:
          ```
          ERROR: Could not install packages due to an EnvironmentError
          ```

          **解決方法**:
          ```bash
          # 1. pip を最新版にアップデート
          python -m pip install --upgrade pip

          # 2. システムレベルの依存関係をインストール (Ubuntu/Debian)
          sudo apt-get update
          sudo apt-get install python3-dev build-essential

          # 3. 仮想環境を使用
          python -m venv venv
          source venv/bin/activate  # Linux/Mac
          # または
          venv\Scripts\activate  # Windows
          pip install -r requirements.txt
          ```

          ### パフォーマンス関連

          #### 問題: 特徴量生成が遅い

          **症状**: 特徴量生成に想定以上の時間がかかる

          **解決方法**:
          ```python
          # 1. バッチサイズを調整
          pipeline = FeaturePipeline()
          features = pipeline.batch_generate_features(data, batch_size=500)  # デフォルトより大きく

          # 2. キャッシュを有効化
          from day_trade.ml.feature_store import FeatureStore
          store = FeatureStore(cache_size=1000)  # キャッシュサイズを増やす

          # 3. 並列処理の設定確認
          import os
          os.environ['NUMBA_NUM_THREADS'] = '4'  # CPU コア数に応じて調整
          ```

          #### 問題: メモリ使用量が多い

          **症状**: システムがメモリ不足でクラッシュする

          **解決方法**:
          ```python
          # 1. バッチサイズを小さくする
          features = pipeline.batch_generate_features(data, batch_size=100)

          # 2. 明示的にガベージコレクションを実行
          import gc
          gc.collect()

          # 3. データを分割して処理
          chunk_size = 1000
          for i in range(0, len(data), chunk_size):
              chunk = data[i:i+chunk_size]
              process_chunk(chunk)
          ```

          ### データベース関連

          #### 問題: データベース接続エラー

          **症状**:
          ```
          sqlite3.OperationalError: database is locked
          ```

          **解決方法**:
          ```python
          # 1. 接続プールを使用
          from sqlalchemy import create_engine
          engine = create_engine('sqlite:///data/trading.db', pool_pre_ping=True)

          # 2. WALモードを有効化
          import sqlite3
          conn = sqlite3.connect('data/trading.db')
          conn.execute('PRAGMA journal_mode=WAL;')
          ```

          ### API関連

          #### 問題: 外部APIからのデータ取得に失敗する

          **症状**: レート制限やタイムアウトエラー

          **解決方法**:
          ```python
          # 1. リトライ機能を実装
          import time
          import requests
          from requests.adapters import HTTPAdapter
          from urllib3.util.retry import Retry

          session = requests.Session()
          retry_strategy = Retry(
              total=3,
              backoff_factor=1,
              status_forcelist=[429, 500, 502, 503, 504],
          )
          adapter = HTTPAdapter(max_retries=retry_strategy)
          session.mount("http://", adapter)
          session.mount("https://", adapter)

          # 2. レート制限を守る
          time.sleep(0.1)  # リクエスト間に遅延を入れる
          ```

          ## ログ分析

          ### デバッグログの有効化

          ```python
          import logging
          logging.basicConfig(level=logging.DEBUG)
          ```

          ### パフォーマンス監視

          ```python
          import cProfile
          import pstats

          # プロファイリング実行
          cProfile.run('your_function()', 'profile_stats')

          # 結果分析
          stats = pstats.Stats('profile_stats')
          stats.sort_stats('cumulative')
          stats.print_stats(10)  # 上位10件表示
          ```

          ## サポート情報

          問題が解決しない場合は、以下の情報とともにイシューを作成してください：

          1. **環境情報**:
             - OS: `uname -a` (Linux/Mac) または `systeminfo` (Windows)
             - Python バージョン: `python --version`
             - 依存関係: `pip freeze`

          2. **エラーログ**:
             - 完全なスタックトレース
             - 関連するログファイル

          3. **再現手順**:
             - 問題を再現するための最小限のコード
             - 使用したデータの例
          EOF

          echo "Troubleshooting guide generated"

      - name: Create documentation index
        run: |
          # メインドキュメントインデックスの作成
          cat > docs/index.md << 'EOF'
          # 📚 Day Trade System Documentation

          Welcome to the comprehensive documentation for the Day Trade System!

          ## 🗂️ Documentation Sections

          ### 🤖 [Machine Learning Models](ml/models.md)
          - Feature Pipeline documentation
          - Feature Store architecture
          - Model performance metrics

          ### 🗄️ [Database Schema](database/schema.md)
          - Table structures
          - Relationships and indexes
          - Migration history

          ### 🔧 [Troubleshooting Guide](troubleshooting/common-issues.md)
          - Common problems and solutions
          - Performance optimization tips
          - Debugging techniques

          ### 📖 [API Reference](api/)
          - Auto-generated API documentation
          - Code examples
          - Module references

          ## 🚀 Quick Start

          1. **Installation**:
             ```bash
             git clone https://github.com/kaenozu/day_trade.git
             cd day_trade
             pip install -r requirements.txt
             ```

          2. **Configuration**:
             ```bash
             cp config/settings.example.json config/settings.json
             # Edit settings.json with your configuration
             ```

          3. **Run**:
             ```bash
             python -m src.day_trade.main
             ```

          ## 📊 Project Overview

          This system provides:
          - ⚡ High-performance feature generation (77.6x speedup)
          - 🔒 Enterprise-grade security
          - 📈 Real-time trading algorithms
          - 🤖 Machine learning model pipeline
          - 📊 Comprehensive monitoring and analytics

          ## 🔄 Continuous Updates

          This documentation is automatically updated on every code change.
          Last updated: $(date)

          ## 💬 Support

          - [GitHub Issues](https://github.com/kaenozu/day_trade/issues)
          - [Troubleshooting Guide](troubleshooting/common-issues.md)
          EOF

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generated-documentation
          path: |
            docs/
            README.md

      - name: Commit documentation updates
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          git add docs/ README.md

          if git diff --staged --quiet; then
            echo "No documentation changes to commit"
          else
            git commit -m "docs: automatic documentation update

            - Generated API documentation
            - Updated README statistics
            - Created ML model documentation
            - Generated database schema docs
            - Updated troubleshooting guide

            🤖 Generated with [Claude Code](https://claude.ai/code)

            Co-Authored-By: Claude <noreply@anthropic.com>"

            git push origin main
          fi

  deploy-docs:
    runs-on: ubuntu-latest
    needs: generate-api-docs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - name: Download documentation artifacts
        uses: actions/download-artifact@v4
        with:
          name: generated-documentation

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v3

      - name: Build documentation site
        run: |
          mkdir -p _site
          cp -r docs/* _site/

          # シンプルなHTMLインデックスを作成
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="ja">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Day Trade System Documentation</title>
              <style>
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 40px; }
                  .container { max-width: 800px; margin: 0 auto; }
                  h1 { color: #0366d6; }
                  .section { margin: 20px 0; padding: 20px; border: 1px solid #e1e4e8; border-radius: 6px; }
                  a { color: #0366d6; text-decoration: none; }
                  a:hover { text-decoration: underline; }
                  .emoji { font-size: 1.2em; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1><span class="emoji">📚</span> Day Trade System Documentation</h1>

                  <div class="section">
                      <h2><span class="emoji">🤖</span> Machine Learning</h2>
                      <p><a href="ml/models.md">Feature Pipeline & Model Documentation</a></p>
                  </div>

                  <div class="section">
                      <h2><span class="emoji">🗄️</span> Database</h2>
                      <p><a href="database/schema.md">Schema Documentation</a></p>
                  </div>

                  <div class="section">
                      <h2><span class="emoji">🔧</span> Troubleshooting</h2>
                      <p><a href="troubleshooting/common-issues.md">Common Issues & Solutions</a></p>
                  </div>

                  <div class="section">
                      <h2><span class="emoji">📖</span> API Reference</h2>
                      <p><a href="sphinx/build/html/index.html">Auto-generated API Docs</a></p>
                  </div>

                  <footer style="margin-top: 40px; text-align: center; color: #586069;">
                      <p>Documentation automatically generated by GitHub Actions</p>
                      <p>Last updated: $(date)</p>
                  </footer>
              </div>
          </body>
          </html>
          EOF

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v2
        with:
          path: _site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
