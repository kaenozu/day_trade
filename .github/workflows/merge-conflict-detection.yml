name: Merge Conflict Detection

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  conflict-detection:
    runs-on: ubuntu-latest
    name: Detect merge conflicts

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Fetch all branches
        run: |
          git fetch --all
          echo "🔍 Available branches:"
          git branch -r

      - name: Check for merge conflicts with main
        id: conflict_check
        run: |
          set -e

          echo "🎯 Checking merge conflicts for branch: ${{ github.head_ref || github.ref_name }}"
          echo "📋 Base branch: ${{ github.base_ref || 'main' }}"

          # Get the correct branch names
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CURRENT_BRANCH="${{ github.head_ref }}"
            BASE_BRANCH="${{ github.base_ref }}"
          else
            CURRENT_BRANCH="${{ github.ref_name }}"
            BASE_BRANCH="main"
          fi

          echo "current_branch=$CURRENT_BRANCH" >> $GITHUB_ENV
          echo "base_branch=$BASE_BRANCH" >> $GITHUB_ENV

          # Skip conflict check if we're on the base branch
          if [ "$CURRENT_BRANCH" = "$BASE_BRANCH" ]; then
            echo "⏭️ Skipping conflict check - currently on base branch"
            echo "conflict_detected=false" >> $GITHUB_ENV
            echo "skip_check=true" >> $GITHUB_ENV
            exit 0
          fi

          # Ensure we have the latest changes
          git fetch origin $BASE_BRANCH:$BASE_BRANCH || git fetch origin $BASE_BRANCH
          git fetch origin $CURRENT_BRANCH:$CURRENT_BRANCH || git checkout $CURRENT_BRANCH

          # Create a temporary branch for merge test
          TEMP_BRANCH="temp-merge-test-$(date +%s)"
          git checkout -b $TEMP_BRANCH "origin/$CURRENT_BRANCH"

          echo "🔄 Attempting merge of $BASE_BRANCH into $CURRENT_BRANCH..."

          # Try to merge - capture both stdout and stderr
          if git merge origin/$BASE_BRANCH --no-commit --no-ff 2>&1 | tee merge_output.log; then
            echo "✅ No merge conflicts detected"
            echo "conflict_detected=false" >> $GITHUB_ENV
            git merge --abort 2>/dev/null || true
          else
            echo "⚠️ Merge conflicts detected!"
            echo "conflict_detected=true" >> $GITHUB_ENV

            # Get list of conflicted files
            CONFLICTED_FILES=$(git diff --name-only --diff-filter=U 2>/dev/null || echo "Could not determine conflicted files")
            echo "conflicted_files<<EOF" >> $GITHUB_ENV
            echo "$CONFLICTED_FILES" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV

            # Save merge output for later use
            echo "merge_output<<EOF" >> $GITHUB_ENV
            cat merge_output.log >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV

            # Show conflict details
            echo "📋 Conflicted files:"
            echo "$CONFLICTED_FILES"

            git merge --abort 2>/dev/null || true
          fi

          # Cleanup
          git checkout $CURRENT_BRANCH 2>/dev/null || git checkout -
          git branch -D $TEMP_BRANCH 2>/dev/null || true

      - name: Check for potential conflicts in common areas
        if: env.skip_check != 'true'
        id: pattern_check
        run: |
          echo "🔍 Checking for potential conflict patterns..."

          # Check for common conflict markers that might have been committed
          CONFLICT_MARKERS=$(grep -r '<<<<<<< ' . --exclude-dir=.git --exclude-dir=node_modules --exclude-dir=scripts --exclude-dir=.github --exclude="*.log" || echo "")

          if [ -n "$CONFLICT_MARKERS" ]; then
            echo "⚠️ Found potential conflict markers in files:"
            echo "$CONFLICT_MARKERS"
            echo "conflict_markers_found=true" >> $GITHUB_ENV
            echo "conflict_markers<<EOF" >> $GITHUB_ENV
            echo "$CONFLICT_MARKERS" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "✅ No conflict markers found"
            echo "conflict_markers_found=false" >> $GITHUB_ENV
          fi

      - name: Analyze file change patterns
        if: env.skip_check != 'true' && github.event_name == 'pull_request'
        id: change_analysis
        run: |
          echo "📊 Analyzing change patterns..."

          # Get changed files in this PR
          CHANGED_FILES=$(git diff --name-only origin/${{ env.base_branch }}..HEAD || echo "")

          # Check for changes in sensitive areas
          HIGH_RISK_CHANGES=""

          # Configuration files
          if echo "$CHANGED_FILES" | grep -E "\.(yml|yaml|json|ini|cfg|conf)$"; then
            HIGH_RISK_CHANGES="$HIGH_RISK_CHANGES\n📁 Configuration files"
          fi

          # Database migration files
          if echo "$CHANGED_FILES" | grep -E "migration|schema|database"; then
            HIGH_RISK_CHANGES="$HIGH_RISK_CHANGES\n🗄️ Database-related files"
          fi

          # CI/CD files
          if echo "$CHANGED_FILES" | grep -E "\.github|\.gitlab|\.circleci|Dockerfile|docker-compose"; then
            HIGH_RISK_CHANGES="$HIGH_RISK_CHANGES\n🔧 CI/CD configuration"
          fi

          # Core system files
          if echo "$CHANGED_FILES" | grep -E "(main|core|base|foundation)\.(py|js|ts)$"; then
            HIGH_RISK_CHANGES="$HIGH_RISK_CHANGES\n⚡ Core system files"
          fi

          if [ -n "$HIGH_RISK_CHANGES" ]; then
            echo "high_risk_changes=true" >> $GITHUB_ENV
            echo "high_risk_areas<<EOF" >> $GITHUB_ENV
            echo "$HIGH_RISK_CHANGES" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "high_risk_changes=false"
          fi

          echo "changed_files<<EOF" >> $GITHUB_ENV
          echo "$CHANGED_FILES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Comment on PR - Conflicts Detected
        if: env.conflict_detected == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const conflictedFiles = process.env.conflicted_files || 'Unknown files';
            const mergeOutput = process.env.merge_output || 'No detailed output available';

            const body = `## ⚠️ マージコンフリクトが検出されました

            このプルリクエストを 
${{ env.base_branch }}
 ブランチにマージする際にコンフリクトが発生します。

            ### 🔧 コンフリクトの解決手順:

            1. **ローカルで最新の変更を取得:**
               ```bash
               git checkout ${{ env.current_branch }}
               git fetch origin
               git pull origin ${{ env.current_branch }}
               ```

            2. **ベースブランチの最新変更をマージ:**
               ```bash
               git merge origin/${{ env.base_branch }}
               ```

            3. **コンフリクトを手動で解決:**
               ```bash
               # エディターでコンフリクトファイルを編集
               # <<<<<<< HEAD, =======, >>>>>>> マーカーを削除
               git add <解決したファイル名>
               ```

            4. **マージをコミット:**
               ```bash
               git commit -m "Resolve merge conflicts with ${{ env.base_branch }}"
               git push origin ${{ env.current_branch }}
               ```

            ### 📋 コンフリクトファイル:
            ```
            ${conflictedFiles}
            ```

            ### 🔍 詳細出力:
            <details>
            <summary>マージ試行の詳細ログ</summary>

            ```
            ${mergeOutput}
            ```
            </details>

            コンフリクトが解決されると、このチェックは自動的に再実行されます。

            ---
            🤖 **自動生成されたコメント** - マージコンフリクト検知システム
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Comment on PR - Conflict Markers Found
        if: env.conflict_markers_found == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const conflictMarkers = process.env.conflict_markers || 'No details available';

            const body = `## ⚠️ コンフリクトマーカーが検出されました

            コード内にマージコンフリクトマーカー (\`<<<<<<<
, \`=======
, \`>>>>>>>\`) が残っています。

            ### 🔍 検出された箇所:
            ```
            ${conflictMarkers}
            ```

            ### 🔧 修正方法:
            1. 上記ファイルを開いて、コンフリクトマーカーを探してください
            2. 適切なコードを選択し、マーカーを削除してください
            3. 変更をコミット・プッシュしてください

            ---
            🤖 **自動生成されたコメント** - マージコンフリクト検知システム
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Comment on PR - High Risk Changes
        if: env.high_risk_changes == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const highRiskAreas = process.env.high_risk_areas || 'No details available';
            const changedFiles = process.env.changed_files || 'No files listed';

            const body = `## 🚨 高リスク領域の変更が検出されました

            このプルリクエストは以下の重要な領域に変更を含んでいます：

            ${highRiskAreas}

            ### 📋 変更されたファイル:
            <details>
            <summary>変更ファイル一覧</summary>

            ```
            ${changedFiles}
            ```
            </details>

            ### ⚠️ 注意事項:
            - より詳細なレビューが推奨されます
            - 可能であれば段階的なマージを検討してください
            - テスト環境での十分な検証を行ってください

            ---
            🤖 **自動生成されたコメント** - マージコンフリクト検知システム
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

      - name: Set status check result
        if: env.skip_check != 'true'
        run: |
          if [ "${{ env.conflict_detected }}" = "true" ]; then
            echo "❌ Merge conflicts detected - failing check"
            exit 1
          elif [ "${{ env.conflict_markers_found }}" = "true" ]; then
            echo "❌ Conflict markers found in code - failing check"
            exit 1
          else
            echo "✅ No merge conflicts detected"
            echo "✅ No conflict markers found in code"
          fi

      - name: Success notification
        if: success()
        run: |
          if [ "${{ env.skip_check }}" = "true" ]; then
            echo "⏭️ Conflict check skipped (base branch)"
          else
            echo "✅ Merge conflict detection completed successfully!"
            echo "🎉 このブランチは ${{ env.base_branch }} に安全にマージできます"
          fi