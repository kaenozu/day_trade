name: 🔍 Conflict Detection & Resolution

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  # ⚡ リアルタイムコンフリクト検出
  detect-conflicts:
    runs-on: ubuntu-latest
    name: 🔍 Detect Conflicts
    outputs:
      has-conflicts: ${{ steps.conflict-check.outputs.has-conflicts }}
      conflict-files: ${{ steps.conflict-check.outputs.conflict-files }}

    steps:
      - name: 📥 Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: 🔍 Advanced conflict detection
        id: conflict-check
        run: |
          echo "🔍 Checking for merge conflicts..."

          # ベースブランチの最新を取得
          git fetch origin ${{ github.event.pull_request.base.ref }}
          base_branch="origin/${{ github.event.pull_request.base.ref }}"

          # マージのテスト（dry-run）
          echo "Testing merge with $base_branch..."
          if git merge-tree $(git merge-base HEAD $base_branch) HEAD $base_branch | grep -q "<<<<<<< "; then
            echo "❌ Merge conflicts detected!"

            # コンフリクトファイルを特定
            conflict_files=$(git merge-tree $(git merge-base HEAD $base_branch) HEAD $base_branch | grep -E "<<<<<<< |======= |>>>>>>> " -B5 -A5 | grep "^\+\+\+ " | sed 's/^\+\+\+ b\///' | sort -u | tr '\n' ',' | sed 's/,$//')

            echo "has-conflicts=true" >> $GITHUB_OUTPUT
            echo "conflict-files=$conflict_files" >> $GITHUB_OUTPUT

            echo "📋 Conflicted files: $conflict_files"
          else
            echo "✅ No merge conflicts detected"
            echo "has-conflicts=false" >> $GITHUB_OUTPUT
            echo "conflict-files=" >> $GITHUB_OUTPUT
          fi

  # 🔧 自動コンフリクト解決の提案
  suggest-resolution:
    runs-on: ubuntu-latest
    needs: detect-conflicts
    if: needs.detect-conflicts.outputs.has-conflicts == 'true'
    name: 🔧 Suggest Resolution

    steps:
      - name: 📥 Checkout with full history
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: 🔧 Generate resolution suggestions
        id: suggestions
        run: |
          echo "🔧 Generating conflict resolution suggestions..."

          git fetch origin ${{ github.event.pull_request.base.ref }}
          base_branch="origin/${{ github.event.pull_request.base.ref }}"

          # コンフリクトの詳細分析
          echo "## 🔍 Conflict Analysis" > conflict-report.md
          echo "" >> conflict-report.md
          echo "**Base branch:** ${{ github.event.pull_request.base.ref }}" >> conflict-report.md
          echo "**Head branch:** ${{ github.event.pull_request.head.ref }}" >> conflict-report.md
          echo "**Conflicted files:** ${{ needs.detect-conflicts.outputs.conflict-files }}" >> conflict-report.md
          echo "" >> conflict-report.md

          # 解決手順の生成
          echo "## 🛠️ Resolution Steps" >> conflict-report.md
          echo "" >> conflict-report.md
          echo '```bash' >> conflict-report.md
          echo "# Step 1: Update your local branch" >> conflict-report.md
          echo "git checkout ${{ github.event.pull_request.head.ref }}" >> conflict-report.md
          echo "git pull origin ${{ github.event.pull_request.head.ref }}" >> conflict-report.md
          echo "" >> conflict-report.md
          echo "# Step 2: Merge the latest base branch" >> conflict-report.md
          echo "git pull origin ${{ github.event.pull_request.base.ref }}" >> conflict-report.md
          echo "git merge origin/${{ github.event.pull_request.base.ref }}" >> conflict-report.md
          echo "" >> conflict-report.md
          echo "# Step 3: Resolve conflicts in the following files:" >> conflict-report.md

          IFS=',' read -ra files <<< "${{ needs.detect-conflicts.outputs.conflict-files }}"
          for file in "${files[@]}"; do
            if [[ -n "$file" ]]; then
              echo "# - $file" >> conflict-report.md
            fi
          done

          echo "" >> conflict-report.md
          echo "# Step 4: After resolving conflicts" >> conflict-report.md
          echo "git add ." >> conflict-report.md
          echo 'git commit -m "resolve: merge conflicts with ${{ github.event.pull_request.base.ref }}"' >> conflict-report.md
          echo "git push origin ${{ github.event.pull_request.head.ref }}" >> conflict-report.md
          echo '```' >> conflict-report.md
          echo "" >> conflict-report.md

          # 自動解決の可能性をチェック
          echo "## 🤖 Auto-Resolution Analysis" >> conflict-report.md
          echo "" >> conflict-report.md

          auto_resolvable=true
          IFS=',' read -ra files <<< "${{ needs.detect-conflicts.outputs.conflict-files }}"
          for file in "${files[@]}"; do
            if [[ -n "$file" && "$file" == *.py ]]; then
              echo "- \`$file\`: Python file - manual review recommended" >> conflict-report.md
              auto_resolvable=false
            elif [[ -n "$file" && "$file" == *.md ]]; then
              echo "- \`$file\`: Documentation - potential auto-resolution" >> conflict-report.md
            elif [[ -n "$file" && "$file" == *.json ]] || [[ -n "$file" && "$file" == *.yml ]] || [[ -n "$file" && "$file" == *.yaml ]]; then
              echo "- \`$file\`: Configuration file - manual review required" >> conflict-report.md
              auto_resolvable=false
            fi
          done

          if [ "$auto_resolvable" == "true" ]; then
            echo "" >> conflict-report.md
            echo "✅ **These conflicts may be auto-resolvable**" >> conflict-report.md
          else
            echo "" >> conflict-report.md
            echo "⚠️ **Manual conflict resolution required**" >> conflict-report.md
          fi

          echo "auto_resolvable=$auto_resolvable" >> $GITHUB_OUTPUT

      - name: 📝 Comment conflict analysis
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const conflictReport = fs.readFileSync('conflict-report.md', 'utf8');

            // 既存のコンフリクトコメントを検索
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('🔍 Conflict Analysis')
            );

            const body = `${conflictReport}

            ---
            🤖 This analysis was generated automatically. Last updated: ${new Date().toISOString()}`;

            if (botComment) {
              // 既存のコメントを更新
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // 新しいコメントを作成
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  # ✅ コンフリクト解決確認
  verify-resolution:
    runs-on: ubuntu-latest
    needs: [detect-conflicts, suggest-resolution]
    if: always()
    name: ✅ Verify Status

    steps:
      - name: 📊 Final conflict status
        run: |
          if [ "${{ needs.detect-conflicts.outputs.has-conflicts }}" == "true" ]; then
            echo "❌ PR has merge conflicts that need resolution"
            echo "🔧 Resolution suggestions have been posted as a comment"
            exit 1
          else
            echo "✅ No merge conflicts detected - PR is ready for review"
            exit 0
          fi

  # 🔄 継続的コンフリクト監視
  monitor-conflicts:
    runs-on: ubuntu-latest
    if: github.event.action == 'synchronize'
    name: 🔄 Monitor Changes

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 🔍 Check for new conflicts
        run: |
          echo "🔄 Monitoring PR for new conflicts after push..."

          # 新しいコミットで追加された変更を確認
          echo "📋 Recent changes:"
          git diff HEAD~1 HEAD --name-only | head -20

          echo "✅ Conflict monitoring completed"

  # 📈 コンフリクト統計
  conflict-stats:
    runs-on: ubuntu-latest
    needs: detect-conflicts
    if: always()
    name: 📈 Statistics

    steps:
      - name: 📈 Update conflict statistics
        run: |
          echo "📈 Conflict Detection Statistics"
          echo "==============================="
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "Has Conflicts: ${{ needs.detect-conflicts.outputs.has-conflicts }}"
          echo "Conflicted Files: ${{ needs.detect-conflicts.outputs.conflict-files }}"
          echo "Detection Time: $(date -u)"

          # 統計情報をアーティファクトとして保存
          cat > conflict-stats.json << EOF
          {
            "pr_number": ${{ github.event.pull_request.number }},
            "has_conflicts": "${{ needs.detect-conflicts.outputs.has-conflicts }}",
            "conflict_files": "${{ needs.detect-conflicts.outputs.conflict-files }}",
            "detection_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "base_branch": "${{ github.event.pull_request.base.ref }}",
            "head_branch": "${{ github.event.pull_request.head.ref }}"
          }
          EOF

      - name: 📤 Upload statistics
        uses: actions/upload-artifact@v4
        with:
          name: conflict-stats-${{ github.event.pull_request.number }}
          path: conflict-stats.json
          retention-days: 30
