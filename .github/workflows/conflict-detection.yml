name: üîç Enhanced Conflict Detection

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  statuses: write
  checks: write

jobs:
  conflict-detection:
    runs-on: ubuntu-latest
    name: üîç Detect Merge Conflicts
    outputs:
      has_conflicts: ${{ steps.conflict-check.outputs.has_conflicts }}
      conflicted_files: ${{ steps.conflict-check.outputs.conflicted_files }}
      merge_complexity: ${{ steps.conflict-check.outputs.merge_complexity }}

    steps:
      - name: üì• Checkout with full history
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîç Enhanced conflict detection
        id: conflict-check
        run: |
          echo "üîç Performing enhanced merge conflict detection..."

          # Fetch the latest base branch
          BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          HEAD_BRANCH="${{ github.event.pull_request.head.ref }}"
          git fetch origin $BASE_BRANCH

          echo "Base: origin/$BASE_BRANCH"
          echo "Head: $HEAD_BRANCH ($(git rev-parse HEAD | cut -c1-8))"

          # Method 1: git merge-tree (most accurate)
          echo "::group::Method 1: git merge-tree analysis"
          MERGE_BASE=$(git merge-base HEAD origin/$BASE_BRANCH)
          echo "Merge base: $MERGE_BASE"

          # Check for conflicts using merge-tree
          MERGE_TREE_OUTPUT=$(git merge-tree $MERGE_BASE HEAD origin/$BASE_BRANCH)

          if echo "$MERGE_TREE_OUTPUT" | grep -q "<<<<<<< "; then
            echo "‚ùå Conflicts detected by merge-tree"
            CONFLICTS_DETECTED=true

            # Extract conflicted files from merge-tree output
            CONFLICTED_FILES=$(echo "$MERGE_TREE_OUTPUT" | grep "^+++ " | sed 's/^+++ b\///' | sort -u | tr '\n' ',' | sed 's/,$//')
          else
            echo "‚úÖ No conflicts detected by merge-tree"
            CONFLICTS_DETECTED=false
            CONFLICTED_FILES=""
          fi
          echo "::endgroup::"

          # Method 2: Actual merge simulation (backup verification)
          echo "::group::Method 2: Merge simulation"
          ORIGINAL_BRANCH=$(git branch --show-current)
          git checkout -b temp-conflict-test

          # Attempt actual merge
          if git merge origin/$BASE_BRANCH --no-commit --no-ff >/dev/null 2>&1; then
            echo "‚úÖ Merge simulation successful"
            git merge --abort 2>/dev/null || true

            if [ "$CONFLICTS_DETECTED" = "true" ]; then
              echo "‚ö†Ô∏è Discrepancy: merge-tree detected conflicts but merge succeeded"
              echo "This may indicate complex conflicts that need manual review"
            fi
          else
            echo "‚ùå Merge simulation failed - conflicts confirmed"

            # Get actual conflicted files from merge
            ACTUAL_CONFLICTED=$(git diff --name-only --diff-filter=U 2>/dev/null | tr '\n' ',' | sed 's/,$//' || echo "")
            git merge --abort 2>/dev/null || true

            CONFLICTS_DETECTED=true
            if [ -n "$ACTUAL_CONFLICTED" ]; then
              CONFLICTED_FILES="$ACTUAL_CONFLICTED"
            fi
          fi

          git checkout $ORIGINAL_BRANCH
          git branch -D temp-conflict-test 2>/dev/null || true
          echo "::endgroup::"

          # Method 3: Change overlap analysis
          echo "::group::Method 3: Change overlap analysis"
          # Check if same files are modified in both branches
          BASE_FILES=$(git diff --name-only $MERGE_BASE..origin/$BASE_BRANCH | sort)
          HEAD_FILES=$(git diff --name-only $MERGE_BASE..HEAD | sort)
          OVERLAP_FILES=$(comm -12 <(echo "$BASE_FILES") <(echo "$HEAD_FILES") | tr '\n' ' ')

          if [ -n "$OVERLAP_FILES" ]; then
            echo "üìä Overlapping file changes detected: $OVERLAP_FILES"
            echo "This increases the risk of conflicts"
            MERGE_COMPLEXITY="high"
          else
            echo "‚úÖ No overlapping file changes"
            MERGE_COMPLEXITY="low"
          fi
          echo "::endgroup::"

          # Final decision
          echo "::group::Final Analysis"
          echo "Conflicts detected: $CONFLICTS_DETECTED"
          echo "Conflicted files: $CONFLICTED_FILES"
          echo "Merge complexity: $MERGE_COMPLEXITY"

          echo "has_conflicts=$CONFLICTS_DETECTED" >> $GITHUB_OUTPUT
          echo "conflicted_files=$CONFLICTED_FILES" >> $GITHUB_OUTPUT
          echo "merge_complexity=$MERGE_COMPLEXITY" >> $GITHUB_OUTPUT

          if [ "$CONFLICTS_DETECTED" = "true" ]; then
            echo "HAS_CONFLICTS=true" >> $GITHUB_ENV
            echo "CONFLICTED_FILES=$CONFLICTED_FILES" >> $GITHUB_ENV
          else
            echo "HAS_CONFLICTS=false" >> $GITHUB_ENV
          fi
          echo "::endgroup::"

      - name: üìù Create enhanced conflict report
        if: steps.conflict-check.outputs.has_conflicts == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const conflictedFiles = '${{ steps.conflict-check.outputs.conflicted_files }}';
            const mergeComplexity = '${{ steps.conflict-check.outputs.merge_complexity }}';
            const baseBranch = '${{ github.event.pull_request.base.ref }}';
            const headBranch = '${{ github.event.pull_request.head.ref }}';

            const complexityIcon = mergeComplexity === 'high' ? 'üî¥' : 'üü°';
            const filesList = conflictedFiles ? conflictedFiles.split(',').filter(f => f.trim()).map(file => `- \`${file.trim()}\``).join('\n') : '- No specific files identified';

            const body = `## ‚ö†Ô∏è Enhanced Merge Conflict Detection Report

            ${complexityIcon} **Merge Complexity:** ${mergeComplexity}
            **Base Branch:** \`${baseBranch}\`
            **Head Branch:** \`${headBranch}\`

            ### üìÅ Conflicted Files:
            ${filesList}

            ### üîß Recommended Resolution Steps:

            #### Method 1: Rebase (Recommended)
            \`\`\`bash
            # Fetch latest changes
            git fetch origin ${baseBranch}

            # Rebase your branch
            git checkout ${headBranch}
            git rebase origin/${baseBranch}

            # Resolve conflicts as they appear
            # After resolving each conflict:
            git add <conflicted-file>
            git rebase --continue

            # Force push (be careful!)
            git push --force-with-lease origin ${headBranch}
            \`\`\`

            #### Method 2: Merge (Alternative)
            \`\`\`bash
            # Update local main
            git checkout ${baseBranch}
            git pull origin ${baseBranch}

            # Merge into feature branch
            git checkout ${headBranch}
            git merge ${baseBranch}

            # Resolve conflicts manually
            git add .
            git commit -m "resolve: merge conflicts with ${baseBranch}"
            git push origin ${headBranch}
            \`\`\`

            ### üîç Conflict Analysis Tips:
            - Use \`git status\` to see conflicted files
            - Look for conflict markers: \`<<<<<<<\`, \`=======\`, \`>>>>>>>\`
            - Consider using a merge tool: \`git mergetool\`
            - Test thoroughly after resolution

            ### ‚úÖ Verification Checklist:
            - [ ] All conflict markers removed
            - [ ] Code compiles/runs without errors
            - [ ] Tests pass locally
            - [ ] Manual functionality testing completed
            - [ ] Commit message follows project conventions

            ---
            ü§ñ **Enhanced Detection**: This report uses multiple conflict detection methods for improved accuracy.
            üìÖ **Generated**: ${new Date().toISOString()}
            `;

            // Check for existing conflict comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Enhanced Merge Conflict Detection Report')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: ‚úÖ Success notification
        if: steps.conflict-check.outputs.has_conflicts == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const mergeComplexity = '${{ steps.conflict-check.outputs.merge_complexity }}';
            console.log(`‚úÖ No merge conflicts detected (complexity: ${mergeComplexity})`);
            console.log('üéâ PR is ready for review!');

      - name: üìä Set enhanced status check
        uses: actions/github-script@v7
        with:
          script: |
            const hasConflicts = '${{ steps.conflict-check.outputs.has_conflicts }}' === 'true';
            const mergeComplexity = '${{ steps.conflict-check.outputs.merge_complexity }}';
            const conflictedFiles = '${{ steps.conflict-check.outputs.conflicted_files }}';

            const state = hasConflicts ? 'failure' : 'success';
            const description = hasConflicts
              ? `Conflicts detected (${mergeComplexity} complexity)`
              : `Ready to merge (${mergeComplexity} complexity)`;

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: state,
              target_url: `${context.payload.repository.html_url}/actions/runs/${context.runId}`,
              description: description,
              context: 'ci/enhanced-conflict-detection'
            });

      - name: ‚ùå Fail job if conflicts detected
        if: steps.conflict-check.outputs.has_conflicts == 'true'
        run: |
          echo "‚ùå Enhanced conflict detection failed"
          echo "üîç Conflicts found in: ${{ steps.conflict-check.outputs.conflicted_files }}"
          echo "üìä Merge complexity: ${{ steps.conflict-check.outputs.merge_complexity }}"
          echo "üìù Detailed resolution guide posted as comment"
          exit 1

  # üßπ Cleanup redundant workflows
  cleanup-check:
    runs-on: ubuntu-latest
    if: always()
    name: üßπ Workflow Cleanup Check
    steps:
      - name: üìã Log workflow optimization
        run: |
          echo "üßπ Enhanced conflict detection is active"
          echo "üí° Consider removing redundant conflict-check.yml workflow"
          echo "‚ú® This workflow provides comprehensive conflict analysis"
