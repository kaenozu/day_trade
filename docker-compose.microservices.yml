# Docker Compose for Local Development of Microservices
# Issue #418: Microservices Architecture Development Environment

version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: trading_db
      POSTGRES_USER: trading_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trading_user -d trading_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  timescaledb:
    image: timescale/timescaledb:latest-pg15
    environment:
      POSTGRES_DB: market_data_db
      POSTGRES_USER: timescale_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password}
    ports:
      - "5433:5432"
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U timescale_user -d market_data_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-cluster:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - redis_cluster_data:/data
    command: redis-server --appendonly yes --cluster-enabled yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Trading Services
  market-data-service:
    build:
      context: .
      dockerfile: docker/market-data-service/Dockerfile
    ports:
      - "8001:8080"
      - "8091:8081"  # WebSocket port
    environment:
      - DATABASE_URL=postgresql://timescale_user:${POSTGRES_PASSWORD:-dev_password}@timescaledb:5432/market_data_db
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
    depends_on:
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./config/market-data-config.yaml:/app/config/config.yaml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  analysis-service:
    build:
      context: .
      dockerfile: docker/analysis-service/Dockerfile
    ports:
      - "8002:8080"
    environment:
      - DATABASE_URL=postgresql://trading_user:${POSTGRES_PASSWORD:-dev_password}@postgres:5432/trading_db
      - REDIS_URL=redis://redis:6379/1
      - ML_MODEL_PATH=/app/models
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./config/analysis-config.yaml:/app/config/config.yaml
      - ./models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  trading-engine-service:
    build:
      context: .
      dockerfile: docker/trading-engine-service/Dockerfile
    ports:
      - "8003:8080"
    environment:
      - DATABASE_URL=postgresql://trading_user:${POSTGRES_PASSWORD:-dev_password}@postgres:5432/trading_db
      - REDIS_URL=redis://redis:6379/2
      - BROKER_API_KEY=dev_api_key
      - RISK_LIMIT_PERCENT=10
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./config/trading-engine-config.yaml:/app/config/config.yaml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  hft-service:
    build:
      context: .
      dockerfile: docker/hft-service/Dockerfile
    ports:
      - "8004:8080"
      - "8094:8082"  # HFT stream port
    environment:
      - REDIS_URL=redis://redis-cluster:6379/0
      - HFT_LATENCY_TARGET_US=30
      - CPU_AFFINITY_ENABLED=false  # Disabled in Docker
    depends_on:
      redis-cluster:
        condition: service_healthy
    volumes:
      - ./config/hft-config.yaml:/app/config/config.yaml
    privileged: true  # Required for performance optimizations
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 60s
      timeout: 20s
      retries: 3

  # API Gateway
  kong:
    image: kong:3.4
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /kong/kong.yaml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000"  # Proxy port
      - "8443:8443"  # Proxy SSL port
      - "8001:8001"  # Admin API
    volumes:
      - ./k8s/ingress/kong.yaml:/kong/kong.yaml
    depends_on:
      - market-data-service
      - analysis-service
      - trading-engine-service
      - hft-service
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Services
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:10.1.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus

  # Log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.0
    ports:
      - "5044:5044"
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch

volumes:
  postgres_data:
  timescaledb_data:
  redis_data:
  redis_cluster_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  default:
    driver: bridge
