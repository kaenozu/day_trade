# ML Service Kubernetes Manifests
# Day Trade ML System - Microservices Deployment

apiVersion: v1
kind: Namespace
metadata:
  name: day-trade
  labels:
    name: day-trade
    istio-injection: enabled

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ml-service
  namespace: day-trade
  labels:
    app: ml-service
    version: v1

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ml-service-config
  namespace: day-trade
data:
  SERVICE_NAME: "ml-service"
  SERVICE_PORT: "8000"
  REDIS_HOST: "redis"
  REDIS_PORT: "6379"
  LOG_LEVEL: "INFO"
  METRICS_ENABLED: "true"
  TRACING_ENABLED: "true"
  JAEGER_ENDPOINT: "http://jaeger:14268/api/traces"

---
apiVersion: v1
kind: Secret
metadata:
  name: ml-service-secrets
  namespace: day-trade
type: Opaque
data:
  REDIS_PASSWORD: cmVkaXNfcGFzc3dvcmRfMjAyNQ==  # redis_password_2025
  API_SECRET_KEY: bWwtc2VydmljZS1zZWNyZXQta2V5LTIwMjU=  # ml-service-secret-key-2025

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ml-service-v1
  namespace: day-trade
  labels:
    app: ml-service
    version: v1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ml-service
      version: v1
  template:
    metadata:
      labels:
        app: ml-service
        version: v1
      annotations:
        sidecar.istio.io/inject: "true"
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ml-service
      containers:
      - name: ml-service
        image: day-trade/ml-service:v1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: SERVICE_NAME
          valueFrom:
            configMapKeyRef:
              name: ml-service-config
              key: SERVICE_NAME
        - name: SERVICE_PORT
          valueFrom:
            configMapKeyRef:
              name: ml-service-config
              key: SERVICE_PORT
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: ml-service-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: ml-service-config
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ml-service-secrets
              key: REDIS_PASSWORD
        - name: API_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: ml-service-secrets
              key: API_SECRET_KEY
        - name: JAEGER_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: ml-service-config
              key: JAEGER_ENDPOINT
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: cache-volume
        emptyDir:
          sizeLimit: 1Gi
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: "day-trade.com/ml-workload"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - ml-service
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: ml-service
  namespace: day-trade
  labels:
    app: ml-service
    service: ml-service
spec:
  ports:
  - port: 8000
    targetPort: 8000
    name: http
    protocol: TCP
  selector:
    app: ml-service
  type: ClusterIP

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: ml-service-hpa
  namespace: day-trade
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: ml-service-v1
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: ml_prediction_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 60

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: ml-service-pdb
  namespace: day-trade
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: ml-service

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ml-service-netpol
  namespace: day-trade
spec:
  podSelector:
    matchLabels:
      app: ml-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - podSelector:
        matchLabels:
          app: data-service
    - podSelector:
        matchLabels:
          app: symbol-service
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: data-service
    ports:
    - protocol: TCP
      port: 8001
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: []
    ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
# ML Service v2 Deployment (for Canary)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ml-service-v2
  namespace: day-trade
  labels:
    app: ml-service
    version: v2
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ml-service
      version: v2
  template:
    metadata:
      labels:
        app: ml-service
        version: v2
      annotations:
        sidecar.istio.io/inject: "true"
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ml-service
      containers:
      - name: ml-service
        image: day-trade/ml-service:v2.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: SERVICE_NAME
          valueFrom:
            configMapKeyRef:
              name: ml-service-config
              key: SERVICE_NAME
        - name: SERVICE_PORT
          valueFrom:
            configMapKeyRef:
              name: ml-service-config
              key: SERVICE_PORT
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: ml-service-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: ml-service-config
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: ml-service-secrets
              key: REDIS_PASSWORD
        - name: MODEL_VERSION
          value: "v2.0.0"
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: cache-volume
          mountPath: /app/cache
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: cache-volume
        emptyDir:
          sizeLimit: 1Gi