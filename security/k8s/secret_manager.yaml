# Issue #800 Phase 5: Kubernetes シークレット管理
# Day Trade ML System セキュアシークレット設定

apiVersion: v1
kind: Namespace
metadata:
  name: day-trade-secrets
  labels:
    name: day-trade-secrets
    security.level: critical

---
# データベース接続シークレット
apiVersion: v1
kind: Secret
metadata:
  name: database-credentials
  namespace: day-trade
  labels:
    app: day-trade-ml
    type: database
    security.level: critical
type: Opaque
data:
  # Base64エンコード済み値（実際の運用では外部管理）
  postgres-username: ZGF5X3RyYWRlX3VzZXI=  # day_trade_user
  postgres-password: RGF5VHJhZGUyMDI1IURCUGFzcw==  # DayTrade2025!DBPass
  postgres-database: ZGF5X3RyYWRlX21s  # day_trade_ml
  postgres-host: cG9zdGdyZXNxbC1zZXJ2aWNl  # postgresql-service
  postgres-port: NTQzMg==  # 5432

---
# Redis接続シークレット
apiVersion: v1
kind: Secret
metadata:
  name: redis-credentials
  namespace: day-trade
  labels:
    app: day-trade-ml
    type: cache
type: Opaque
data:
  redis-password: UmVkaXMyMDI1IVBhc3M=  # Redis2025!Pass
  redis-host: cmVkaXMtc2VydmljZQ==  # redis-service
  redis-port: NjM3OQ==  # 6379

---
# JWT認証シークレット
apiVersion: v1
kind: Secret
metadata:
  name: jwt-secrets
  namespace: day-trade
  labels:
    app: day-trade-ml
    type: auth
    security.level: critical
type: Opaque
data:
  jwt-secret-key: RGF5VHJhZGVNTFN5c3RlbUpXVFNlY3JldDIwMjUh  # DayTradeMLSystemJWTSecret2025!
  jwt-issuer: ZGF5LXRyYWRlLW1sLXN5c3RlbQ==  # day-trade-ml-system

---
# API キーシークレット
apiVersion: v1
kind: Secret
metadata:
  name: api-keys
  namespace: day-trade
  labels:
    app: day-trade-ml
    type: api-keys
    security.level: critical
type: Opaque
data:
  ml-service-key: ZHRfbWxfc2VydmljZV9hYmMxMjNkZWY0NTZnaGk3ODk=  # dt_ml_service_abc123def456ghi789
  data-service-key: ZHRfZGF0YV9zZXJ2aWNlX3h5ejc4OWFiYzEyM2RlZjQ1Ng==  # dt_data_service_xyz789abc123def456
  scheduler-service-key: ZHRfc2NoZWR1bGVyX3NlcnZpY2VfcXdlcnR5MTIzNDU2  # dt_scheduler_service_qwerty123456

---
# 暗号化キーシークレット
apiVersion: v1
kind: Secret
metadata:
  name: encryption-keys
  namespace: day-trade
  labels:
    app: day-trade-ml
    type: encryption
    security.level: critical
type: Opaque
data:
  master-encryption-key: ZEdGNVZISmhaR1ZOVEZONWMzUmxiVTFoYzNSbGNrVnVZM0o1Y0hScGIyNU9aWGN5TURJMUlRPT0=
  data-encryption-key: UkdGNVZISmhaR1ZOVEZONWMzUmxiVTFoYzNSbGNrVnVZM0o1Y0hScGIyNU9aWGN5TURJMUlRPT0=

---
# 外部APIシークレット
apiVersion: v1
kind: Secret
metadata:
  name: external-api-secrets
  namespace: day-trade
  labels:
    app: day-trade-ml
    type: external-api
type: Opaque
data:
  # 市場データAPIキー
  market-data-api-key: YldGeU1YUmhkR0ZRU1VGa01qRTFNakF5TlE9PQ==
  # Slackウェブフック
  slack-webhook-url: aUhSMGNITTZMeTlvYjI5cmN5NXpiR0ZqYXk1amIyMHZjMlZ5ZG1salpYTXZXVTlWVWk5RVJVWkJWVXgwTDNkRlFreWw=

---
# TLS証明書シークレット
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificates
  namespace: day-trade
  labels:
    app: day-trade-ml
    type: tls
type: kubernetes.io/tls
data:
  # 実際の運用では有効な証明書を使用
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCi4uLiAoQmFzZTY0IGVuY29kZWQgY2VydGlmaWNhdGUpCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCi4uLiAoQmFzZTY0IGVuY29kZWQgcHJpdmF0ZSBrZXkpCi0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0=

---
# ServiceAccount（セキュアアクセス用）
apiVersion: v1
kind: ServiceAccount
metadata:
  name: day-trade-secure-sa
  namespace: day-trade
  labels:
    app: day-trade-ml
    security.level: high
secrets:
  - name: database-credentials
  - name: redis-credentials
  - name: jwt-secrets
  - name: api-keys
  - name: encryption-keys

---
# ClusterRole（シークレットアクセス権限）
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: day-trade-secret-reader
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]
    resourceNames:
      - "database-credentials"
      - "redis-credentials"
      - "jwt-secrets"
      - "api-keys"
      - "encryption-keys"
      - "external-api-secrets"
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["get", "list"]
    resourceNames:
      - "day-trade-config"
      - "monitoring-config"

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: day-trade-secret-reader-binding
subjects:
  - kind: ServiceAccount
    name: day-trade-secure-sa
    namespace: day-trade
  - kind: ServiceAccount
    name: ml-service-sa
    namespace: day-trade
  - kind: ServiceAccount
    name: data-service-sa
    namespace: day-trade
roleRef:
  kind: ClusterRole
  name: day-trade-secret-reader
  apiGroup: rbac.authorization.k8s.io

---
# NetworkPolicy（シークレット保護）
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: day-trade-secrets-network-policy
  namespace: day-trade
spec:
  podSelector:
    matchLabels:
      access-secrets: "true"
  policyTypes:
    - Ingress
    - Egress
  ingress:
    # 認証されたサービスのみアクセス許可
    - from:
        - podSelector:
            matchLabels:
              app: day-trade-ml
        - namespaceSelector:
            matchLabels:
              name: day-trade
      ports:
        - protocol: TCP
          port: 8080
  egress:
    # 必要な外部接続のみ許可
    - to: []
      ports:
        - protocol: TCP
          port: 443  # HTTPS
        - protocol: TCP
          port: 5432  # PostgreSQL
        - protocol: TCP
          port: 6379  # Redis

---
# Pod Security Policy（セキュリティポリシー）
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: day-trade-restricted-psp
  namespace: day-trade
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: 'MustRunAsNonRoot'
  supplementalGroups:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: 'MustRunAs'
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: true

---
# Secret管理用ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-management-config
  namespace: day-trade
  labels:
    app: day-trade-ml
    type: config
data:
  secret-rotation-schedule: "0 2 * * 0"  # 毎週日曜日2時
  encryption-algorithm: "AES-256-GCM"
  key-rotation-days: "90"
  audit-log-retention: "180"
  critical-secrets: |
    database-credentials
    jwt-secrets
    api-keys
    encryption-keys
  secret-access-policy: |
    {
      "database-credentials": {
        "allowed_services": ["ml-service", "data-service", "scheduler-service"],
        "access_logging": true,
        "rotation_required": true
      },
      "jwt-secrets": {
        "allowed_services": ["ml-service", "auth-service"],
        "access_logging": true,
        "rotation_required": true
      },
      "api-keys": {
        "allowed_services": ["all"],
        "access_logging": true,
        "rotation_required": false
      }
    }

---
# シークレット監視・アラート設定
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: secret-access-monitor
  namespace: day-trade
  labels:
    app: day-trade-ml
    monitoring: enabled
spec:
  selector:
    matchLabels:
      monitor-secrets: "true"
  endpoints:
    - port: metrics
      interval: 30s
      path: /metrics