[build-system]
requires = [
    "setuptools>=61.0",
    "wheel",
]
build-backend = "setuptools.build_meta"

[project]
name = "day-trade"
version = "1.1.0"
description = "Automated day trading system with optimized dependencies"
authors = [
    { name = "DayTrade Team", email = "team@daytrade.com" },
]
readme = "README.md"
requires-python = ">=3.8,<3.13"
dependencies = [
    "click>=8.1.0,<9.0",
    "rich>=13.0.0,<15.0",
    "prompt_toolkit>=3.0.0,<4.0",
    "pandas>=2.0.0,<3.0",
    "numpy>=1.24.0,<2.0",
    "scipy>=1.10.0,<2.0",
    "yfinance>=0.2.28,<0.3.0",
    "pandas-datareader>=0.10.0,<1.0",
    "ta>=0.11.0,<1.0",
    "pandas-ta>=0.3.14b,<1.0",
    "scikit-learn>=1.3.0,<2.0",
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.0,<2.0",
    "pydantic>=2.0.0,<3.0",
    "structlog>=23.0.0,<25.0",
    "tenacity>=8.2.0,<9.0",
    "psutil>=5.9.0",
    "cryptography>=41.0.0,<43.0",
    "pyotp>=2.9.0,<3.0",
    "qrcode[pil]>=7.4.0,<8.0",
    "catboost>=1.2.0,<2.0",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Office/Business :: Financial :: Investment",
    "Typing :: Typed",
]

[project.optional-dependencies]
test = [
    "pytest>=7.4.0,<9.0",
    "pytest-cov>=4.1.0,<6.0",
    "pytest-mock>=3.10.0,<4.0",
    "pytest-xdist>=3.0.0,<4.0",
    "requests-mock>=1.12.0,<2.0",
]
dashboard = [
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "websockets>=11.0",
]
mlops = [
    "mlflow>=2.0.0,<3.0",
]
dev = [
    "black>=23.0.0,<25.0",
    "mypy>=1.4.0,<2.0",
    "ruff==0.1.15",
    "bandit>=1.7.0,<2.0",
    "safety>=2.0.0,<4.0",
    "pip-audit>=2.6.0,<3.0",
    "pre-commit>=3.3.0,<4.0",
    "sphinx>=7.0.0,<9.0",
    "sphinx-rtd-theme>=1.3.0,<3.0",
    "memory-profiler>=0.61.0,<1.0",
    "line-profiler>=4.0.0,<5.0",
    "ipython>=8.0.0,<9.0",
    "jupyter>=1.0.0,<2.0",
    "pip-tools>=7.0.0,<8.0",
    "pip-check-reqs>=2.0.0,<3.0",
    "deptry>=0.12.0,<1.0",
]

[tool.ruff]
line-length = 88
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "alembic",
]
target-version = "py38"

[tool.ruff.lint]
select = [
    "E",
    "F",
    "W",
    "B",
    "C90",
    "I",
    "N",
    "UP",
]
ignore = [
    "E501",
    "B008",
    "C901",
    "N806",
    "N803",
    "B007",
    "F841",
    "F821",
    "F401",
    "E402",
    "SIM118",
    "E722",
    "B904",
    "SIM117",
    "SIM102",
    "SIM105",
    "SIM108",
    "SIM114",
    "N812",
    "N801",
    "N802",
    "B017",
    "B023",
    "B027",
    "B034",
    "E741",
]
fixable = [
    "ALL",
]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "PLR2004",
    "S101",
    "F403",
    "F405",
]
"demo_*.py" = [
    "T201",
    "S101",
]
"*_demo.py" = [
    "T201",
    "S101",
]
"example_*.py" = [
    "T201",
    "S101",
]

[tool.black]
line-length = 88
target-version = [
    "py38",
]
include = "\\.pyi?$"
extend-exclude = "/(\n  # directories\n  \\.eggs\n  | \\.git\n  | \\.hg\n  | \\.mypy_cache\n  | \\.tox\n  | \\.venv\n  | build\n  | dist\n  | alembic\n)/\n"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-q --tb=no --maxfail=1 -x --disable-warnings --no-header --no-summary -p no:cacheprovider"
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
markers = [
    "integration: marks tests as integration tests (run with --integration)",
    "slow: marks tests as slow (run with --slow)",
    "unit: marks tests as unit tests (default)",
]
filterwarnings = [
    "ignore::DeprecationWarning:pandas.*",
    "ignore:.*Bitwise inversion.*:DeprecationWarning",
    "ignore:.*R\\^2 score is not well-defined.*:sklearn.exceptions.UndefinedMetricWarning",
    "ignore:.*Remove `format_exc_info`.*:UserWarning",
]

[tool.coverage.run]
source = [
    "src",
]
branch = true
parallel = true
concurrency = [
    "thread",
    "multiprocessing",
]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*_test.py",
    "*/demo_*.py",
    "*_demo.py",
    "*/example_*.py",
    "*/alembic/*",
    "*/migrations/*",
    "*/__main__.py",
    "*/ensemble_voting_validation.py",
    "*/ml_performance_benchmark.py",
    "*/optimized_*.py",
    "*/enhanced_*.py",
    "*/screener_original.py",
    "*/database_backup.py",
    "*/base_backup.py",
    "*/database_optimization_strategies.py",
    "*/enhanced_main.py",
    "*/optimized_orchestrator.py",
    "*/auto_optimizer.py",
    "*/orchestrator.py",
    "*/api_resilience.py",
    "*/i18n_messages.py",
    "*/performance_analyzer.py",
    "*/performance_optimizer.py",
    "*/windows_console_fix.py",
    "*/advanced_backtest.py",
    "*/watchlist_commands.py",
    "*/bulk_operations.py",
    "*/main.py",
]

[tool.coverage.report]
show_missing = true
skip_covered = false
precision = 2
sort = "Cover"
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "if TYPE_CHECKING:",
    "pass",
    "\\.\\.\\.",
]
fail_under = 30

[tool.coverage.html]
directory = "htmlcov"
show_contexts = true
skip_covered = false

[tool.coverage.xml]
output = "coverage.xml"

[tool.coverage.json]
output = "coverage.json"
show_contexts = true

[tool.bandit]
exclude_dirs = [
    "tests",
    "docs",
    "scripts",
]
skips = [
    "B101",
    "B601",
]
