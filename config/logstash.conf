#==============================================================================
# Logstash Pipeline 設定 - Issue #442 Phase 2
# 構造化ログ処理・変換・ルーティング
#==============================================================================

input {
  # Day Trade アプリケーションログ (JSON形式)
  beats {
    port => 5044
    host => "0.0.0.0"
  }

  # TCP入力 (アプリケーションから直接)
  tcp {
    port => 5000
    codec => json_lines
    tags => ["app_direct"]
  }

  # UDP入力 (高頻度ログ用)
  udp {
    port => 5000
    codec => json_lines
    tags => ["high_frequency"]
  }

  # ファイル入力 (コンテナログ)
  file {
    path => "/var/log/containers/*.log"
    start_position => "beginning"
    codec => json
    tags => ["container_logs"]
    type => "container"
  }

  # ファイル入力 (アプリケーションログ)
  file {
    path => "/var/log/day-trade/*.log"
    start_position => "beginning"
    codec => json
    tags => ["application_logs"]
    type => "application"
  }
}

filter {
  # === 共通フィルタ ===

  # タイムスタンプ正規化
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601", "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", "yyyy-MM-dd HH:mm:ss.SSS" ]
      target => "@timestamp"
    }
  }

  # サービス情報追加
  mutate {
    add_field => {
      "[@metadata][index_prefix]" => "day-trade-logs"
      "[service][environment]" => "${ENVIRONMENT:production}"
    }
  }

  # === 高頻度ログ処理 ===
  if "high_frequency" in [tags] {
    # HFTログのサンプリング (10%のみ保持)
    if [event][category] == "trade_execution" {
      # 取引実行ログは全て保持
    } else {
      # その他は確率的サンプリング
      ruby {
        code => "
          if rand() > 0.1
            event.cancel()
          end
        "
      }
    }
  }

  # === ログレベル別処理 ===

  # エラーログ強化
  if [level] == "ERROR" or [level] == "error" {
    mutate {
      add_tag => ["error"]
      add_field => { "[alert][severity]" => "high" }
    }

    # エラーパターン検出
    if [message] =~ /OutOfMemoryError|MemoryError/ {
      mutate {
        add_tag => ["memory_error"]
        add_field => { "[alert][type]" => "memory_exhaustion" }
      }
    }

    if [message] =~ /TimeoutError|ConnectTimeout/ {
      mutate {
        add_tag => ["timeout_error"]
        add_field => { "[alert][type]" => "timeout" }
      }
    }

    if [message] =~ /DatabaseError|Connection refused/ {
      mutate {
        add_tag => ["database_error"]
        add_field => { "[alert][type]" => "database_connectivity" }
      }
    }
  }

  # 警告ログ
  if [level] == "WARN" or [level] == "warn" {
    mutate {
      add_tag => ["warning"]
      add_field => { "[alert][severity]" => "medium" }
    }
  }

  # === 取引ログ特別処理 ===
  if [event][category] == "trade_execution" {
    # 取引メトリクス抽出
    mutate {
      add_tag => ["trade_metrics"]
    }

    # レイテンシ分析
    if [latency_microseconds] {
      ruby {
        code => "
          latency = event.get('[latency_microseconds]')
          if latency && latency.is_a?(Numeric)
            if latency > 50
              event.set('[performance][slow_trade]', true)
              event.set('[alert][type]', 'high_latency')
            end
            if latency < 10
              event.set('[performance][ultra_fast]', true)
            end
          end
        "
      }
    }

    # P&L分析
    if [pnl] {
      ruby {
        code => "
          pnl = event.get('[pnl]')
          if pnl && pnl.is_a?(Numeric)
            if pnl < -1000
              event.set('[alert][type]', 'large_loss')
              event.set('[alert][severity]', 'high')
            end
          end
        "
      }
    }
  }

  # === セキュリティログ処理 ===
  if [event][category] == "security" {
    mutate {
      add_tag => ["security"]
    }

    # 不正アクセス検出
    if [message] =~ /failed login|authentication failed|unauthorized access/i {
      mutate {
        add_tag => ["security_threat"]
        add_field => { "[alert][type]" => "authentication_failure" }
        add_field => { "[alert][severity]" => "high" }
      }
    }

    # SQL インジェクション検出
    if [message] =~ /DROP TABLE|DELETE FROM|UNION SELECT|; --|'OR '1'='1/i {
      mutate {
        add_tag => ["sql_injection"]
        add_field => { "[alert][type]" => "sql_injection_attempt" }
        add_field => { "[alert][severity]" => "critical" }
      }
    }
  }

  # === API アクセスログ処理 ===
  if [event][category] == "api_access" {
    # レスポンス時間分析
    if [response_time_ms] {
      ruby {
        code => "
          response_time = event.get('[response_time_ms]')
          if response_time && response_time.is_a?(Numeric)
            if response_time > 100
              event.set('[performance][slow_api]', true)
            end
          end
        "
      }
    }

    # HTTPステータスコード処理
    if [http][status_code] {
      if [http][status_code] >= 400 {
        mutate {
          add_tag => ["http_error"]
        }

        if [http][status_code] >= 500 {
          mutate {
            add_field => { "[alert][type]" => "server_error" }
            add_field => { "[alert][severity]" => "high" }
          }
        }
      }
    }
  }

  # === 機密情報マスキング ===

  # クレジットカード番号マスキング
  mutate {
    gsub => [
      "message", "\d{4}-?\d{4}-?\d{4}-?\d{4}", "****-****-****-****"
    ]
  }

  # メールアドレス部分マスキング
  mutate {
    gsub => [
      "message", "([a-zA-Z0-9._%+-]+)@([a-zA-Z0-9.-]+\.[a-zA-Z]{2,})", "*****@\\2"
    ]
  }

  # パスワード・トークンフィールド削除
  mutate {
    remove_field => ["password", "token", "api_key", "secret", "auth_token"]
  }

  # === 地理的情報追加 ===
  if [client_ip] {
    geoip {
      source => "client_ip"
      target => "geoip"
      add_tag => ["geoip"]
    }
  }

  # === パフォーマンス最適化 ===

  # 不要フィールド削除
  mutate {
    remove_field => ["host", "agent", "ecs", "input", "log", "@version"]
  }

  # インデックス最適化用フィールド追加
  ruby {
    code => "
      # 日付ベースのインデックス分割
      event.set('[@metadata][index_suffix]', Time.now.strftime('%Y.%m.%d'))

      # ログレベルベースの分割
      level = event.get('[level]')
      if level
        event.set('[@metadata][index_type]', level.downcase)
      end
    "
  }
}

output {
  # === メインElasticsearch出力 ===
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{[@metadata][index_prefix]}-%{[@metadata][index_suffix]}"
    template_name => "day-trade-logs"
    template => "/usr/share/logstash/templates/day-trade-logs.json"
    template_overwrite => true

    # パフォーマンス最適化
    workers => 4
    flush_size => 500
    idle_flush_time => 5

    # エラー処理
    manage_template => true
    ilm_enabled => true
    ilm_rollover_alias => "day-trade-logs"
    ilm_pattern => "000001"
    ilm_policy => "day-trade-logs-policy"
  }

  # === エラー専用インデックス ===
  if "error" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "day-trade-errors-%{+YYYY.MM.dd}"
      workers => 2
    }
  }

  # === セキュリティ専用インデックス ===
  if "security" in [tags] or "security_threat" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "day-trade-security-%{+YYYY.MM.dd}"
      workers => 1
    }
  }

  # === 高頻度メトリクス専用インデックス ===
  if "trade_metrics" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "day-trade-metrics-%{+YYYY.MM.dd}"
      workers => 8
      flush_size => 1000
      idle_flush_time => 1
    }
  }

  # === アラート出力 ===
  if [alert][severity] == "critical" {
    # 重要なアラートは即座に通知システムに送信
    http {
      url => "http://alertmanager:9093/api/v1/alerts"
      http_method => "post"
      format => "json"
      headers => {
        "Content-Type" => "application/json"
      }
    }
  }

  # === デバッグ出力 ===
  if [@metadata][debug] == true {
    stdout {
      codec => rubydebug {
        metadata => true
      }
    }
  }

  # === メトリクス出力（Prometheus形式） ===
  if [event][category] == "metrics" {
    http {
      url => "http://prometheus-pushgateway:9091/metrics/job/logstash-metrics"
      http_method => "post"
      format => "form"
      mapping => {
        "metric_name" => "%{[metric][name]}"
        "metric_value" => "%{[metric][value]}"
        "metric_labels" => "%{[metric][labels]}"
      }
    }
  }
}

#==============================================================================
# Logstash Pipeline の特徴:
#
# 🔄 高性能ログ処理:
#   - マルチワーカー並列処理
#   - バッファリングとバッチ処理
#   - HFTログのサンプリング
#
# 🔍 インテリジェント分析:
#   - エラーパターン自動検出
#   - セキュリティ脅威識別
#   - パフォーマンス異常検知
#
# 🛡️ セキュリティ対応:
#   - 機密情報自動マスキング
#   - セキュリティログ分離
#   - 異常アクセス検出
#
# 📊 メトリクス統合:
#   - 取引メトリクス抽出
#   - SLI/SLO データ準備
#   - リアルタイムアラート
#
# ⚡ HFT最適化:
#   - <1ms ログ処理
#   - 確率的サンプリング
#   - 効率的インデックス分割
#==============================================================================